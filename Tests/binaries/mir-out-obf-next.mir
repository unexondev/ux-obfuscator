--- |
  ; ModuleID = './binaries/mir-out-obf.mir'
  source_filename = "./src/main.cpp"
  target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-windows-msvc"
  
  %struct.StringContainer = type { i32, ptr }
  
  @.str = private unnamed_addr constant [29 x i8] c"Gonna let str_printer talk!\0A\00", align 1
  @.str.1 = private unnamed_addr constant [26 x i8] c"str_printer: hello world!\00", align 1
  @.str.2 = private unnamed_addr constant [10 x i8] c"warevisor\00", align 1
  @.str.3 = private unnamed_addr constant [11 x i8] c"warevising\00", align 1
  @.str.4 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define dso_local noundef ptr @_Z11str_printerv() #0 {
    %1 = getelementptr i8, ptr @.str, i32 1193046
    %2 = inttoptr i64 2147352576 to ptr
    %3 = load i32, ptr %2, align 4
    %4 = lshr i32 %3, 8
    %5 = and i32 %4, 255
    %6 = add i32 %5, 1048576
    %7 = add i32 931563912, %6
    %8 = inttoptr i64 2147352576 to ptr
    %9 = load i32, ptr %8, align 4
    %10 = lshr i32 %9, 8
    %11 = and i32 %10, 255
    %12 = add i32 %11, 16777215
    %13 = add i32 19771773, %12
    %14 = mul i32 %13, %7
    %15 = add i32 %7, %13
    %16 = lshr i32 %14, %15
    %17 = sub i32 %15, %14
    %18 = mul i32 %16, %17
    %19 = or i32 %17, %16
    %20 = lshr i32 %19, %18
    %21 = add i32 %20, 1193046
    %22 = ptrtoint ptr %1 to i64
    %23 = zext i32 %21 to i64
    %24 = sub i64 %22, %23
    %25 = inttoptr i64 %24 to ptr
    %26 = call i32 (ptr, ...) @printf(ptr noundef %25)
    %27 = getelementptr i8, ptr @.str.1, i32 1193046
    %28 = inttoptr i64 2147352576 to ptr
    %29 = load i32, ptr %28, align 4
    %30 = lshr i32 %29, 8
    %31 = and i32 %30, 255
    %32 = add i32 %31, 1048576
    %33 = add i32 585795882, %32
    %34 = inttoptr i64 2147352576 to ptr
    %35 = load i32, ptr %34, align 4
    %36 = lshr i32 %35, 8
    %37 = and i32 %36, 255
    %38 = add i32 %37, 16777215
    %39 = shl i32 -1857945413, %38
    %40 = xor i32 %33, %39
    %41 = shl i32 %39, %33
    %42 = shl i32 %40, %41
    %43 = xor i32 %40, -1
    %44 = xor i32 %43, -1
    %45 = xor i32 %43, -1
    %46 = xor i32 %44, %45
    %47 = add i32 %46, 1193046
    %48 = ptrtoint ptr %27 to i64
    %49 = zext i32 %47 to i64
    %50 = sub i64 %48, %49
    %51 = inttoptr i64 %50 to ptr
    ret ptr %51
  }
  
  declare i32 @printf(ptr noundef, ...) #1
  
  ; Function Attrs: mustprogress noinline norecurse optnone uwtable
  define dso_local noundef i32 @main() #2 {
    %1 = alloca %struct.StringContainer, align 8
    %2 = alloca %struct.StringContainer, align 8
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = getelementptr inbounds %struct.StringContainer, ptr %1, i32 0, i32 0
    store i32 300, ptr %5, align 8
    %6 = getelementptr inbounds %struct.StringContainer, ptr %1, i32 0, i32 1
    %7 = alloca i8, i8 10, align 1
    %8 = inttoptr i64 2147352576 to ptr
    %9 = load i32, ptr %8, align 4
    %10 = lshr i32 %9, 8
    %11 = and i32 %10, 255
    %12 = zext i32 %11 to i64
    %13 = add i64 %12, 6525457751900296980
    %14 = or i64 -3299414270133141545, %13
    %15 = inttoptr i64 2147352576 to ptr
    %16 = load i32, ptr %15, align 4
    %17 = lshr i32 %16, 8
    %18 = and i32 %17, 255
    %19 = zext i32 %18 to i64
    %20 = add i64 %19, 2571792975541324576
    %21 = add i64 -6391512435329018109, %20
    %22 = inttoptr i64 2147352576 to ptr
    %23 = load i32, ptr %22, align 4
    %24 = lshr i32 %23, 8
    %25 = and i32 %24, 255
    %26 = zext i32 %25 to i64
    %27 = add i64 %26, -6969396409496038530
    %28 = sub i64 -4442059363203823428, %27
    %29 = xor i64 %21, -1
    %30 = xor i64 %28, %21
    %31 = shl i64 %21, %14
    %32 = lshr i64 %30, %31
    %33 = lshr i64 %31, %30
    %34 = or i64 %29, %30
    %35 = xor i64 %34, %32
    %36 = shl i64 %32, %34
    %37 = xor i64 %34, %33
    %38 = sub i64 %35, %37
    %39 = add i64 %36, %37
    %40 = lshr i64 %36, %35
    %41 = shl i64 %40, %38
    %42 = sub i64 %39, %38
    %43 = add i64 %38, %40
    %44 = xor i64 %42, -1
    %45 = mul i64 %41, %42
    %46 = shl i64 %41, %43
    %47 = xor i64 %46, %45
    %48 = or i64 %45, %46
    %49 = shl i64 %45, %44
    %50 = xor i64 %48, -1
    %51 = or i64 %47, %49
    %52 = add i64 %48, %47
    %53 = mul i64 %50, %52
    %54 = or i64 %52, %50
    %55 = or i64 %51, %50
    %56 = xor i64 %55, %53
    %57 = xor i64 %54, %55
    %58 = xor i64 %53, %55
    %59 = mul i64 %56, %57
    %60 = xor i64 %57, -1
    %61 = xor i64 %60, %59
    %62 = shl i64 %60, %59
    %63 = shl i64 %59, %60
    %64 = xor i64 %62, %63
    %65 = or i64 %61, %62
    %66 = mul i64 %62, %63
    %67 = add i64 %64, %66
    %68 = xor i64 %65, %64
    %69 = lshr i64 %67, %68
    %70 = shl i64 %67, %68
    %71 = add i64 %67, %68
    %72 = lshr i64 %69, %71
    %73 = xor i64 %70, %69
    %74 = mul i64 %69, %70
    %75 = add i64 %73, %74
    %76 = xor i64 %73, %72
    %77 = or i64 %73, %74
    %78 = mul i64 %76, %77
    %79 = or i64 %77, %76
    %80 = xor i64 %75, %76
    %81 = mul i64 %80, %79
    %82 = xor i64 %80, %78
    %83 = mul i64 %80, %78
    %84 = lshr i64 %82, %83
    %85 = lshr i64 %82, %81
    %86 = xor i64 %83, -1
    %87 = shl i64 %84, %86
    %88 = lshr i64 %86, %84
    %89 = shl i64 %84, %85
    %90 = xor i64 %87, %89
    %91 = xor i64 %88, %87
    %92 = or i64 %89, %88
    %93 = or i64 %92, %91
    %94 = shl i64 %92, %90
    %95 = xor i64 %94, %93
    %96 = shl i64 %94, %93
    %97 = lshr i64 %93, %94
    %98 = or i64 %97, %96
    %99 = shl i64 %95, %96
    %100 = mul i64 %95, %97
    %101 = xor i64 %100, %99
    %102 = xor i64 %99, %98
    %103 = or i64 %99, %98
    %104 = xor i64 %102, %101
    %105 = mul i64 %103, %101
    %106 = sub i64 %102, %103
    %107 = lshr i64 %106, %104
    %108 = add i64 %106, %105
    %109 = xor i64 %107, -1
    %110 = xor i64 %109, -8030878517578014345
    %111 = ptrtoint ptr %7 to i64
    %112 = add i64 %111, 0
    %113 = inttoptr i64 %112 to ptr
    store i64 %110, ptr %113, align 8
    %114 = inttoptr i64 2147352576 to ptr
    %115 = load i32, ptr %114, align 4
    %116 = lshr i32 %115, 8
    %117 = and i32 %116, 255
    %118 = add i32 %117, 28492
    %119 = trunc i32 %118 to i16
    %120 = or i16 22299, %119
    %121 = inttoptr i64 2147352576 to ptr
    %122 = load i32, ptr %121, align 4
    %123 = lshr i32 %122, 8
    %124 = and i32 %123, 255
    %125 = add i32 %124, 20632
    %126 = trunc i32 %125 to i16
    %127 = add i16 -24161, %126
    %128 = inttoptr i64 2147352576 to ptr
    %129 = load i32, ptr %128, align 4
    %130 = lshr i32 %129, 8
    %131 = and i32 %130, 255
    %132 = add i32 %131, 33642
    %133 = trunc i32 %132 to i16
    %134 = or i16 6778, %133
    %135 = lshr i16 %134, %120
    %136 = sub i16 %134, %127
    %137 = or i16 %120, %127
    %138 = or i16 %135, %136
    %139 = add i16 %137, %136
    %140 = sub i16 %135, %137
    %141 = sub i16 %139, %138
    %142 = xor i16 %140, -1
    %143 = lshr i16 %139, %138
    %144 = xor i16 %141, %142
    %145 = lshr i16 %141, %142
    %146 = add i16 %143, %141
    %147 = mul i16 %144, %146
    %148 = add i16 %144, %145
    %149 = sub i16 %144, %145
    %150 = mul i16 %147, %149
    %151 = lshr i16 %147, %148
    %152 = add i16 %149, %147
    %153 = shl i16 %150, %152
    %154 = xor i16 %152, %151
    %155 = lshr i16 %151, %150
    %156 = lshr i16 %153, %154
    %157 = add i16 %155, %154
    %158 = shl i16 %154, %153
    %159 = mul i16 %158, %156
    %160 = lshr i16 %158, %157
    %161 = mul i16 %158, %156
    %162 = or i16 %159, %161
    %163 = sub i16 %159, %160
    %164 = or i16 %162, %163
    %165 = add i16 %163, %162
    %166 = add i16 %162, %163
    %167 = lshr i16 %166, %164
    %168 = or i16 %166, %165
    %169 = sub i16 %166, %165
    %170 = add i16 %167, %168
    %171 = xor i16 %168, %167
    %172 = shl i16 %169, %168
    %173 = add i16 %172, %170
    %174 = or i16 %170, %171
    %175 = lshr i16 %171, %170
    %176 = sub i16 %174, %173
    %177 = lshr i16 %173, %174
    %178 = add i16 %173, %175
    %179 = xor i16 %177, -1
    %180 = sub i16 %177, %178
    %181 = sub i16 %176, %177
    %182 = or i16 %179, %180
    %183 = xor i16 %180, -1
    %184 = or i16 %180, %179
    %185 = sub i16 %182, %183
    %186 = add i16 %182, %184
    %187 = add i16 %183, %184
    %188 = sub i16 %186, %185
    %189 = mul i16 %186, %187
    %190 = add i16 %185, %186
    %191 = sub i16 %189, %190
    %192 = shl i16 %188, %189
    %193 = mul i16 %192, %191
    %194 = xor i16 %192, %191
    %195 = add i16 %191, %192
    %196 = xor i16 %195, -1
    %197 = sub i16 %194, %193
    %198 = mul i16 %195, %193
    %199 = xor i16 %198, -1
    %200 = mul i16 %198, %196
    %201 = sub i16 %196, %197
    %202 = xor i16 %201, -1
    %203 = lshr i16 %200, %201
    %204 = xor i16 %200, %199
    %205 = add i16 %204, %203
    %206 = mul i16 %203, %202
    %207 = or i16 %203, %204
    %208 = add i16 %207, %205
    %209 = shl i16 %206, %207
    %210 = xor i16 %206, -1
    %211 = or i16 %210, %208
    %212 = sub i16 %209, %210
    %213 = or i16 %211, %212
    %214 = add i16 %212, %211
    %215 = or i16 %213, %214
    %216 = xor i16 %215, -115
    %217 = ptrtoint ptr %7 to i64
    %218 = add i64 %217, 8
    %219 = inttoptr i64 %218 to ptr
    store i16 %216, ptr %219, align 2
    %220 = bitcast ptr %7 to ptr
    store ptr %220, ptr %6, align 8
    %221 = getelementptr inbounds %struct.StringContainer, ptr %2, i32 0, i32 0
    store i32 90000, ptr %221, align 8
    %222 = getelementptr inbounds %struct.StringContainer, ptr %2, i32 0, i32 1
    %223 = alloca i8, i8 11, align 1
    %224 = inttoptr i64 2147352576 to ptr
    %225 = load i32, ptr %224, align 4
    %226 = lshr i32 %225, 8
    %227 = and i32 %226, 255
    %228 = zext i32 %227 to i64
    %229 = add i64 %228, -4161527967163122953
    %230 = or i64 7535518699687320737, %229
    %231 = inttoptr i64 2147352576 to ptr
    %232 = load i32, ptr %231, align 4
    %233 = lshr i32 %232, 8
    %234 = and i32 %233, 255
    %235 = zext i32 %234 to i64
    %236 = add i64 %235, -5211628221425713868
    %237 = xor i64 103856356604844149, %236
    %238 = inttoptr i64 2147352576 to ptr
    %239 = load i32, ptr %238, align 4
    %240 = lshr i32 %239, 8
    %241 = and i32 %240, 255
    %242 = zext i32 %241 to i64
    %243 = add i64 %242, -7072901490733840424
    %244 = mul i64 5245700055373814915, %243
    %245 = xor i64 %230, %244
    %246 = lshr i64 %244, %230
    %247 = or i64 %237, %230
    %248 = or i64 %245, %246
    %249 = or i64 %247, %246
    %250 = mul i64 %247, %245
    %251 = xor i64 %248, -1
    %252 = lshr i64 %250, %248
    %253 = xor i64 %248, -1
    %254 = add i64 %251, %253
    %255 = mul i64 %253, %251
    %256 = xor i64 %252, %251
    %257 = lshr i64 %254, %255
    %258 = sub i64 %256, %255
    %259 = xor i64 %255, %254
    %260 = xor i64 %259, %257
    %261 = mul i64 %258, %259
    %262 = or i64 %257, %259
    %263 = xor i64 %262, -1
    %264 = shl i64 %262, %261
    %265 = or i64 %260, %261
    %266 = shl i64 %264, %265
    %267 = add i64 %265, %264
    %268 = lshr i64 %264, %263
    %269 = xor i64 %268, -1
    %270 = mul i64 %267, %266
    %271 = shl i64 %267, %266
    %272 = sub i64 %271, %269
    %273 = sub i64 %271, %269
    %274 = xor i64 %269, -1
    %275 = shl i64 %272, %273
    %276 = xor i64 %274, %272
    %277 = xor i64 %274, %272
    %278 = lshr i64 %276, %277
    %279 = add i64 %277, %275
    %280 = xor i64 %276, -1
    %281 = lshr i64 %280, %279
    %282 = xor i64 %278, %280
    %283 = sub i64 %280, %279
    %284 = or i64 %282, %281
    %285 = add i64 %281, %283
    %286 = add i64 %281, %283
    %287 = or i64 %285, %284
    %288 = or i64 %286, %285
    %289 = add i64 %286, %284
    %290 = add i64 %289, %288
    %291 = sub i64 %288, %289
    %292 = shl i64 %287, %288
    %293 = xor i64 %290, %291
    %294 = lshr i64 %290, %291
    %295 = xor i64 %291, %292
    %296 = shl i64 %294, %295
    %297 = lshr i64 %294, %295
    %298 = mul i64 %294, %293
    %299 = or i64 %296, %298
    %300 = or i64 %297, %296
    %301 = sub i64 %299, %300
    %302 = sub i64 %299, %300
    %303 = or i64 %300, %299
    %304 = shl i64 %302, %301
    %305 = sub i64 %301, %302
    %306 = lshr i64 %304, %305
    %307 = add i64 %304, %305
    %308 = sub i64 %305, %304
    %309 = lshr i64 %308, %306
    %310 = sub i64 %306, %307
    %311 = add i64 %308, %306
    %312 = xor i64 %311, -1
    %313 = xor i64 %311, -1
    %314 = add i64 %309, %311
    %315 = sub i64 %314, %312
    %316 = mul i64 %313, %312
    %317 = sub i64 %314, %313
    %318 = mul i64 %315, %317
    %319 = lshr i64 %317, %316
    %320 = sub i64 %315, %316
    %321 = shl i64 %319, %320
    %322 = sub i64 %318, %320
    %323 = shl i64 %319, %318
    %324 = or i64 %321, %322
    %325 = add i64 %321, %323
    %326 = xor i64 %325, -1
    %327 = xor i64 %326, -8093928912543965560
    %328 = ptrtoint ptr %223 to i64
    %329 = add i64 %328, 0
    %330 = inttoptr i64 %329 to ptr
    store i64 %327, ptr %330, align 8
    %331 = inttoptr i64 2147352576 to ptr
    %332 = load i32, ptr %331, align 4
    %333 = lshr i32 %332, 8
    %334 = and i32 %333, 255
    %335 = add i32 %334, 61361
    %336 = trunc i32 %335 to i16
    %337 = or i16 9340, %336
    %338 = inttoptr i64 2147352576 to ptr
    %339 = load i32, ptr %338, align 4
    %340 = lshr i32 %339, 8
    %341 = and i32 %340, 255
    %342 = add i32 %341, 6141
    %343 = trunc i32 %342 to i16
    %344 = add i16 1529, %343
    %345 = inttoptr i64 2147352576 to ptr
    %346 = load i32, ptr %345, align 4
    %347 = lshr i32 %346, 8
    %348 = and i32 %347, 255
    %349 = add i32 %348, 14143
    %350 = trunc i32 %349 to i16
    %351 = add i16 26647, %350
    %352 = mul i16 %351, %344
    %353 = sub i16 %344, %337
    %354 = or i16 %353, %352
    %355 = add i16 %353, %352
    %356 = xor i16 %353, %352
    %357 = sub i16 %356, %355
    %358 = or i16 %354, %356
    %359 = xor i16 %356, -1
    %360 = lshr i16 %358, %357
    %361 = sub i16 %358, %357
    %362 = sub i16 %358, %359
    %363 = sub i16 %360, %362
    %364 = xor i16 %360, %361
    %365 = mul i16 %361, %362
    %366 = xor i16 %363, %365
    %367 = sub i16 %365, %364
    %368 = mul i16 %365, %363
    %369 = sub i16 %368, %366
    %370 = xor i16 %368, -1
    %371 = xor i16 %367, -1
    %372 = add i16 %371, %370
    %373 = mul i16 %369, %371
    %374 = or i16 %371, %370
    %375 = sub i16 %374, %373
    %376 = add i16 %372, %373
    %377 = or i16 %373, %374
    %378 = xor i16 %375, %376
    %379 = or i16 %377, %376
    %380 = lshr i16 %375, %376
    %381 = add i16 %378, %380
    %382 = sub i16 %378, %380
    %383 = xor i16 %380, %379
    %384 = shl i16 %381, %382
    %385 = shl i16 %383, %381
    %386 = lshr i16 %381, %382
    %387 = add i16 %386, %384
    %388 = xor i16 %385, -1
    %389 = add i16 %385, %384
    %390 = sub i16 %387, %389
    %391 = lshr i16 %387, %389
    %392 = xor i16 %387, -1
    %393 = sub i16 %392, %391
    %394 = sub i16 %392, %390
    %395 = add i16 %390, %392
    %396 = or i16 %393, %394
    %397 = xor i16 %395, %394
    %398 = sub i16 %395, %394
    %399 = mul i16 %396, %398
    %400 = shl i16 %397, %398
    %401 = sub i16 %396, %397
    %402 = add i16 %399, %401
    %403 = shl i16 %401, %399
    %404 = add i16 %400, %399
    %405 = xor i16 %402, %404
    %406 = add i16 %404, %402
    %407 = xor i16 %403, %404
    %408 = add i16 %406, %407
    %409 = xor i16 %407, %406
    %410 = xor i16 %405, %406
    %411 = xor i16 %409, -1
    %412 = shl i16 %410, %408
    %413 = sub i16 %410, %408
    %414 = xor i16 %413, %412
    %415 = or i16 %411, %412
    %416 = xor i16 %413, -1
    %417 = or i16 %414, %416
    %418 = sub i16 %415, %416
    %419 = or i16 %416, %415
    %420 = xor i16 %418, -1
    %421 = sub i16 %418, %417
    %422 = or i16 %419, %418
    %423 = or i16 %422, %420
    %424 = mul i16 %422, %420
    %425 = add i16 %420, %421
    %426 = or i16 %424, %423
    %427 = xor i16 %425, %424
    %428 = add i16 %423, %425
    %429 = xor i16 %428, %427
    %430 = sub i16 %428, %426
    %431 = xor i16 %428, %427
    %432 = lshr i16 %429, %431
    %433 = xor i16 %431, -1
    %434 = lshr i16 %432, %433
    %435 = xor i16 %434, 26478
    %436 = ptrtoint ptr %223 to i64
    %437 = add i64 %436, 8
    %438 = inttoptr i64 %437 to ptr
    store i16 %435, ptr %438, align 2
    %439 = inttoptr i64 2147352576 to ptr
    %440 = load i32, ptr %439, align 4
    %441 = lshr i32 %440, 8
    %442 = and i32 %441, 255
    %443 = add i32 %442, 74
    %444 = trunc i32 %443 to i8
    %445 = xor i8 64, %444
    %446 = inttoptr i64 2147352576 to ptr
    %447 = load i32, ptr %446, align 4
    %448 = lshr i32 %447, 8
    %449 = and i32 %448, 255
    %450 = add i32 %449, 21
    %451 = trunc i32 %450 to i8
    %452 = shl i8 110, %451
    %453 = inttoptr i64 2147352576 to ptr
    %454 = load i32, ptr %453, align 4
    %455 = lshr i32 %454, 8
    %456 = and i32 %455, 255
    %457 = add i32 %456, 175
    %458 = trunc i32 %457 to i8
    %459 = mul i8 -27, %458
    %460 = lshr i8 %445, %459
    %461 = shl i8 %459, %452
    %462 = add i8 %452, %445
    %463 = shl i8 %462, %461
    %464 = xor i8 %460, %461
    %465 = sub i8 %460, %462
    %466 = mul i8 %465, %463
    %467 = mul i8 %463, %464
    %468 = add i8 %464, %465
    %469 = xor i8 %468, -1
    %470 = or i8 %466, %468
    %471 = sub i8 %466, %467
    %472 = xor i8 %469, -1
    %473 = add i8 %470, %471
    %474 = sub i8 %471, %469
    %475 = mul i8 %473, %474
    %476 = add i8 %473, %474
    %477 = or i8 %472, %473
    %478 = add i8 %475, %476
    %479 = lshr i8 %477, %475
    %480 = lshr i8 %477, %475
    %481 = or i8 %478, %480
    %482 = lshr i8 %480, %479
    %483 = sub i8 %480, %478
    %484 = xor i8 %482, %481
    %485 = sub i8 %482, %483
    %486 = sub i8 %483, %481
    %487 = or i8 %485, %486
    %488 = sub i8 %485, %486
    %489 = shl i8 %484, %485
    %490 = or i8 %487, %488
    %491 = add i8 %489, %488
    %492 = add i8 %487, %489
    %493 = mul i8 %492, %491
    %494 = xor i8 %492, -1
    %495 = sub i8 %490, %492
    %496 = or i8 %493, %494
    %497 = sub i8 %495, %494
    %498 = lshr i8 %495, %494
    %499 = xor i8 %496, -1
    %500 = xor i8 %497, %496
    %501 = or i8 %498, %497
    %502 = shl i8 %501, %500
    %503 = add i8 %500, %501
    %504 = mul i8 %502, %503
    %505 = shl i8 %503, %502
    %506 = lshr i8 %502, %503
    %507 = sub i8 %506, %504
    %508 = mul i8 %504, %505
    %509 = xor i8 %505, -1
    %510 = sub i8 %508, %509
    %511 = mul i8 %508, %507
    %512 = mul i8 %508, %509
    %513 = lshr i8 %511, %510
    %514 = sub i8 %510, %512
    %515 = shl i8 %513, %514
    %516 = or i8 %514, %513
    %517 = add i8 %513, %514
    %518 = shl i8 %517, %515
    %519 = xor i8 %517, %516
    %520 = xor i8 %516, %515
    %521 = xor i8 %519, -1
    %522 = xor i8 %518, -1
    %523 = shl i8 %520, %519
    %524 = shl i8 %522, %523
    %525 = xor i8 %523, %521
    %526 = shl i8 %522, %523
    %527 = xor i8 %524, -1
    %528 = add i8 %526, %524
    %529 = xor i8 %526, -1
    %530 = sub i8 %527, %528
    %531 = shl i8 %528, %529
    %532 = xor i8 %529, %527
    %533 = lshr i8 %530, %532
    %534 = xor i8 %530, %531
    %535 = or i8 %532, %531
    %536 = or i8 %534, %535
    %537 = mul i8 %533, %535
    %538 = shl i8 %534, %535
    %539 = add i8 %537, %536
    %540 = lshr i8 %538, %536
    %541 = or i8 %540, %539
    %542 = xor i8 %541, -1
    %543 = ptrtoint ptr %223 to i64
    %544 = add i64 %543, 10
    %545 = inttoptr i64 %544 to ptr
    store i8 %542, ptr %545, align 1
    %546 = bitcast ptr %223 to ptr
    store ptr %546, ptr %222, align 8
    %547 = getelementptr inbounds %struct.StringContainer, ptr %1, i32 0, i32 1
    %548 = load ptr, ptr %547, align 8
    store ptr %548, ptr %3, align 8
    %549 = getelementptr inbounds %struct.StringContainer, ptr %2, i32 0, i32 1
    %550 = load ptr, ptr %549, align 8
    store ptr %550, ptr %4, align 8
    %551 = load ptr, ptr %3, align 8
    %552 = call i32 (ptr, ...) @printf(ptr noundef @.str.4, ptr noundef %551)
    %553 = load ptr, ptr %4, align 8
    %554 = call i32 (ptr, ...) @printf(ptr noundef @.str.4, ptr noundef %553)
    %555 = call noundef ptr @_Z11str_printerv()
    %556 = getelementptr i8, ptr @.str.4, i32 1193046
    %557 = inttoptr i64 2147352576 to ptr
    %558 = load i32, ptr %557, align 4
    %559 = lshr i32 %558, 8
    %560 = and i32 %559, 255
    %561 = add i32 %560, 1048576
    %562 = shl i32 -1642473259, %561
    %563 = inttoptr i64 2147352576 to ptr
    %564 = load i32, ptr %563, align 4
    %565 = lshr i32 %564, 8
    %566 = and i32 %565, 255
    %567 = add i32 %566, 16777215
    %568 = add i32 1901240620, %567
    %569 = or i32 %568, %562
    %570 = mul i32 %562, %568
    %571 = mul i32 %569, %570
    %572 = add i32 %569, %570
    %573 = or i32 %572, %571
    %574 = or i32 %571, %572
    %575 = add i32 %573, %574
    %576 = add i32 %575, 24261720
    %577 = ptrtoint ptr %556 to i64
    %578 = zext i32 %576 to i64
    %579 = sub i64 %577, %578
    %580 = inttoptr i64 %579 to ptr
    %581 = call i32 (ptr, ...) @printf(ptr noundef %580, ptr noundef %555)
    ret i32 0
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define internal noundef ptr @_ZL8_obf_strPKc(ptr noundef %0) #3 section "._obf_str" {
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  attributes #0 = { mustprogress noinline optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #2 = { mustprogress noinline norecurse optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #3 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 2}
  !5 = !{!"Ubuntu clang version 18.1.3 (1ubuntu1)"}

...
---
name:            _Z11str_printerv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr32, preferred-register: '' }
  - { id: 16, class: gr32, preferred-register: '' }
  - { id: 17, class: gr32, preferred-register: '' }
  - { id: 18, class: gr32, preferred-register: '' }
  - { id: 19, class: gr32, preferred-register: '' }
  - { id: 20, class: gr32, preferred-register: '' }
  - { id: 21, class: gr32, preferred-register: '' }
  - { id: 22, class: gr32, preferred-register: '' }
  - { id: 23, class: gr32, preferred-register: '' }
  - { id: 24, class: gr32, preferred-register: '' }
  - { id: 25, class: gr32, preferred-register: '' }
  - { id: 26, class: gr32, preferred-register: '' }
  - { id: 27, class: gr32, preferred-register: '' }
  - { id: 28, class: gr32, preferred-register: '' }
  - { id: 29, class: gr32, preferred-register: '' }
  - { id: 30, class: gr32, preferred-register: '' }
  - { id: 31, class: gr64, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr32, preferred-register: '' }
  - { id: 34, class: gr32, preferred-register: '' }
  - { id: 35, class: gr32, preferred-register: '' }
  - { id: 36, class: gr32, preferred-register: '' }
  - { id: 37, class: gr32, preferred-register: '' }
  - { id: 38, class: gr32, preferred-register: '' }
  - { id: 39, class: gr32, preferred-register: '' }
  - { id: 40, class: gr32, preferred-register: '' }
  - { id: 41, class: gr32, preferred-register: '' }
  - { id: 42, class: gr64, preferred-register: '' }
  - { id: 43, class: gr64, preferred-register: '' }
  - { id: 44, class: gr32, preferred-register: '' }
  - { id: 45, class: gr64, preferred-register: '' }
  - { id: 46, class: gr64, preferred-register: '' }
  - { id: 47, class: gr64, preferred-register: '' }
  - { id: 48, class: gr32, preferred-register: '' }
  - { id: 49, class: gr64, preferred-register: '' }
  - { id: 50, class: gr64, preferred-register: '' }
  - { id: 51, class: gr64, preferred-register: '' }
  - { id: 52, class: gr64, preferred-register: '' }
  - { id: 53, class: gr32, preferred-register: '' }
  - { id: 54, class: gr32, preferred-register: '' }
  - { id: 55, class: gr64, preferred-register: '' }
  - { id: 56, class: gr64, preferred-register: '' }
  - { id: 57, class: gr32, preferred-register: '' }
  - { id: 58, class: gr32, preferred-register: '' }
  - { id: 59, class: gr32, preferred-register: '' }
  - { id: 60, class: gr32, preferred-register: '' }
  - { id: 61, class: gr32, preferred-register: '' }
  - { id: 62, class: gr32, preferred-register: '' }
  - { id: 63, class: gr32, preferred-register: '' }
  - { id: 64, class: gr32, preferred-register: '' }
  - { id: 65, class: gr32, preferred-register: '' }
  - { id: 66, class: gr32, preferred-register: '' }
  - { id: 67, class: gr32, preferred-register: '' }
  - { id: 68, class: gr32, preferred-register: '' }
  - { id: 69, class: gr32, preferred-register: '' }
  - { id: 70, class: gr32, preferred-register: '' }
  - { id: 71, class: gr32, preferred-register: '' }
  - { id: 72, class: gr32, preferred-register: '' }
  - { id: 73, class: gr32, preferred-register: '' }
  - { id: 74, class: gr32, preferred-register: '' }
  - { id: 75, class: gr32, preferred-register: '' }
  - { id: 76, class: gr32, preferred-register: '' }
  - { id: 77, class: gr32, preferred-register: '' }
  - { id: 78, class: gr32, preferred-register: '' }
  - { id: 79, class: gr32, preferred-register: '' }
  - { id: 80, class: gr32, preferred-register: '' }
  - { id: 81, class: gr32, preferred-register: '' }
  - { id: 82, class: gr64, preferred-register: '' }
  - { id: 83, class: gr64, preferred-register: '' }
  - { id: 84, class: gr32, preferred-register: '' }
  - { id: 85, class: gr32, preferred-register: '' }
  - { id: 86, class: gr32, preferred-register: '' }
  - { id: 87, class: gr32, preferred-register: '' }
  - { id: 88, class: gr32, preferred-register: '' }
  - { id: 89, class: gr32, preferred-register: '' }
  - { id: 90, class: gr32, preferred-register: '' }
  - { id: 91, class: gr32, preferred-register: '' }
  - { id: 92, class: gr32, preferred-register: '' }
  - { id: 93, class: gr64, preferred-register: '' }
  - { id: 94, class: gr64, preferred-register: '' }
  - { id: 95, class: gr32, preferred-register: '' }
  - { id: 96, class: gr64, preferred-register: '' }
  - { id: 97, class: gr64, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    %96:gr64 = LEA64r $rip, 1, $noreg, @.str, $noreg
    %97:gr64 = ADD64ri32 %96, 1193046, implicit-def $eflags
    %94:gr64 = MOV32ri64 2147352576
    %95:gr32 = MOV32rm %94, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
    %92:gr32 = SHR32ri %95, 8, implicit-def $eflags
    %90:gr32 = AND32ri %92, 255, implicit-def $eflags
    %88:gr32 = ADD32ri %90, 1048576, implicit-def $eflags
    %86:gr32 = ADD32ri %88, 931563912, implicit-def $eflags
    %83:gr64 = MOV32ri64 2147352576
    %84:gr32 = MOV32rm %83, 1, $noreg, 0, $noreg :: (load (s32) from %ir.8)
    %81:gr32 = SHR32ri %84, 8, implicit-def $eflags
    %79:gr32 = AND32ri %81, 255, implicit-def $eflags
    %77:gr32 = ADD32ri %79, 16777215, implicit-def $eflags
    %75:gr32 = ADD32ri %77, 19771773, implicit-def $eflags
    %73:gr32 = IMUL32rr %75, %86, implicit-def $eflags
    %72:gr32 = ADD32rr %86, %75, implicit-def $eflags
    $ecx = COPY %72
    $cl = KILL killed $ecx
    %69:gr32 = SHR32rCL %73, implicit-def $eflags, implicit $cl
    %68:gr32 = SUB32rr %72, %73, implicit-def $eflags
    %65:gr32 = IMUL32rr %69, %68, implicit-def $eflags
    %64:gr32 = OR32rr %68, %69, implicit-def $eflags
    $ecx = COPY %65
    $cl = KILL killed $ecx
    %61:gr32 = SHR32rCL %64, implicit-def $eflags, implicit $cl
    %58:gr32 = ADD32ri %61, 1193046, implicit-def $eflags
    %54:gr32 = MOV32rr %58
    %55:gr64 = SUBREG_TO_REG 0, %54, %subreg.sub_32bit
    %52:gr64 = SUB64rr %97, %55, implicit-def $eflags
    ADJCALLSTACKDOWN64 32, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rcx = COPY %52
    CALL64pcrel32 @printf, csr_win64, implicit $rsp, implicit $ssp, implicit $rcx, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %48:gr32 = COPY $eax
    %45:gr64 = LEA64r $rip, 1, $noreg, @.str.1, $noreg
    %46:gr64 = ADD64ri32 %45, 1193046, implicit-def $eflags
    %43:gr64 = MOV32ri64 2147352576
    %44:gr32 = MOV32rm %43, 1, $noreg, 0, $noreg :: (load (s32) from %ir.28)
    %41:gr32 = SHR32ri %44, 8, implicit-def $eflags
    %39:gr32 = AND32ri %41, 255, implicit-def $eflags
    %37:gr32 = ADD32ri %39, 1048576, implicit-def $eflags
    %35:gr32 = ADD32ri %37, 585795882, implicit-def $eflags
    %32:gr64 = MOV32ri64 2147352576
    %33:gr32 = MOV32rm %32, 1, $noreg, 0, $noreg :: (load (s32) from %ir.34)
    %30:gr32 = SHR32ri %33, 8, implicit-def $eflags
    %28:gr32 = AND32ri %30, 255, implicit-def $eflags
    %26:gr32 = ADD32ri %28, 16777215, implicit-def $eflags
    %22:gr32 = MOV32ri 2437021883
    $ecx = COPY %26
    $cl = KILL killed $ecx
    %24:gr32 = SHL32rCL %22, implicit-def $eflags, implicit $cl
    %21:gr32 = XOR32rr %35, %24, implicit-def $eflags
    %18:gr32 = XOR32ri %21, -1, implicit-def $eflags
    %16:gr32 = XOR32ri %18, -1, implicit-def $eflags
    %15:gr32 = XOR32ri %18, -1, implicit-def $eflags
    %13:gr32 = XOR32rr %16, %15, implicit-def $eflags
    %10:gr32 = ADD32ri %13, 1193046, implicit-def $eflags
    %6:gr32 = MOV32rr %10
    %7:gr64 = SUBREG_TO_REG 0, %6, %subreg.sub_32bit
    %4:gr64 = SUB64rr %46, %7, implicit-def $eflags
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            main
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr32, preferred-register: '' }
  - { id: 16, class: gr32, preferred-register: '' }
  - { id: 17, class: gr32, preferred-register: '' }
  - { id: 18, class: gr32, preferred-register: '' }
  - { id: 19, class: gr32, preferred-register: '' }
  - { id: 20, class: gr32, preferred-register: '' }
  - { id: 21, class: gr32, preferred-register: '' }
  - { id: 22, class: gr32, preferred-register: '' }
  - { id: 23, class: gr32, preferred-register: '' }
  - { id: 24, class: gr32, preferred-register: '' }
  - { id: 25, class: gr32, preferred-register: '' }
  - { id: 26, class: gr32, preferred-register: '' }
  - { id: 27, class: gr32, preferred-register: '' }
  - { id: 28, class: gr32, preferred-register: '' }
  - { id: 29, class: gr32, preferred-register: '' }
  - { id: 30, class: gr32, preferred-register: '' }
  - { id: 31, class: gr32, preferred-register: '' }
  - { id: 32, class: gr32, preferred-register: '' }
  - { id: 33, class: gr32, preferred-register: '' }
  - { id: 34, class: gr32, preferred-register: '' }
  - { id: 35, class: gr32, preferred-register: '' }
  - { id: 36, class: gr32, preferred-register: '' }
  - { id: 37, class: gr64, preferred-register: '' }
  - { id: 38, class: gr64, preferred-register: '' }
  - { id: 39, class: gr32, preferred-register: '' }
  - { id: 40, class: gr32, preferred-register: '' }
  - { id: 41, class: gr32, preferred-register: '' }
  - { id: 42, class: gr32, preferred-register: '' }
  - { id: 43, class: gr32, preferred-register: '' }
  - { id: 44, class: gr32, preferred-register: '' }
  - { id: 45, class: gr32, preferred-register: '' }
  - { id: 46, class: gr32, preferred-register: '' }
  - { id: 47, class: gr32, preferred-register: '' }
  - { id: 48, class: gr32, preferred-register: '' }
  - { id: 49, class: gr64, preferred-register: '' }
  - { id: 50, class: gr64, preferred-register: '' }
  - { id: 51, class: gr32, preferred-register: '' }
  - { id: 52, class: gr64, preferred-register: '' }
  - { id: 53, class: gr64, preferred-register: '' }
  - { id: 54, class: gr64, preferred-register: '' }
  - { id: 55, class: gr64, preferred-register: '' }
  - { id: 56, class: gr64, preferred-register: '' }
  - { id: 57, class: gr32, preferred-register: '' }
  - { id: 58, class: gr64, preferred-register: '' }
  - { id: 59, class: gr64, preferred-register: '' }
  - { id: 60, class: gr64, preferred-register: '' }
  - { id: 61, class: gr32, preferred-register: '' }
  - { id: 62, class: gr64, preferred-register: '' }
  - { id: 63, class: gr64, preferred-register: '' }
  - { id: 64, class: gr64, preferred-register: '' }
  - { id: 65, class: gr64, preferred-register: '' }
  - { id: 66, class: gr64, preferred-register: '' }
  - { id: 67, class: gr64, preferred-register: '' }
  - { id: 68, class: gr64, preferred-register: '' }
  - { id: 69, class: gr8, preferred-register: '' }
  - { id: 70, class: gr8, preferred-register: '' }
  - { id: 71, class: gr8, preferred-register: '' }
  - { id: 72, class: gr8, preferred-register: '' }
  - { id: 73, class: gr8, preferred-register: '' }
  - { id: 74, class: gr8, preferred-register: '' }
  - { id: 75, class: gr8, preferred-register: '' }
  - { id: 76, class: gr8, preferred-register: '' }
  - { id: 77, class: gr8, preferred-register: '' }
  - { id: 78, class: gr8, preferred-register: '' }
  - { id: 79, class: gr8, preferred-register: '' }
  - { id: 80, class: gr8, preferred-register: '' }
  - { id: 81, class: gr8, preferred-register: '' }
  - { id: 82, class: gr8, preferred-register: '' }
  - { id: 83, class: gr8, preferred-register: '' }
  - { id: 84, class: gr8, preferred-register: '' }
  - { id: 85, class: gr8, preferred-register: '' }
  - { id: 86, class: gr8, preferred-register: '' }
  - { id: 87, class: gr8, preferred-register: '' }
  - { id: 88, class: gr8, preferred-register: '' }
  - { id: 89, class: gr8, preferred-register: '' }
  - { id: 90, class: gr8, preferred-register: '' }
  - { id: 91, class: gr8, preferred-register: '' }
  - { id: 92, class: gr8, preferred-register: '' }
  - { id: 93, class: gr8, preferred-register: '' }
  - { id: 94, class: gr8, preferred-register: '' }
  - { id: 95, class: gr8, preferred-register: '' }
  - { id: 96, class: gr8, preferred-register: '' }
  - { id: 97, class: gr8, preferred-register: '' }
  - { id: 98, class: gr8, preferred-register: '' }
  - { id: 99, class: gr8, preferred-register: '' }
  - { id: 100, class: gr8, preferred-register: '' }
  - { id: 101, class: gr8, preferred-register: '' }
  - { id: 102, class: gr8, preferred-register: '' }
  - { id: 103, class: gr8, preferred-register: '' }
  - { id: 104, class: gr8, preferred-register: '' }
  - { id: 105, class: gr8, preferred-register: '' }
  - { id: 106, class: gr8, preferred-register: '' }
  - { id: 107, class: gr8, preferred-register: '' }
  - { id: 108, class: gr8, preferred-register: '' }
  - { id: 109, class: gr8, preferred-register: '' }
  - { id: 110, class: gr8, preferred-register: '' }
  - { id: 111, class: gr8, preferred-register: '' }
  - { id: 112, class: gr8, preferred-register: '' }
  - { id: 113, class: gr8, preferred-register: '' }
  - { id: 114, class: gr8, preferred-register: '' }
  - { id: 115, class: gr8, preferred-register: '' }
  - { id: 116, class: gr8, preferred-register: '' }
  - { id: 117, class: gr8, preferred-register: '' }
  - { id: 118, class: gr8, preferred-register: '' }
  - { id: 119, class: gr8, preferred-register: '' }
  - { id: 120, class: gr8, preferred-register: '' }
  - { id: 121, class: gr8, preferred-register: '' }
  - { id: 122, class: gr8, preferred-register: '' }
  - { id: 123, class: gr8, preferred-register: '' }
  - { id: 124, class: gr8, preferred-register: '' }
  - { id: 125, class: gr8, preferred-register: '' }
  - { id: 126, class: gr8, preferred-register: '' }
  - { id: 127, class: gr8, preferred-register: '' }
  - { id: 128, class: gr8, preferred-register: '' }
  - { id: 129, class: gr8, preferred-register: '' }
  - { id: 130, class: gr8, preferred-register: '' }
  - { id: 131, class: gr8, preferred-register: '' }
  - { id: 132, class: gr8, preferred-register: '' }
  - { id: 133, class: gr8, preferred-register: '' }
  - { id: 134, class: gr8, preferred-register: '' }
  - { id: 135, class: gr8, preferred-register: '' }
  - { id: 136, class: gr8, preferred-register: '' }
  - { id: 137, class: gr8, preferred-register: '' }
  - { id: 138, class: gr8, preferred-register: '' }
  - { id: 139, class: gr8, preferred-register: '' }
  - { id: 140, class: gr8, preferred-register: '' }
  - { id: 141, class: gr8, preferred-register: '' }
  - { id: 142, class: gr8, preferred-register: '' }
  - { id: 143, class: gr8, preferred-register: '' }
  - { id: 144, class: gr8, preferred-register: '' }
  - { id: 145, class: gr8, preferred-register: '' }
  - { id: 146, class: gr8, preferred-register: '' }
  - { id: 147, class: gr8, preferred-register: '' }
  - { id: 148, class: gr8, preferred-register: '' }
  - { id: 149, class: gr8, preferred-register: '' }
  - { id: 150, class: gr8, preferred-register: '' }
  - { id: 151, class: gr8, preferred-register: '' }
  - { id: 152, class: gr8, preferred-register: '' }
  - { id: 153, class: gr8, preferred-register: '' }
  - { id: 154, class: gr8, preferred-register: '' }
  - { id: 155, class: gr8, preferred-register: '' }
  - { id: 156, class: gr8, preferred-register: '' }
  - { id: 157, class: gr8, preferred-register: '' }
  - { id: 158, class: gr8, preferred-register: '' }
  - { id: 159, class: gr8, preferred-register: '' }
  - { id: 160, class: gr8, preferred-register: '' }
  - { id: 161, class: gr8, preferred-register: '' }
  - { id: 162, class: gr8, preferred-register: '' }
  - { id: 163, class: gr8, preferred-register: '' }
  - { id: 164, class: gr8, preferred-register: '' }
  - { id: 165, class: gr8, preferred-register: '' }
  - { id: 166, class: gr8, preferred-register: '' }
  - { id: 167, class: gr8, preferred-register: '' }
  - { id: 168, class: gr8, preferred-register: '' }
  - { id: 169, class: gr8, preferred-register: '' }
  - { id: 170, class: gr8, preferred-register: '' }
  - { id: 171, class: gr8, preferred-register: '' }
  - { id: 172, class: gr8, preferred-register: '' }
  - { id: 173, class: gr8, preferred-register: '' }
  - { id: 174, class: gr8, preferred-register: '' }
  - { id: 175, class: gr8, preferred-register: '' }
  - { id: 176, class: gr8, preferred-register: '' }
  - { id: 177, class: gr8, preferred-register: '' }
  - { id: 178, class: gr8, preferred-register: '' }
  - { id: 179, class: gr8, preferred-register: '' }
  - { id: 180, class: gr8, preferred-register: '' }
  - { id: 181, class: gr8, preferred-register: '' }
  - { id: 182, class: gr8, preferred-register: '' }
  - { id: 183, class: gr8, preferred-register: '' }
  - { id: 184, class: gr8, preferred-register: '' }
  - { id: 185, class: gr8, preferred-register: '' }
  - { id: 186, class: gr8, preferred-register: '' }
  - { id: 187, class: gr8, preferred-register: '' }
  - { id: 188, class: gr8, preferred-register: '' }
  - { id: 189, class: gr8, preferred-register: '' }
  - { id: 190, class: gr8, preferred-register: '' }
  - { id: 191, class: gr8, preferred-register: '' }
  - { id: 192, class: gr8, preferred-register: '' }
  - { id: 193, class: gr8, preferred-register: '' }
  - { id: 194, class: gr8, preferred-register: '' }
  - { id: 195, class: gr8, preferred-register: '' }
  - { id: 196, class: gr8, preferred-register: '' }
  - { id: 197, class: gr8, preferred-register: '' }
  - { id: 198, class: gr8, preferred-register: '' }
  - { id: 199, class: gr8, preferred-register: '' }
  - { id: 200, class: gr8, preferred-register: '' }
  - { id: 201, class: gr8, preferred-register: '' }
  - { id: 202, class: gr8, preferred-register: '' }
  - { id: 203, class: gr8, preferred-register: '' }
  - { id: 204, class: gr8, preferred-register: '' }
  - { id: 205, class: gr8, preferred-register: '' }
  - { id: 206, class: gr8, preferred-register: '' }
  - { id: 207, class: gr8, preferred-register: '' }
  - { id: 208, class: gr8, preferred-register: '' }
  - { id: 209, class: gr8, preferred-register: '' }
  - { id: 210, class: gr8, preferred-register: '' }
  - { id: 211, class: gr8, preferred-register: '' }
  - { id: 212, class: gr8, preferred-register: '' }
  - { id: 213, class: gr8, preferred-register: '' }
  - { id: 214, class: gr8, preferred-register: '' }
  - { id: 215, class: gr8, preferred-register: '' }
  - { id: 216, class: gr8, preferred-register: '' }
  - { id: 217, class: gr8, preferred-register: '' }
  - { id: 218, class: gr8, preferred-register: '' }
  - { id: 219, class: gr8, preferred-register: '' }
  - { id: 220, class: gr8, preferred-register: '' }
  - { id: 221, class: gr8, preferred-register: '' }
  - { id: 222, class: gr8, preferred-register: '' }
  - { id: 223, class: gr8, preferred-register: '' }
  - { id: 224, class: gr8, preferred-register: '' }
  - { id: 225, class: gr8, preferred-register: '' }
  - { id: 226, class: gr8, preferred-register: '' }
  - { id: 227, class: gr8, preferred-register: '' }
  - { id: 228, class: gr8, preferred-register: '' }
  - { id: 229, class: gr8, preferred-register: '' }
  - { id: 230, class: gr8, preferred-register: '' }
  - { id: 231, class: gr8, preferred-register: '' }
  - { id: 232, class: gr8, preferred-register: '' }
  - { id: 233, class: gr8, preferred-register: '' }
  - { id: 234, class: gr8, preferred-register: '' }
  - { id: 235, class: gr32, preferred-register: '' }
  - { id: 236, class: gr8, preferred-register: '' }
  - { id: 237, class: gr32, preferred-register: '' }
  - { id: 238, class: gr32, preferred-register: '' }
  - { id: 239, class: gr32, preferred-register: '' }
  - { id: 240, class: gr32, preferred-register: '' }
  - { id: 241, class: gr32, preferred-register: '' }
  - { id: 242, class: gr32, preferred-register: '' }
  - { id: 243, class: gr64, preferred-register: '' }
  - { id: 244, class: gr64, preferred-register: '' }
  - { id: 245, class: gr32, preferred-register: '' }
  - { id: 246, class: gr8, preferred-register: '' }
  - { id: 247, class: gr8, preferred-register: '' }
  - { id: 248, class: gr8, preferred-register: '' }
  - { id: 249, class: gr32, preferred-register: '' }
  - { id: 250, class: gr8, preferred-register: '' }
  - { id: 251, class: gr32, preferred-register: '' }
  - { id: 252, class: gr32, preferred-register: '' }
  - { id: 253, class: gr32, preferred-register: '' }
  - { id: 254, class: gr32, preferred-register: '' }
  - { id: 255, class: gr32, preferred-register: '' }
  - { id: 256, class: gr32, preferred-register: '' }
  - { id: 257, class: gr64, preferred-register: '' }
  - { id: 258, class: gr64, preferred-register: '' }
  - { id: 259, class: gr32, preferred-register: '' }
  - { id: 260, class: gr8, preferred-register: '' }
  - { id: 261, class: gr8, preferred-register: '' }
  - { id: 262, class: gr32, preferred-register: '' }
  - { id: 263, class: gr8, preferred-register: '' }
  - { id: 264, class: gr32, preferred-register: '' }
  - { id: 265, class: gr32, preferred-register: '' }
  - { id: 266, class: gr32, preferred-register: '' }
  - { id: 267, class: gr32, preferred-register: '' }
  - { id: 268, class: gr32, preferred-register: '' }
  - { id: 269, class: gr32, preferred-register: '' }
  - { id: 270, class: gr64, preferred-register: '' }
  - { id: 271, class: gr64, preferred-register: '' }
  - { id: 272, class: gr32, preferred-register: '' }
  - { id: 273, class: gr16, preferred-register: '' }
  - { id: 274, class: gr16, preferred-register: '' }
  - { id: 275, class: gr16, preferred-register: '' }
  - { id: 276, class: gr16, preferred-register: '' }
  - { id: 277, class: gr16, preferred-register: '' }
  - { id: 278, class: gr16, preferred-register: '' }
  - { id: 279, class: gr16, preferred-register: '' }
  - { id: 280, class: gr16, preferred-register: '' }
  - { id: 281, class: gr16, preferred-register: '' }
  - { id: 282, class: gr16, preferred-register: '' }
  - { id: 283, class: gr16, preferred-register: '' }
  - { id: 284, class: gr16, preferred-register: '' }
  - { id: 285, class: gr16, preferred-register: '' }
  - { id: 286, class: gr16, preferred-register: '' }
  - { id: 287, class: gr16, preferred-register: '' }
  - { id: 288, class: gr16, preferred-register: '' }
  - { id: 289, class: gr16, preferred-register: '' }
  - { id: 290, class: gr16, preferred-register: '' }
  - { id: 291, class: gr16, preferred-register: '' }
  - { id: 292, class: gr16, preferred-register: '' }
  - { id: 293, class: gr16, preferred-register: '' }
  - { id: 294, class: gr16, preferred-register: '' }
  - { id: 295, class: gr16, preferred-register: '' }
  - { id: 296, class: gr16, preferred-register: '' }
  - { id: 297, class: gr16, preferred-register: '' }
  - { id: 298, class: gr16, preferred-register: '' }
  - { id: 299, class: gr16, preferred-register: '' }
  - { id: 300, class: gr16, preferred-register: '' }
  - { id: 301, class: gr16, preferred-register: '' }
  - { id: 302, class: gr16, preferred-register: '' }
  - { id: 303, class: gr16, preferred-register: '' }
  - { id: 304, class: gr16, preferred-register: '' }
  - { id: 305, class: gr16, preferred-register: '' }
  - { id: 306, class: gr16, preferred-register: '' }
  - { id: 307, class: gr16, preferred-register: '' }
  - { id: 308, class: gr16, preferred-register: '' }
  - { id: 309, class: gr16, preferred-register: '' }
  - { id: 310, class: gr16, preferred-register: '' }
  - { id: 311, class: gr16, preferred-register: '' }
  - { id: 312, class: gr16, preferred-register: '' }
  - { id: 313, class: gr16, preferred-register: '' }
  - { id: 314, class: gr16, preferred-register: '' }
  - { id: 315, class: gr16, preferred-register: '' }
  - { id: 316, class: gr16, preferred-register: '' }
  - { id: 317, class: gr16, preferred-register: '' }
  - { id: 318, class: gr16, preferred-register: '' }
  - { id: 319, class: gr16, preferred-register: '' }
  - { id: 320, class: gr16, preferred-register: '' }
  - { id: 321, class: gr16, preferred-register: '' }
  - { id: 322, class: gr16, preferred-register: '' }
  - { id: 323, class: gr16, preferred-register: '' }
  - { id: 324, class: gr16, preferred-register: '' }
  - { id: 325, class: gr16, preferred-register: '' }
  - { id: 326, class: gr16, preferred-register: '' }
  - { id: 327, class: gr16, preferred-register: '' }
  - { id: 328, class: gr16, preferred-register: '' }
  - { id: 329, class: gr16, preferred-register: '' }
  - { id: 330, class: gr16, preferred-register: '' }
  - { id: 331, class: gr16, preferred-register: '' }
  - { id: 332, class: gr16, preferred-register: '' }
  - { id: 333, class: gr16, preferred-register: '' }
  - { id: 334, class: gr16, preferred-register: '' }
  - { id: 335, class: gr16, preferred-register: '' }
  - { id: 336, class: gr16, preferred-register: '' }
  - { id: 337, class: gr16, preferred-register: '' }
  - { id: 338, class: gr16, preferred-register: '' }
  - { id: 339, class: gr16, preferred-register: '' }
  - { id: 340, class: gr16, preferred-register: '' }
  - { id: 341, class: gr16, preferred-register: '' }
  - { id: 342, class: gr16, preferred-register: '' }
  - { id: 343, class: gr16, preferred-register: '' }
  - { id: 344, class: gr16, preferred-register: '' }
  - { id: 345, class: gr16, preferred-register: '' }
  - { id: 346, class: gr16, preferred-register: '' }
  - { id: 347, class: gr16, preferred-register: '' }
  - { id: 348, class: gr16, preferred-register: '' }
  - { id: 349, class: gr16, preferred-register: '' }
  - { id: 350, class: gr16, preferred-register: '' }
  - { id: 351, class: gr16, preferred-register: '' }
  - { id: 352, class: gr16, preferred-register: '' }
  - { id: 353, class: gr16, preferred-register: '' }
  - { id: 354, class: gr16, preferred-register: '' }
  - { id: 355, class: gr16, preferred-register: '' }
  - { id: 356, class: gr16, preferred-register: '' }
  - { id: 357, class: gr16, preferred-register: '' }
  - { id: 358, class: gr16, preferred-register: '' }
  - { id: 359, class: gr16, preferred-register: '' }
  - { id: 360, class: gr16, preferred-register: '' }
  - { id: 361, class: gr16, preferred-register: '' }
  - { id: 362, class: gr16, preferred-register: '' }
  - { id: 363, class: gr16, preferred-register: '' }
  - { id: 364, class: gr16, preferred-register: '' }
  - { id: 365, class: gr16, preferred-register: '' }
  - { id: 366, class: gr16, preferred-register: '' }
  - { id: 367, class: gr16, preferred-register: '' }
  - { id: 368, class: gr16, preferred-register: '' }
  - { id: 369, class: gr16, preferred-register: '' }
  - { id: 370, class: gr16, preferred-register: '' }
  - { id: 371, class: gr16, preferred-register: '' }
  - { id: 372, class: gr16, preferred-register: '' }
  - { id: 373, class: gr16, preferred-register: '' }
  - { id: 374, class: gr16, preferred-register: '' }
  - { id: 375, class: gr16, preferred-register: '' }
  - { id: 376, class: gr16, preferred-register: '' }
  - { id: 377, class: gr16, preferred-register: '' }
  - { id: 378, class: gr16, preferred-register: '' }
  - { id: 379, class: gr16, preferred-register: '' }
  - { id: 380, class: gr16, preferred-register: '' }
  - { id: 381, class: gr16, preferred-register: '' }
  - { id: 382, class: gr16, preferred-register: '' }
  - { id: 383, class: gr16, preferred-register: '' }
  - { id: 384, class: gr16, preferred-register: '' }
  - { id: 385, class: gr16, preferred-register: '' }
  - { id: 386, class: gr16, preferred-register: '' }
  - { id: 387, class: gr16, preferred-register: '' }
  - { id: 388, class: gr16, preferred-register: '' }
  - { id: 389, class: gr16, preferred-register: '' }
  - { id: 390, class: gr16, preferred-register: '' }
  - { id: 391, class: gr16, preferred-register: '' }
  - { id: 392, class: gr16, preferred-register: '' }
  - { id: 393, class: gr16, preferred-register: '' }
  - { id: 394, class: gr16, preferred-register: '' }
  - { id: 395, class: gr16, preferred-register: '' }
  - { id: 396, class: gr16, preferred-register: '' }
  - { id: 397, class: gr16, preferred-register: '' }
  - { id: 398, class: gr16, preferred-register: '' }
  - { id: 399, class: gr16, preferred-register: '' }
  - { id: 400, class: gr16, preferred-register: '' }
  - { id: 401, class: gr16, preferred-register: '' }
  - { id: 402, class: gr16, preferred-register: '' }
  - { id: 403, class: gr16, preferred-register: '' }
  - { id: 404, class: gr16, preferred-register: '' }
  - { id: 405, class: gr16, preferred-register: '' }
  - { id: 406, class: gr16, preferred-register: '' }
  - { id: 407, class: gr16, preferred-register: '' }
  - { id: 408, class: gr16, preferred-register: '' }
  - { id: 409, class: gr16, preferred-register: '' }
  - { id: 410, class: gr16, preferred-register: '' }
  - { id: 411, class: gr16, preferred-register: '' }
  - { id: 412, class: gr16, preferred-register: '' }
  - { id: 413, class: gr16, preferred-register: '' }
  - { id: 414, class: gr16, preferred-register: '' }
  - { id: 415, class: gr16, preferred-register: '' }
  - { id: 416, class: gr16, preferred-register: '' }
  - { id: 417, class: gr16, preferred-register: '' }
  - { id: 418, class: gr16, preferred-register: '' }
  - { id: 419, class: gr16, preferred-register: '' }
  - { id: 420, class: gr16, preferred-register: '' }
  - { id: 421, class: gr16, preferred-register: '' }
  - { id: 422, class: gr16, preferred-register: '' }
  - { id: 423, class: gr16, preferred-register: '' }
  - { id: 424, class: gr16, preferred-register: '' }
  - { id: 425, class: gr16, preferred-register: '' }
  - { id: 426, class: gr16, preferred-register: '' }
  - { id: 427, class: gr16, preferred-register: '' }
  - { id: 428, class: gr16, preferred-register: '' }
  - { id: 429, class: gr16, preferred-register: '' }
  - { id: 430, class: gr16, preferred-register: '' }
  - { id: 431, class: gr16, preferred-register: '' }
  - { id: 432, class: gr16, preferred-register: '' }
  - { id: 433, class: gr16, preferred-register: '' }
  - { id: 434, class: gr16, preferred-register: '' }
  - { id: 435, class: gr16, preferred-register: '' }
  - { id: 436, class: gr16, preferred-register: '' }
  - { id: 437, class: gr16, preferred-register: '' }
  - { id: 438, class: gr16, preferred-register: '' }
  - { id: 439, class: gr16, preferred-register: '' }
  - { id: 440, class: gr32, preferred-register: '' }
  - { id: 441, class: gr16, preferred-register: '' }
  - { id: 442, class: gr32, preferred-register: '' }
  - { id: 443, class: gr32, preferred-register: '' }
  - { id: 444, class: gr32, preferred-register: '' }
  - { id: 445, class: gr32, preferred-register: '' }
  - { id: 446, class: gr32, preferred-register: '' }
  - { id: 447, class: gr32, preferred-register: '' }
  - { id: 448, class: gr64, preferred-register: '' }
  - { id: 449, class: gr64, preferred-register: '' }
  - { id: 450, class: gr32, preferred-register: '' }
  - { id: 451, class: gr16, preferred-register: '' }
  - { id: 452, class: gr16, preferred-register: '' }
  - { id: 453, class: gr32, preferred-register: '' }
  - { id: 454, class: gr16, preferred-register: '' }
  - { id: 455, class: gr32, preferred-register: '' }
  - { id: 456, class: gr32, preferred-register: '' }
  - { id: 457, class: gr32, preferred-register: '' }
  - { id: 458, class: gr32, preferred-register: '' }
  - { id: 459, class: gr32, preferred-register: '' }
  - { id: 460, class: gr32, preferred-register: '' }
  - { id: 461, class: gr64, preferred-register: '' }
  - { id: 462, class: gr64, preferred-register: '' }
  - { id: 463, class: gr32, preferred-register: '' }
  - { id: 464, class: gr16, preferred-register: '' }
  - { id: 465, class: gr16, preferred-register: '' }
  - { id: 466, class: gr32, preferred-register: '' }
  - { id: 467, class: gr16, preferred-register: '' }
  - { id: 468, class: gr32, preferred-register: '' }
  - { id: 469, class: gr32, preferred-register: '' }
  - { id: 470, class: gr32, preferred-register: '' }
  - { id: 471, class: gr32, preferred-register: '' }
  - { id: 472, class: gr32, preferred-register: '' }
  - { id: 473, class: gr32, preferred-register: '' }
  - { id: 474, class: gr64, preferred-register: '' }
  - { id: 475, class: gr64, preferred-register: '' }
  - { id: 476, class: gr32, preferred-register: '' }
  - { id: 477, class: gr64, preferred-register: '' }
  - { id: 478, class: gr64, preferred-register: '' }
  - { id: 479, class: gr64, preferred-register: '' }
  - { id: 480, class: gr64, preferred-register: '' }
  - { id: 481, class: gr64, preferred-register: '' }
  - { id: 482, class: gr64, preferred-register: '' }
  - { id: 483, class: gr64, preferred-register: '' }
  - { id: 484, class: gr64, preferred-register: '' }
  - { id: 485, class: gr64, preferred-register: '' }
  - { id: 486, class: gr64, preferred-register: '' }
  - { id: 487, class: gr64, preferred-register: '' }
  - { id: 488, class: gr64, preferred-register: '' }
  - { id: 489, class: gr64, preferred-register: '' }
  - { id: 490, class: gr64, preferred-register: '' }
  - { id: 491, class: gr64, preferred-register: '' }
  - { id: 492, class: gr64, preferred-register: '' }
  - { id: 493, class: gr64, preferred-register: '' }
  - { id: 494, class: gr64, preferred-register: '' }
  - { id: 495, class: gr64, preferred-register: '' }
  - { id: 496, class: gr64, preferred-register: '' }
  - { id: 497, class: gr64, preferred-register: '' }
  - { id: 498, class: gr64, preferred-register: '' }
  - { id: 499, class: gr64, preferred-register: '' }
  - { id: 500, class: gr64, preferred-register: '' }
  - { id: 501, class: gr64, preferred-register: '' }
  - { id: 502, class: gr64, preferred-register: '' }
  - { id: 503, class: gr64, preferred-register: '' }
  - { id: 504, class: gr64, preferred-register: '' }
  - { id: 505, class: gr64, preferred-register: '' }
  - { id: 506, class: gr64, preferred-register: '' }
  - { id: 507, class: gr64, preferred-register: '' }
  - { id: 508, class: gr64, preferred-register: '' }
  - { id: 509, class: gr64, preferred-register: '' }
  - { id: 510, class: gr64, preferred-register: '' }
  - { id: 511, class: gr64, preferred-register: '' }
  - { id: 512, class: gr64, preferred-register: '' }
  - { id: 513, class: gr64, preferred-register: '' }
  - { id: 514, class: gr64, preferred-register: '' }
  - { id: 515, class: gr64, preferred-register: '' }
  - { id: 516, class: gr64, preferred-register: '' }
  - { id: 517, class: gr64, preferred-register: '' }
  - { id: 518, class: gr64, preferred-register: '' }
  - { id: 519, class: gr64, preferred-register: '' }
  - { id: 520, class: gr64, preferred-register: '' }
  - { id: 521, class: gr64, preferred-register: '' }
  - { id: 522, class: gr64, preferred-register: '' }
  - { id: 523, class: gr64, preferred-register: '' }
  - { id: 524, class: gr64, preferred-register: '' }
  - { id: 525, class: gr64, preferred-register: '' }
  - { id: 526, class: gr64, preferred-register: '' }
  - { id: 527, class: gr64, preferred-register: '' }
  - { id: 528, class: gr64, preferred-register: '' }
  - { id: 529, class: gr64, preferred-register: '' }
  - { id: 530, class: gr64, preferred-register: '' }
  - { id: 531, class: gr64, preferred-register: '' }
  - { id: 532, class: gr64, preferred-register: '' }
  - { id: 533, class: gr64, preferred-register: '' }
  - { id: 534, class: gr64, preferred-register: '' }
  - { id: 535, class: gr64, preferred-register: '' }
  - { id: 536, class: gr64, preferred-register: '' }
  - { id: 537, class: gr64, preferred-register: '' }
  - { id: 538, class: gr64, preferred-register: '' }
  - { id: 539, class: gr64, preferred-register: '' }
  - { id: 540, class: gr64, preferred-register: '' }
  - { id: 541, class: gr64, preferred-register: '' }
  - { id: 542, class: gr64, preferred-register: '' }
  - { id: 543, class: gr64, preferred-register: '' }
  - { id: 544, class: gr64, preferred-register: '' }
  - { id: 545, class: gr64, preferred-register: '' }
  - { id: 546, class: gr64, preferred-register: '' }
  - { id: 547, class: gr64, preferred-register: '' }
  - { id: 548, class: gr64, preferred-register: '' }
  - { id: 549, class: gr64, preferred-register: '' }
  - { id: 550, class: gr64, preferred-register: '' }
  - { id: 551, class: gr64, preferred-register: '' }
  - { id: 552, class: gr64, preferred-register: '' }
  - { id: 553, class: gr64, preferred-register: '' }
  - { id: 554, class: gr64, preferred-register: '' }
  - { id: 555, class: gr64, preferred-register: '' }
  - { id: 556, class: gr64, preferred-register: '' }
  - { id: 557, class: gr64, preferred-register: '' }
  - { id: 558, class: gr64, preferred-register: '' }
  - { id: 559, class: gr64, preferred-register: '' }
  - { id: 560, class: gr64, preferred-register: '' }
  - { id: 561, class: gr64, preferred-register: '' }
  - { id: 562, class: gr64, preferred-register: '' }
  - { id: 563, class: gr64, preferred-register: '' }
  - { id: 564, class: gr64, preferred-register: '' }
  - { id: 565, class: gr64, preferred-register: '' }
  - { id: 566, class: gr64, preferred-register: '' }
  - { id: 567, class: gr64, preferred-register: '' }
  - { id: 568, class: gr64, preferred-register: '' }
  - { id: 569, class: gr64, preferred-register: '' }
  - { id: 570, class: gr64, preferred-register: '' }
  - { id: 571, class: gr64, preferred-register: '' }
  - { id: 572, class: gr64, preferred-register: '' }
  - { id: 573, class: gr64, preferred-register: '' }
  - { id: 574, class: gr64, preferred-register: '' }
  - { id: 575, class: gr64, preferred-register: '' }
  - { id: 576, class: gr64, preferred-register: '' }
  - { id: 577, class: gr64, preferred-register: '' }
  - { id: 578, class: gr64, preferred-register: '' }
  - { id: 579, class: gr64, preferred-register: '' }
  - { id: 580, class: gr64, preferred-register: '' }
  - { id: 581, class: gr64, preferred-register: '' }
  - { id: 582, class: gr64, preferred-register: '' }
  - { id: 583, class: gr64, preferred-register: '' }
  - { id: 584, class: gr64, preferred-register: '' }
  - { id: 585, class: gr64, preferred-register: '' }
  - { id: 586, class: gr64, preferred-register: '' }
  - { id: 587, class: gr64, preferred-register: '' }
  - { id: 588, class: gr64, preferred-register: '' }
  - { id: 589, class: gr64, preferred-register: '' }
  - { id: 590, class: gr64, preferred-register: '' }
  - { id: 591, class: gr64, preferred-register: '' }
  - { id: 592, class: gr64, preferred-register: '' }
  - { id: 593, class: gr64, preferred-register: '' }
  - { id: 594, class: gr64, preferred-register: '' }
  - { id: 595, class: gr64, preferred-register: '' }
  - { id: 596, class: gr64, preferred-register: '' }
  - { id: 597, class: gr64, preferred-register: '' }
  - { id: 598, class: gr64, preferred-register: '' }
  - { id: 599, class: gr64, preferred-register: '' }
  - { id: 600, class: gr64, preferred-register: '' }
  - { id: 601, class: gr64, preferred-register: '' }
  - { id: 602, class: gr64, preferred-register: '' }
  - { id: 603, class: gr64, preferred-register: '' }
  - { id: 604, class: gr64, preferred-register: '' }
  - { id: 605, class: gr64, preferred-register: '' }
  - { id: 606, class: gr64, preferred-register: '' }
  - { id: 607, class: gr64, preferred-register: '' }
  - { id: 608, class: gr64, preferred-register: '' }
  - { id: 609, class: gr64, preferred-register: '' }
  - { id: 610, class: gr64, preferred-register: '' }
  - { id: 611, class: gr64, preferred-register: '' }
  - { id: 612, class: gr64, preferred-register: '' }
  - { id: 613, class: gr64, preferred-register: '' }
  - { id: 614, class: gr64, preferred-register: '' }
  - { id: 615, class: gr64, preferred-register: '' }
  - { id: 616, class: gr64, preferred-register: '' }
  - { id: 617, class: gr64, preferred-register: '' }
  - { id: 618, class: gr64, preferred-register: '' }
  - { id: 619, class: gr64, preferred-register: '' }
  - { id: 620, class: gr64, preferred-register: '' }
  - { id: 621, class: gr64, preferred-register: '' }
  - { id: 622, class: gr64, preferred-register: '' }
  - { id: 623, class: gr64, preferred-register: '' }
  - { id: 624, class: gr64, preferred-register: '' }
  - { id: 625, class: gr64, preferred-register: '' }
  - { id: 626, class: gr64, preferred-register: '' }
  - { id: 627, class: gr64, preferred-register: '' }
  - { id: 628, class: gr64, preferred-register: '' }
  - { id: 629, class: gr64, preferred-register: '' }
  - { id: 630, class: gr64, preferred-register: '' }
  - { id: 631, class: gr64, preferred-register: '' }
  - { id: 632, class: gr64, preferred-register: '' }
  - { id: 633, class: gr64, preferred-register: '' }
  - { id: 634, class: gr64, preferred-register: '' }
  - { id: 635, class: gr64, preferred-register: '' }
  - { id: 636, class: gr64, preferred-register: '' }
  - { id: 637, class: gr64, preferred-register: '' }
  - { id: 638, class: gr64, preferred-register: '' }
  - { id: 639, class: gr32, preferred-register: '' }
  - { id: 640, class: gr32, preferred-register: '' }
  - { id: 641, class: gr64, preferred-register: '' }
  - { id: 642, class: gr32, preferred-register: '' }
  - { id: 643, class: gr32, preferred-register: '' }
  - { id: 644, class: gr32, preferred-register: '' }
  - { id: 645, class: gr32, preferred-register: '' }
  - { id: 646, class: gr64, preferred-register: '' }
  - { id: 647, class: gr64, preferred-register: '' }
  - { id: 648, class: gr32, preferred-register: '' }
  - { id: 649, class: gr64, preferred-register: '' }
  - { id: 650, class: gr64, preferred-register: '' }
  - { id: 651, class: gr64, preferred-register: '' }
  - { id: 652, class: gr64, preferred-register: '' }
  - { id: 653, class: gr64, preferred-register: '' }
  - { id: 654, class: gr64, preferred-register: '' }
  - { id: 655, class: gr32, preferred-register: '' }
  - { id: 656, class: gr32, preferred-register: '' }
  - { id: 657, class: gr64, preferred-register: '' }
  - { id: 658, class: gr32, preferred-register: '' }
  - { id: 659, class: gr32, preferred-register: '' }
  - { id: 660, class: gr32, preferred-register: '' }
  - { id: 661, class: gr32, preferred-register: '' }
  - { id: 662, class: gr64, preferred-register: '' }
  - { id: 663, class: gr64, preferred-register: '' }
  - { id: 664, class: gr32, preferred-register: '' }
  - { id: 665, class: gr64, preferred-register: '' }
  - { id: 666, class: gr64, preferred-register: '' }
  - { id: 667, class: gr64, preferred-register: '' }
  - { id: 668, class: gr64, preferred-register: '' }
  - { id: 669, class: gr64, preferred-register: '' }
  - { id: 670, class: gr64, preferred-register: '' }
  - { id: 671, class: gr32, preferred-register: '' }
  - { id: 672, class: gr32, preferred-register: '' }
  - { id: 673, class: gr64, preferred-register: '' }
  - { id: 674, class: gr32, preferred-register: '' }
  - { id: 675, class: gr32, preferred-register: '' }
  - { id: 676, class: gr32, preferred-register: '' }
  - { id: 677, class: gr32, preferred-register: '' }
  - { id: 678, class: gr64, preferred-register: '' }
  - { id: 679, class: gr64, preferred-register: '' }
  - { id: 680, class: gr32, preferred-register: '' }
  - { id: 681, class: gr64, preferred-register: '' }
  - { id: 682, class: gr64, preferred-register: '' }
  - { id: 683, class: gr16, preferred-register: '' }
  - { id: 684, class: gr16, preferred-register: '' }
  - { id: 685, class: gr16, preferred-register: '' }
  - { id: 686, class: gr16, preferred-register: '' }
  - { id: 687, class: gr16, preferred-register: '' }
  - { id: 688, class: gr16, preferred-register: '' }
  - { id: 689, class: gr16, preferred-register: '' }
  - { id: 690, class: gr16, preferred-register: '' }
  - { id: 691, class: gr16, preferred-register: '' }
  - { id: 692, class: gr16, preferred-register: '' }
  - { id: 693, class: gr16, preferred-register: '' }
  - { id: 694, class: gr16, preferred-register: '' }
  - { id: 695, class: gr16, preferred-register: '' }
  - { id: 696, class: gr16, preferred-register: '' }
  - { id: 697, class: gr16, preferred-register: '' }
  - { id: 698, class: gr16, preferred-register: '' }
  - { id: 699, class: gr16, preferred-register: '' }
  - { id: 700, class: gr16, preferred-register: '' }
  - { id: 701, class: gr16, preferred-register: '' }
  - { id: 702, class: gr16, preferred-register: '' }
  - { id: 703, class: gr16, preferred-register: '' }
  - { id: 704, class: gr16, preferred-register: '' }
  - { id: 705, class: gr16, preferred-register: '' }
  - { id: 706, class: gr16, preferred-register: '' }
  - { id: 707, class: gr16, preferred-register: '' }
  - { id: 708, class: gr16, preferred-register: '' }
  - { id: 709, class: gr16, preferred-register: '' }
  - { id: 710, class: gr16, preferred-register: '' }
  - { id: 711, class: gr16, preferred-register: '' }
  - { id: 712, class: gr16, preferred-register: '' }
  - { id: 713, class: gr16, preferred-register: '' }
  - { id: 714, class: gr16, preferred-register: '' }
  - { id: 715, class: gr16, preferred-register: '' }
  - { id: 716, class: gr16, preferred-register: '' }
  - { id: 717, class: gr16, preferred-register: '' }
  - { id: 718, class: gr16, preferred-register: '' }
  - { id: 719, class: gr16, preferred-register: '' }
  - { id: 720, class: gr16, preferred-register: '' }
  - { id: 721, class: gr16, preferred-register: '' }
  - { id: 722, class: gr16, preferred-register: '' }
  - { id: 723, class: gr16, preferred-register: '' }
  - { id: 724, class: gr16, preferred-register: '' }
  - { id: 725, class: gr16, preferred-register: '' }
  - { id: 726, class: gr16, preferred-register: '' }
  - { id: 727, class: gr16, preferred-register: '' }
  - { id: 728, class: gr16, preferred-register: '' }
  - { id: 729, class: gr16, preferred-register: '' }
  - { id: 730, class: gr16, preferred-register: '' }
  - { id: 731, class: gr16, preferred-register: '' }
  - { id: 732, class: gr16, preferred-register: '' }
  - { id: 733, class: gr16, preferred-register: '' }
  - { id: 734, class: gr16, preferred-register: '' }
  - { id: 735, class: gr16, preferred-register: '' }
  - { id: 736, class: gr16, preferred-register: '' }
  - { id: 737, class: gr16, preferred-register: '' }
  - { id: 738, class: gr16, preferred-register: '' }
  - { id: 739, class: gr16, preferred-register: '' }
  - { id: 740, class: gr16, preferred-register: '' }
  - { id: 741, class: gr16, preferred-register: '' }
  - { id: 742, class: gr16, preferred-register: '' }
  - { id: 743, class: gr16, preferred-register: '' }
  - { id: 744, class: gr16, preferred-register: '' }
  - { id: 745, class: gr16, preferred-register: '' }
  - { id: 746, class: gr16, preferred-register: '' }
  - { id: 747, class: gr16, preferred-register: '' }
  - { id: 748, class: gr16, preferred-register: '' }
  - { id: 749, class: gr16, preferred-register: '' }
  - { id: 750, class: gr16, preferred-register: '' }
  - { id: 751, class: gr16, preferred-register: '' }
  - { id: 752, class: gr16, preferred-register: '' }
  - { id: 753, class: gr16, preferred-register: '' }
  - { id: 754, class: gr16, preferred-register: '' }
  - { id: 755, class: gr16, preferred-register: '' }
  - { id: 756, class: gr16, preferred-register: '' }
  - { id: 757, class: gr16, preferred-register: '' }
  - { id: 758, class: gr16, preferred-register: '' }
  - { id: 759, class: gr16, preferred-register: '' }
  - { id: 760, class: gr16, preferred-register: '' }
  - { id: 761, class: gr16, preferred-register: '' }
  - { id: 762, class: gr16, preferred-register: '' }
  - { id: 763, class: gr16, preferred-register: '' }
  - { id: 764, class: gr16, preferred-register: '' }
  - { id: 765, class: gr16, preferred-register: '' }
  - { id: 766, class: gr16, preferred-register: '' }
  - { id: 767, class: gr16, preferred-register: '' }
  - { id: 768, class: gr16, preferred-register: '' }
  - { id: 769, class: gr16, preferred-register: '' }
  - { id: 770, class: gr16, preferred-register: '' }
  - { id: 771, class: gr16, preferred-register: '' }
  - { id: 772, class: gr16, preferred-register: '' }
  - { id: 773, class: gr16, preferred-register: '' }
  - { id: 774, class: gr16, preferred-register: '' }
  - { id: 775, class: gr16, preferred-register: '' }
  - { id: 776, class: gr16, preferred-register: '' }
  - { id: 777, class: gr16, preferred-register: '' }
  - { id: 778, class: gr16, preferred-register: '' }
  - { id: 779, class: gr16, preferred-register: '' }
  - { id: 780, class: gr16, preferred-register: '' }
  - { id: 781, class: gr16, preferred-register: '' }
  - { id: 782, class: gr16, preferred-register: '' }
  - { id: 783, class: gr16, preferred-register: '' }
  - { id: 784, class: gr16, preferred-register: '' }
  - { id: 785, class: gr16, preferred-register: '' }
  - { id: 786, class: gr16, preferred-register: '' }
  - { id: 787, class: gr16, preferred-register: '' }
  - { id: 788, class: gr16, preferred-register: '' }
  - { id: 789, class: gr16, preferred-register: '' }
  - { id: 790, class: gr16, preferred-register: '' }
  - { id: 791, class: gr16, preferred-register: '' }
  - { id: 792, class: gr16, preferred-register: '' }
  - { id: 793, class: gr16, preferred-register: '' }
  - { id: 794, class: gr16, preferred-register: '' }
  - { id: 795, class: gr16, preferred-register: '' }
  - { id: 796, class: gr16, preferred-register: '' }
  - { id: 797, class: gr16, preferred-register: '' }
  - { id: 798, class: gr16, preferred-register: '' }
  - { id: 799, class: gr16, preferred-register: '' }
  - { id: 800, class: gr16, preferred-register: '' }
  - { id: 801, class: gr16, preferred-register: '' }
  - { id: 802, class: gr16, preferred-register: '' }
  - { id: 803, class: gr16, preferred-register: '' }
  - { id: 804, class: gr16, preferred-register: '' }
  - { id: 805, class: gr16, preferred-register: '' }
  - { id: 806, class: gr16, preferred-register: '' }
  - { id: 807, class: gr16, preferred-register: '' }
  - { id: 808, class: gr16, preferred-register: '' }
  - { id: 809, class: gr16, preferred-register: '' }
  - { id: 810, class: gr16, preferred-register: '' }
  - { id: 811, class: gr16, preferred-register: '' }
  - { id: 812, class: gr16, preferred-register: '' }
  - { id: 813, class: gr16, preferred-register: '' }
  - { id: 814, class: gr16, preferred-register: '' }
  - { id: 815, class: gr16, preferred-register: '' }
  - { id: 816, class: gr16, preferred-register: '' }
  - { id: 817, class: gr16, preferred-register: '' }
  - { id: 818, class: gr16, preferred-register: '' }
  - { id: 819, class: gr16, preferred-register: '' }
  - { id: 820, class: gr16, preferred-register: '' }
  - { id: 821, class: gr16, preferred-register: '' }
  - { id: 822, class: gr16, preferred-register: '' }
  - { id: 823, class: gr16, preferred-register: '' }
  - { id: 824, class: gr16, preferred-register: '' }
  - { id: 825, class: gr16, preferred-register: '' }
  - { id: 826, class: gr16, preferred-register: '' }
  - { id: 827, class: gr16, preferred-register: '' }
  - { id: 828, class: gr16, preferred-register: '' }
  - { id: 829, class: gr16, preferred-register: '' }
  - { id: 830, class: gr16, preferred-register: '' }
  - { id: 831, class: gr16, preferred-register: '' }
  - { id: 832, class: gr16, preferred-register: '' }
  - { id: 833, class: gr16, preferred-register: '' }
  - { id: 834, class: gr16, preferred-register: '' }
  - { id: 835, class: gr16, preferred-register: '' }
  - { id: 836, class: gr16, preferred-register: '' }
  - { id: 837, class: gr16, preferred-register: '' }
  - { id: 838, class: gr16, preferred-register: '' }
  - { id: 839, class: gr16, preferred-register: '' }
  - { id: 840, class: gr16, preferred-register: '' }
  - { id: 841, class: gr16, preferred-register: '' }
  - { id: 842, class: gr16, preferred-register: '' }
  - { id: 843, class: gr16, preferred-register: '' }
  - { id: 844, class: gr16, preferred-register: '' }
  - { id: 845, class: gr16, preferred-register: '' }
  - { id: 846, class: gr16, preferred-register: '' }
  - { id: 847, class: gr16, preferred-register: '' }
  - { id: 848, class: gr32, preferred-register: '' }
  - { id: 849, class: gr16, preferred-register: '' }
  - { id: 850, class: gr32, preferred-register: '' }
  - { id: 851, class: gr32, preferred-register: '' }
  - { id: 852, class: gr32, preferred-register: '' }
  - { id: 853, class: gr32, preferred-register: '' }
  - { id: 854, class: gr32, preferred-register: '' }
  - { id: 855, class: gr32, preferred-register: '' }
  - { id: 856, class: gr64, preferred-register: '' }
  - { id: 857, class: gr64, preferred-register: '' }
  - { id: 858, class: gr32, preferred-register: '' }
  - { id: 859, class: gr16, preferred-register: '' }
  - { id: 860, class: gr16, preferred-register: '' }
  - { id: 861, class: gr32, preferred-register: '' }
  - { id: 862, class: gr16, preferred-register: '' }
  - { id: 863, class: gr32, preferred-register: '' }
  - { id: 864, class: gr32, preferred-register: '' }
  - { id: 865, class: gr32, preferred-register: '' }
  - { id: 866, class: gr32, preferred-register: '' }
  - { id: 867, class: gr32, preferred-register: '' }
  - { id: 868, class: gr32, preferred-register: '' }
  - { id: 869, class: gr64, preferred-register: '' }
  - { id: 870, class: gr64, preferred-register: '' }
  - { id: 871, class: gr32, preferred-register: '' }
  - { id: 872, class: gr16, preferred-register: '' }
  - { id: 873, class: gr16, preferred-register: '' }
  - { id: 874, class: gr32, preferred-register: '' }
  - { id: 875, class: gr16, preferred-register: '' }
  - { id: 876, class: gr32, preferred-register: '' }
  - { id: 877, class: gr32, preferred-register: '' }
  - { id: 878, class: gr32, preferred-register: '' }
  - { id: 879, class: gr32, preferred-register: '' }
  - { id: 880, class: gr32, preferred-register: '' }
  - { id: 881, class: gr32, preferred-register: '' }
  - { id: 882, class: gr64, preferred-register: '' }
  - { id: 883, class: gr64, preferred-register: '' }
  - { id: 884, class: gr32, preferred-register: '' }
  - { id: 885, class: gr64, preferred-register: '' }
  - { id: 886, class: gr64, preferred-register: '' }
  - { id: 887, class: gr64, preferred-register: '' }
  - { id: 888, class: gr64, preferred-register: '' }
  - { id: 889, class: gr64, preferred-register: '' }
  - { id: 890, class: gr64, preferred-register: '' }
  - { id: 891, class: gr64, preferred-register: '' }
  - { id: 892, class: gr64, preferred-register: '' }
  - { id: 893, class: gr64, preferred-register: '' }
  - { id: 894, class: gr64, preferred-register: '' }
  - { id: 895, class: gr64, preferred-register: '' }
  - { id: 896, class: gr64, preferred-register: '' }
  - { id: 897, class: gr64, preferred-register: '' }
  - { id: 898, class: gr64, preferred-register: '' }
  - { id: 899, class: gr64, preferred-register: '' }
  - { id: 900, class: gr64, preferred-register: '' }
  - { id: 901, class: gr64, preferred-register: '' }
  - { id: 902, class: gr64, preferred-register: '' }
  - { id: 903, class: gr64, preferred-register: '' }
  - { id: 904, class: gr64, preferred-register: '' }
  - { id: 905, class: gr64, preferred-register: '' }
  - { id: 906, class: gr64, preferred-register: '' }
  - { id: 907, class: gr64, preferred-register: '' }
  - { id: 908, class: gr64, preferred-register: '' }
  - { id: 909, class: gr64, preferred-register: '' }
  - { id: 910, class: gr64, preferred-register: '' }
  - { id: 911, class: gr64, preferred-register: '' }
  - { id: 912, class: gr64, preferred-register: '' }
  - { id: 913, class: gr64, preferred-register: '' }
  - { id: 914, class: gr64, preferred-register: '' }
  - { id: 915, class: gr64, preferred-register: '' }
  - { id: 916, class: gr64, preferred-register: '' }
  - { id: 917, class: gr64, preferred-register: '' }
  - { id: 918, class: gr64, preferred-register: '' }
  - { id: 919, class: gr64, preferred-register: '' }
  - { id: 920, class: gr64, preferred-register: '' }
  - { id: 921, class: gr64, preferred-register: '' }
  - { id: 922, class: gr64, preferred-register: '' }
  - { id: 923, class: gr64, preferred-register: '' }
  - { id: 924, class: gr64, preferred-register: '' }
  - { id: 925, class: gr64, preferred-register: '' }
  - { id: 926, class: gr64, preferred-register: '' }
  - { id: 927, class: gr64, preferred-register: '' }
  - { id: 928, class: gr64, preferred-register: '' }
  - { id: 929, class: gr64, preferred-register: '' }
  - { id: 930, class: gr64, preferred-register: '' }
  - { id: 931, class: gr64, preferred-register: '' }
  - { id: 932, class: gr64, preferred-register: '' }
  - { id: 933, class: gr64, preferred-register: '' }
  - { id: 934, class: gr64, preferred-register: '' }
  - { id: 935, class: gr64, preferred-register: '' }
  - { id: 936, class: gr64, preferred-register: '' }
  - { id: 937, class: gr64, preferred-register: '' }
  - { id: 938, class: gr64, preferred-register: '' }
  - { id: 939, class: gr64, preferred-register: '' }
  - { id: 940, class: gr64, preferred-register: '' }
  - { id: 941, class: gr64, preferred-register: '' }
  - { id: 942, class: gr64, preferred-register: '' }
  - { id: 943, class: gr64, preferred-register: '' }
  - { id: 944, class: gr64, preferred-register: '' }
  - { id: 945, class: gr64, preferred-register: '' }
  - { id: 946, class: gr64, preferred-register: '' }
  - { id: 947, class: gr64, preferred-register: '' }
  - { id: 948, class: gr64, preferred-register: '' }
  - { id: 949, class: gr64, preferred-register: '' }
  - { id: 950, class: gr64, preferred-register: '' }
  - { id: 951, class: gr64, preferred-register: '' }
  - { id: 952, class: gr64, preferred-register: '' }
  - { id: 953, class: gr64, preferred-register: '' }
  - { id: 954, class: gr64, preferred-register: '' }
  - { id: 955, class: gr64, preferred-register: '' }
  - { id: 956, class: gr64, preferred-register: '' }
  - { id: 957, class: gr64, preferred-register: '' }
  - { id: 958, class: gr64, preferred-register: '' }
  - { id: 959, class: gr64, preferred-register: '' }
  - { id: 960, class: gr64, preferred-register: '' }
  - { id: 961, class: gr64, preferred-register: '' }
  - { id: 962, class: gr64, preferred-register: '' }
  - { id: 963, class: gr64, preferred-register: '' }
  - { id: 964, class: gr64, preferred-register: '' }
  - { id: 965, class: gr64, preferred-register: '' }
  - { id: 966, class: gr64, preferred-register: '' }
  - { id: 967, class: gr64, preferred-register: '' }
  - { id: 968, class: gr64, preferred-register: '' }
  - { id: 969, class: gr64, preferred-register: '' }
  - { id: 970, class: gr64, preferred-register: '' }
  - { id: 971, class: gr64, preferred-register: '' }
  - { id: 972, class: gr64, preferred-register: '' }
  - { id: 973, class: gr64, preferred-register: '' }
  - { id: 974, class: gr64, preferred-register: '' }
  - { id: 975, class: gr64, preferred-register: '' }
  - { id: 976, class: gr64, preferred-register: '' }
  - { id: 977, class: gr64, preferred-register: '' }
  - { id: 978, class: gr64, preferred-register: '' }
  - { id: 979, class: gr64, preferred-register: '' }
  - { id: 980, class: gr64, preferred-register: '' }
  - { id: 981, class: gr64, preferred-register: '' }
  - { id: 982, class: gr64, preferred-register: '' }
  - { id: 983, class: gr64, preferred-register: '' }
  - { id: 984, class: gr64, preferred-register: '' }
  - { id: 985, class: gr64, preferred-register: '' }
  - { id: 986, class: gr64, preferred-register: '' }
  - { id: 987, class: gr64, preferred-register: '' }
  - { id: 988, class: gr64, preferred-register: '' }
  - { id: 989, class: gr64, preferred-register: '' }
  - { id: 990, class: gr64, preferred-register: '' }
  - { id: 991, class: gr64, preferred-register: '' }
  - { id: 992, class: gr64, preferred-register: '' }
  - { id: 993, class: gr64, preferred-register: '' }
  - { id: 994, class: gr64, preferred-register: '' }
  - { id: 995, class: gr64, preferred-register: '' }
  - { id: 996, class: gr64, preferred-register: '' }
  - { id: 997, class: gr64, preferred-register: '' }
  - { id: 998, class: gr64, preferred-register: '' }
  - { id: 999, class: gr64, preferred-register: '' }
  - { id: 1000, class: gr64, preferred-register: '' }
  - { id: 1001, class: gr64, preferred-register: '' }
  - { id: 1002, class: gr64, preferred-register: '' }
  - { id: 1003, class: gr64, preferred-register: '' }
  - { id: 1004, class: gr64, preferred-register: '' }
  - { id: 1005, class: gr64, preferred-register: '' }
  - { id: 1006, class: gr64, preferred-register: '' }
  - { id: 1007, class: gr64, preferred-register: '' }
  - { id: 1008, class: gr64, preferred-register: '' }
  - { id: 1009, class: gr64, preferred-register: '' }
  - { id: 1010, class: gr64, preferred-register: '' }
  - { id: 1011, class: gr64, preferred-register: '' }
  - { id: 1012, class: gr64, preferred-register: '' }
  - { id: 1013, class: gr64, preferred-register: '' }
  - { id: 1014, class: gr64, preferred-register: '' }
  - { id: 1015, class: gr64, preferred-register: '' }
  - { id: 1016, class: gr64, preferred-register: '' }
  - { id: 1017, class: gr64, preferred-register: '' }
  - { id: 1018, class: gr64, preferred-register: '' }
  - { id: 1019, class: gr64, preferred-register: '' }
  - { id: 1020, class: gr64, preferred-register: '' }
  - { id: 1021, class: gr64, preferred-register: '' }
  - { id: 1022, class: gr64, preferred-register: '' }
  - { id: 1023, class: gr64, preferred-register: '' }
  - { id: 1024, class: gr64, preferred-register: '' }
  - { id: 1025, class: gr64, preferred-register: '' }
  - { id: 1026, class: gr64, preferred-register: '' }
  - { id: 1027, class: gr64, preferred-register: '' }
  - { id: 1028, class: gr64, preferred-register: '' }
  - { id: 1029, class: gr64, preferred-register: '' }
  - { id: 1030, class: gr64, preferred-register: '' }
  - { id: 1031, class: gr64, preferred-register: '' }
  - { id: 1032, class: gr64, preferred-register: '' }
  - { id: 1033, class: gr64, preferred-register: '' }
  - { id: 1034, class: gr64, preferred-register: '' }
  - { id: 1035, class: gr64, preferred-register: '' }
  - { id: 1036, class: gr64, preferred-register: '' }
  - { id: 1037, class: gr64, preferred-register: '' }
  - { id: 1038, class: gr64, preferred-register: '' }
  - { id: 1039, class: gr64, preferred-register: '' }
  - { id: 1040, class: gr64, preferred-register: '' }
  - { id: 1041, class: gr64, preferred-register: '' }
  - { id: 1042, class: gr64, preferred-register: '' }
  - { id: 1043, class: gr64, preferred-register: '' }
  - { id: 1044, class: gr64, preferred-register: '' }
  - { id: 1045, class: gr64, preferred-register: '' }
  - { id: 1046, class: gr64, preferred-register: '' }
  - { id: 1047, class: gr64, preferred-register: '' }
  - { id: 1048, class: gr64, preferred-register: '' }
  - { id: 1049, class: gr64, preferred-register: '' }
  - { id: 1050, class: gr64, preferred-register: '' }
  - { id: 1051, class: gr64, preferred-register: '' }
  - { id: 1052, class: gr64, preferred-register: '' }
  - { id: 1053, class: gr32, preferred-register: '' }
  - { id: 1054, class: gr32, preferred-register: '' }
  - { id: 1055, class: gr64, preferred-register: '' }
  - { id: 1056, class: gr32, preferred-register: '' }
  - { id: 1057, class: gr32, preferred-register: '' }
  - { id: 1058, class: gr32, preferred-register: '' }
  - { id: 1059, class: gr32, preferred-register: '' }
  - { id: 1060, class: gr64, preferred-register: '' }
  - { id: 1061, class: gr64, preferred-register: '' }
  - { id: 1062, class: gr32, preferred-register: '' }
  - { id: 1063, class: gr64, preferred-register: '' }
  - { id: 1064, class: gr64, preferred-register: '' }
  - { id: 1065, class: gr64, preferred-register: '' }
  - { id: 1066, class: gr64, preferred-register: '' }
  - { id: 1067, class: gr64, preferred-register: '' }
  - { id: 1068, class: gr64, preferred-register: '' }
  - { id: 1069, class: gr32, preferred-register: '' }
  - { id: 1070, class: gr32, preferred-register: '' }
  - { id: 1071, class: gr64, preferred-register: '' }
  - { id: 1072, class: gr32, preferred-register: '' }
  - { id: 1073, class: gr32, preferred-register: '' }
  - { id: 1074, class: gr32, preferred-register: '' }
  - { id: 1075, class: gr32, preferred-register: '' }
  - { id: 1076, class: gr64, preferred-register: '' }
  - { id: 1077, class: gr64, preferred-register: '' }
  - { id: 1078, class: gr32, preferred-register: '' }
  - { id: 1079, class: gr64, preferred-register: '' }
  - { id: 1080, class: gr64, preferred-register: '' }
  - { id: 1081, class: gr64, preferred-register: '' }
  - { id: 1082, class: gr64, preferred-register: '' }
  - { id: 1083, class: gr64, preferred-register: '' }
  - { id: 1084, class: gr64, preferred-register: '' }
  - { id: 1085, class: gr32, preferred-register: '' }
  - { id: 1086, class: gr32, preferred-register: '' }
  - { id: 1087, class: gr64, preferred-register: '' }
  - { id: 1088, class: gr32, preferred-register: '' }
  - { id: 1089, class: gr32, preferred-register: '' }
  - { id: 1090, class: gr32, preferred-register: '' }
  - { id: 1091, class: gr32, preferred-register: '' }
  - { id: 1092, class: gr64, preferred-register: '' }
  - { id: 1093, class: gr64, preferred-register: '' }
  - { id: 1094, class: gr32, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 10, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 11, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    MOV32mi %stack.0, 1, $noreg, 0, $noreg, 300 :: (store (s32) into %ir.5, align 8)
    %1093:gr64 = MOV32ri64 2147352576
    %1094:gr32 = MOV32rm %1093, 1, $noreg, 0, $noreg :: (load (s32) from %ir.8)
    %1091:gr32 = SHR32ri %1094, 8, implicit-def $eflags
    %1089:gr32 = AND32ri %1091, 255, implicit-def $eflags
    %1086:gr32 = MOV32rr %1089
    %1087:gr64 = SUBREG_TO_REG 0, %1086, %subreg.sub_32bit
    %1083:gr64 = MOV64ri 6525457751900296980
    %1084:gr64 = ADD64rr %1087, %1083, implicit-def $eflags
    %1080:gr64 = MOV64ri -3299414270133141545
    %1081:gr64 = OR64rr %1084, %1080, implicit-def $eflags
    %1077:gr64 = MOV32ri64 2147352576
    %1078:gr32 = MOV32rm %1077, 1, $noreg, 0, $noreg :: (load (s32) from %ir.15)
    %1075:gr32 = SHR32ri %1078, 8, implicit-def $eflags
    %1073:gr32 = AND32ri %1075, 255, implicit-def $eflags
    %1070:gr32 = MOV32rr %1073
    %1071:gr64 = SUBREG_TO_REG 0, %1070, %subreg.sub_32bit
    %1067:gr64 = MOV64ri 2571792975541324576
    %1068:gr64 = ADD64rr %1071, %1067, implicit-def $eflags
    %1064:gr64 = MOV64ri -6391512435329018109
    %1065:gr64 = ADD64rr %1068, %1064, implicit-def $eflags
    %1061:gr64 = MOV32ri64 2147352576
    %1062:gr32 = MOV32rm %1061, 1, $noreg, 0, $noreg :: (load (s32) from %ir.22)
    %1059:gr32 = SHR32ri %1062, 8, implicit-def $eflags
    %1057:gr32 = AND32ri %1059, 255, implicit-def $eflags
    %1054:gr32 = MOV32rr %1057
    %1055:gr64 = SUBREG_TO_REG 0, %1054, %subreg.sub_32bit
    %1051:gr64 = MOV64ri -6969396409496038530
    %1052:gr64 = ADD64rr %1055, %1051, implicit-def $eflags
    %1047:gr64 = MOV64ri -4442059363203823428
    %1049:gr64 = SUB64rr %1047, %1052, implicit-def $eflags
    %1046:gr64 = XOR64ri32 %1065, -1, implicit-def $eflags
    %1045:gr64 = XOR64rr %1049, %1065, implicit-def $eflags
    $rcx = COPY %1081
    $cl = KILL killed $rcx
    %1043:gr64 = SHL64rCL %1065, implicit-def $eflags, implicit $cl
    $rcx = COPY %1043
    $cl = KILL killed $rcx
    %1040:gr64 = SHR64rCL %1045, implicit-def $eflags, implicit $cl
    $rcx = COPY %1045
    $cl = KILL killed $rcx
    %1039:gr64 = SHR64rCL %1043, implicit-def $eflags, implicit $cl
    %1037:gr64 = OR64rr %1046, %1045, implicit-def $eflags
    %1034:gr64 = XOR64rr %1037, %1040, implicit-def $eflags
    $rcx = COPY %1037
    $cl = KILL killed $rcx
    %1033:gr64 = SHL64rCL %1040, implicit-def $eflags, implicit $cl
    %1031:gr64 = XOR64rr %1037, %1039, implicit-def $eflags
    %1028:gr64 = SUB64rr %1034, %1031, implicit-def $eflags
    %1027:gr64 = ADD64rr %1033, %1031, implicit-def $eflags
    $rcx = COPY %1034
    $cl = KILL killed $rcx
    %1025:gr64 = SHR64rCL %1033, implicit-def $eflags, implicit $cl
    $rcx = COPY %1028
    $cl = KILL killed $rcx
    %1022:gr64 = SHL64rCL %1025, implicit-def $eflags, implicit $cl
    %1021:gr64 = SUB64rr %1027, %1028, implicit-def $eflags
    %1019:gr64 = ADD64rr %1028, %1025, implicit-def $eflags
    %1016:gr64 = XOR64ri32 %1021, -1, implicit-def $eflags
    %1015:gr64 = IMUL64rr %1022, %1021, implicit-def $eflags
    $rcx = COPY %1019
    $cl = KILL killed $rcx
    %1013:gr64 = SHL64rCL %1022, implicit-def $eflags, implicit $cl
    %1010:gr64 = XOR64rr %1013, %1015, implicit-def $eflags
    %1009:gr64 = OR64rr %1015, %1013, implicit-def $eflags
    $rcx = COPY %1016
    $cl = KILL killed $rcx
    %1007:gr64 = SHL64rCL %1015, implicit-def $eflags, implicit $cl
    %1004:gr64 = XOR64ri32 %1009, -1, implicit-def $eflags
    %1003:gr64 = OR64rr %1010, %1007, implicit-def $eflags
    %1001:gr64 = ADD64rr %1009, %1010, implicit-def $eflags
    %998:gr64 = IMUL64rr %1004, %1001, implicit-def $eflags
    %997:gr64 = OR64rr %1001, %1004, implicit-def $eflags
    %995:gr64 = OR64rr %1003, %1004, implicit-def $eflags
    %992:gr64 = XOR64rr %995, %998, implicit-def $eflags
    %990:gr64 = XOR64rr %997, %995, implicit-def $eflags
    %987:gr64 = IMUL64rr %992, %990, implicit-def $eflags
    %985:gr64 = XOR64ri32 %990, -1, implicit-def $eflags
    %983:gr64 = XOR64rr %985, %987, implicit-def $eflags
    $rcx = COPY %987
    $cl = KILL killed $rcx
    %982:gr64 = SHL64rCL %985, implicit-def $eflags, implicit $cl
    $rcx = COPY %985
    $cl = KILL killed $rcx
    %981:gr64 = SHL64rCL %987, implicit-def $eflags, implicit $cl
    %978:gr64 = XOR64rr %982, %981, implicit-def $eflags
    %977:gr64 = OR64rr %983, %982, implicit-def $eflags
    %975:gr64 = IMUL64rr %982, %981, implicit-def $eflags
    %972:gr64 = ADD64rr %978, %975, implicit-def $eflags
    %970:gr64 = XOR64rr %977, %978, implicit-def $eflags
    $rcx = COPY %970
    $cl = KILL killed $rcx
    %967:gr64 = SHR64rCL %972, implicit-def $eflags, implicit $cl
    $rcx = COPY %970
    $cl = KILL killed $rcx
    %966:gr64 = SHL64rCL %972, implicit-def $eflags, implicit $cl
    %965:gr64 = ADD64rr %972, %970, implicit-def $eflags
    $rcx = COPY %965
    $cl = KILL killed $rcx
    %962:gr64 = SHR64rCL %967, implicit-def $eflags, implicit $cl
    %960:gr64 = XOR64rr %966, %967, implicit-def $eflags
    %959:gr64 = IMUL64rr %967, %966, implicit-def $eflags
    %956:gr64 = ADD64rr %960, %959, implicit-def $eflags
    %955:gr64 = XOR64rr %960, %962, implicit-def $eflags
    %953:gr64 = OR64rr %960, %959, implicit-def $eflags
    %950:gr64 = IMUL64rr %955, %953, implicit-def $eflags
    %949:gr64 = OR64rr %953, %955, implicit-def $eflags
    %947:gr64 = XOR64rr %956, %955, implicit-def $eflags
    %944:gr64 = IMUL64rr %947, %949, implicit-def $eflags
    %942:gr64 = XOR64rr %947, %950, implicit-def $eflags
    %941:gr64 = IMUL64rr %947, %950, implicit-def $eflags
    $rcx = COPY %941
    $cl = KILL killed $rcx
    %938:gr64 = SHR64rCL %942, implicit-def $eflags, implicit $cl
    $rcx = COPY %944
    $cl = KILL killed $rcx
    %937:gr64 = SHR64rCL %942, implicit-def $eflags, implicit $cl
    %934:gr64 = XOR64ri32 %941, -1, implicit-def $eflags
    $rcx = COPY %934
    $cl = KILL killed $rcx
    %932:gr64 = SHL64rCL %938, implicit-def $eflags, implicit $cl
    $rcx = COPY %938
    $cl = KILL killed $rcx
    %931:gr64 = SHR64rCL %934, implicit-def $eflags, implicit $cl
    $rcx = COPY %937
    $cl = KILL killed $rcx
    %929:gr64 = SHL64rCL %938, implicit-def $eflags, implicit $cl
    %926:gr64 = XOR64rr %932, %929, implicit-def $eflags
    %925:gr64 = XOR64rr %931, %932, implicit-def $eflags
    %923:gr64 = OR64rr %929, %931, implicit-def $eflags
    %920:gr64 = OR64rr %923, %925, implicit-def $eflags
    $rcx = COPY %926
    $cl = KILL killed $rcx
    %918:gr64 = SHL64rCL %923, implicit-def $eflags, implicit $cl
    %915:gr64 = XOR64rr %918, %920, implicit-def $eflags
    $rcx = COPY %920
    $cl = KILL killed $rcx
    %914:gr64 = SHL64rCL %918, implicit-def $eflags, implicit $cl
    $rcx = COPY %918
    $cl = KILL killed $rcx
    %913:gr64 = SHR64rCL %920, implicit-def $eflags, implicit $cl
    %910:gr64 = OR64rr %913, %914, implicit-def $eflags
    $rcx = COPY %914
    $cl = KILL killed $rcx
    %909:gr64 = SHL64rCL %915, implicit-def $eflags, implicit $cl
    %907:gr64 = IMUL64rr %915, %913, implicit-def $eflags
    %904:gr64 = XOR64rr %907, %909, implicit-def $eflags
    %902:gr64 = XOR64rr %909, %910, implicit-def $eflags
    %901:gr64 = OR64rr %909, %910, implicit-def $eflags
    %898:gr64 = XOR64rr %902, %904, implicit-def $eflags
    %896:gr64 = SUB64rr %902, %901, implicit-def $eflags
    $rcx = COPY %898
    $cl = KILL killed $rcx
    %893:gr64 = SHR64rCL %896, implicit-def $eflags, implicit $cl
    %890:gr64 = XOR64ri32 %893, -1, implicit-def $eflags
    %887:gr64 = MOV64ri -8030878517578014345
    %888:gr64 = XOR64rr %890, %887, implicit-def $eflags
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %888 :: (store (s64) into %ir.113)
    %883:gr64 = MOV32ri64 2147352576
    %884:gr32 = MOV32rm %883, 1, $noreg, 0, $noreg :: (load (s32) from %ir.114)
    %881:gr32 = SHR32ri %884, 8, implicit-def $eflags
    %879:gr32 = AND32ri %881, 255, implicit-def $eflags
    %877:gr32 = ADD32ri %879, 28492, implicit-def $eflags
    %875:gr16 = COPY %877.sub_16bit
    %873:gr16 = OR16ri %875, 22299, implicit-def $eflags
    %870:gr64 = MOV32ri64 2147352576
    %871:gr32 = MOV32rm %870, 1, $noreg, 0, $noreg :: (load (s32) from %ir.121)
    %868:gr32 = SHR32ri %871, 8, implicit-def $eflags
    %866:gr32 = AND32ri %868, 255, implicit-def $eflags
    %864:gr32 = ADD32ri %866, 20632, implicit-def $eflags
    %862:gr16 = COPY %864.sub_16bit
    %860:gr16 = ADD16ri %862, 41375, implicit-def $eflags
    %857:gr64 = MOV32ri64 2147352576
    %858:gr32 = MOV32rm %857, 1, $noreg, 0, $noreg :: (load (s32) from %ir.128)
    %855:gr32 = SHR32ri %858, 8, implicit-def $eflags
    %853:gr32 = AND32ri %855, 255, implicit-def $eflags
    %851:gr32 = ADD32ri %853, 33642, implicit-def $eflags
    %849:gr16 = COPY %851.sub_16bit
    %847:gr16 = OR16ri %849, 6778, implicit-def $eflags
    $cx = COPY %873
    $cl = KILL killed $cx
    %845:gr16 = SHR16rCL %847, implicit-def $eflags, implicit $cl
    %844:gr16 = SUB16rr %847, %860, implicit-def $eflags
    %842:gr16 = OR16rr %873, %860, implicit-def $eflags
    %839:gr16 = OR16rr %845, %844, implicit-def $eflags
    %838:gr16 = ADD16rr %842, %844, implicit-def $eflags
    %836:gr16 = SUB16rr %845, %842, implicit-def $eflags
    %833:gr16 = SUB16rr %838, %839, implicit-def $eflags
    %832:gr16 = XOR16ri %836, -1, implicit-def $eflags
    $cx = COPY %839
    $cl = KILL killed $cx
    %830:gr16 = SHR16rCL %838, implicit-def $eflags, implicit $cl
    %827:gr16 = XOR16rr %833, %832, implicit-def $eflags
    $cx = COPY %832
    $cl = KILL killed $cx
    %826:gr16 = SHR16rCL %833, implicit-def $eflags, implicit $cl
    %824:gr16 = ADD16rr %830, %833, implicit-def $eflags
    %821:gr16 = IMUL16rr %827, %824, implicit-def $eflags
    %819:gr16 = ADD16rr %827, %826, implicit-def $eflags
    %818:gr16 = SUB16rr %827, %826, implicit-def $eflags
    %815:gr16 = IMUL16rr %821, %818, implicit-def $eflags
    $cx = COPY %819
    $cl = KILL killed $cx
    %814:gr16 = SHR16rCL %821, implicit-def $eflags, implicit $cl
    %812:gr16 = ADD16rr %818, %821, implicit-def $eflags
    $cx = COPY %812
    $cl = KILL killed $cx
    %809:gr16 = SHL16rCL %815, implicit-def $eflags, implicit $cl
    %808:gr16 = XOR16rr %812, %814, implicit-def $eflags
    $cx = COPY %815
    $cl = KILL killed $cx
    %806:gr16 = SHR16rCL %814, implicit-def $eflags, implicit $cl
    $cx = COPY %808
    $cl = KILL killed $cx
    %803:gr16 = SHR16rCL %809, implicit-def $eflags, implicit $cl
    %802:gr16 = ADD16rr %806, %808, implicit-def $eflags
    $cx = COPY %809
    $cl = KILL killed $cx
    %800:gr16 = SHL16rCL %808, implicit-def $eflags, implicit $cl
    %797:gr16 = IMUL16rr %800, %803, implicit-def $eflags
    $cx = COPY %802
    $cl = KILL killed $cx
    %796:gr16 = SHR16rCL %800, implicit-def $eflags, implicit $cl
    %794:gr16 = IMUL16rr %800, %803, implicit-def $eflags
    %791:gr16 = OR16rr %797, %794, implicit-def $eflags
    %789:gr16 = SUB16rr %797, %796, implicit-def $eflags
    %786:gr16 = OR16rr %791, %789, implicit-def $eflags
    %785:gr16 = ADD16rr %789, %791, implicit-def $eflags
    %784:gr16 = ADD16rr %791, %789, implicit-def $eflags
    $cx = COPY %786
    $cl = KILL killed $cx
    %781:gr16 = SHR16rCL %784, implicit-def $eflags, implicit $cl
    %779:gr16 = OR16rr %784, %785, implicit-def $eflags
    %778:gr16 = SUB16rr %784, %785, implicit-def $eflags
    %775:gr16 = ADD16rr %781, %779, implicit-def $eflags
    %774:gr16 = XOR16rr %779, %781, implicit-def $eflags
    $cx = COPY %779
    $cl = KILL killed $cx
    %772:gr16 = SHL16rCL %778, implicit-def $eflags, implicit $cl
    %769:gr16 = ADD16rr %772, %775, implicit-def $eflags
    %767:gr16 = OR16rr %775, %774, implicit-def $eflags
    $cx = COPY %775
    $cl = KILL killed $cx
    %766:gr16 = SHR16rCL %774, implicit-def $eflags, implicit $cl
    $cx = COPY %767
    $cl = KILL killed $cx
    %763:gr16 = SHR16rCL %769, implicit-def $eflags, implicit $cl
    %761:gr16 = ADD16rr %769, %766, implicit-def $eflags
    %758:gr16 = XOR16ri %763, -1, implicit-def $eflags
    %757:gr16 = SUB16rr %763, %761, implicit-def $eflags
    %754:gr16 = OR16rr %758, %757, implicit-def $eflags
    %753:gr16 = XOR16ri %757, -1, implicit-def $eflags
    %752:gr16 = OR16rr %757, %758, implicit-def $eflags
    %749:gr16 = SUB16rr %754, %753, implicit-def $eflags
    %748:gr16 = ADD16rr %754, %752, implicit-def $eflags
    %746:gr16 = ADD16rr %753, %752, implicit-def $eflags
    %743:gr16 = SUB16rr %748, %749, implicit-def $eflags
    %742:gr16 = IMUL16rr %748, %746, implicit-def $eflags
    %740:gr16 = ADD16rr %749, %748, implicit-def $eflags
    %737:gr16 = SUB16rr %742, %740, implicit-def $eflags
    $cx = COPY %742
    $cl = KILL killed $cx
    %735:gr16 = SHL16rCL %743, implicit-def $eflags, implicit $cl
    %732:gr16 = IMUL16rr %735, %737, implicit-def $eflags
    %731:gr16 = XOR16rr %735, %737, implicit-def $eflags
    %730:gr16 = ADD16rr %737, %735, implicit-def $eflags
    %727:gr16 = XOR16ri %730, -1, implicit-def $eflags
    %726:gr16 = SUB16rr %731, %732, implicit-def $eflags
    %724:gr16 = IMUL16rr %730, %732, implicit-def $eflags
    %721:gr16 = XOR16ri %724, -1, implicit-def $eflags
    %720:gr16 = IMUL16rr %724, %727, implicit-def $eflags
    %718:gr16 = SUB16rr %727, %726, implicit-def $eflags
    %715:gr16 = XOR16ri %718, -1, implicit-def $eflags
    $cx = COPY %718
    $cl = KILL killed $cx
    %714:gr16 = SHR16rCL %720, implicit-def $eflags, implicit $cl
    %712:gr16 = XOR16rr %720, %721, implicit-def $eflags
    %709:gr16 = ADD16rr %712, %714, implicit-def $eflags
    %708:gr16 = IMUL16rr %714, %715, implicit-def $eflags
    %706:gr16 = OR16rr %714, %712, implicit-def $eflags
    %703:gr16 = ADD16rr %706, %709, implicit-def $eflags
    $cx = COPY %706
    $cl = KILL killed $cx
    %701:gr16 = SHL16rCL %708, implicit-def $eflags, implicit $cl
    %699:gr16 = XOR16ri %708, -1, implicit-def $eflags
    %697:gr16 = OR16rr %699, %703, implicit-def $eflags
    %695:gr16 = SUB16rr %701, %699, implicit-def $eflags
    %692:gr16 = OR16rr %697, %695, implicit-def $eflags
    %691:gr16 = ADD16rr %695, %697, implicit-def $eflags
    %688:gr16 = OR16rr %692, %691, implicit-def $eflags
    %685:gr16 = XOR16ri %688, -115, implicit-def $eflags
    MOV16mr %stack.4, 1, $noreg, 8, $noreg, %685 :: (store (s16) into %ir.219)
    %682:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, %682 :: (store (s64) into %ir.6)
    MOV32mi %stack.1, 1, $noreg, 0, $noreg, 90000 :: (store (s32) into %ir.221, align 8)
    %679:gr64 = MOV32ri64 2147352576
    %680:gr32 = MOV32rm %679, 1, $noreg, 0, $noreg :: (load (s32) from %ir.224)
    %677:gr32 = SHR32ri %680, 8, implicit-def $eflags
    %675:gr32 = AND32ri %677, 255, implicit-def $eflags
    %672:gr32 = MOV32rr %675
    %673:gr64 = SUBREG_TO_REG 0, %672, %subreg.sub_32bit
    %669:gr64 = MOV64ri -4161527967163122953
    %670:gr64 = ADD64rr %673, %669, implicit-def $eflags
    %666:gr64 = MOV64ri 7535518699687320737
    %667:gr64 = OR64rr %670, %666, implicit-def $eflags
    %663:gr64 = MOV32ri64 2147352576
    %664:gr32 = MOV32rm %663, 1, $noreg, 0, $noreg :: (load (s32) from %ir.231)
    %661:gr32 = SHR32ri %664, 8, implicit-def $eflags
    %659:gr32 = AND32ri %661, 255, implicit-def $eflags
    %656:gr32 = MOV32rr %659
    %657:gr64 = SUBREG_TO_REG 0, %656, %subreg.sub_32bit
    %653:gr64 = MOV64ri -5211628221425713868
    %654:gr64 = ADD64rr %657, %653, implicit-def $eflags
    %650:gr64 = MOV64ri 103856356604844149
    %651:gr64 = XOR64rr %654, %650, implicit-def $eflags
    %647:gr64 = MOV32ri64 2147352576
    %648:gr32 = MOV32rm %647, 1, $noreg, 0, $noreg :: (load (s32) from %ir.238)
    %645:gr32 = SHR32ri %648, 8, implicit-def $eflags
    %643:gr32 = AND32ri %645, 255, implicit-def $eflags
    %640:gr32 = MOV32rr %643
    %641:gr64 = SUBREG_TO_REG 0, %640, %subreg.sub_32bit
    %637:gr64 = MOV64ri -7072901490733840424
    %638:gr64 = ADD64rr %641, %637, implicit-def $eflags
    %634:gr64 = MOV64ri 5245700055373814915
    %635:gr64 = IMUL64rr %638, %634, implicit-def $eflags
    %632:gr64 = XOR64rr %667, %635, implicit-def $eflags
    $rcx = COPY %667
    $cl = KILL killed $rcx
    %631:gr64 = SHR64rCL %635, implicit-def $eflags, implicit $cl
    %629:gr64 = OR64rr %651, %667, implicit-def $eflags
    %626:gr64 = OR64rr %632, %631, implicit-def $eflags
    %624:gr64 = IMUL64rr %629, %632, implicit-def $eflags
    %621:gr64 = XOR64ri32 %626, -1, implicit-def $eflags
    $rcx = COPY %626
    $cl = KILL killed $rcx
    %620:gr64 = SHR64rCL %624, implicit-def $eflags, implicit $cl
    %618:gr64 = XOR64ri32 %626, -1, implicit-def $eflags
    %616:gr64 = ADD64rr %621, %618, implicit-def $eflags
    %615:gr64 = IMUL64rr %618, %621, implicit-def $eflags
    %613:gr64 = XOR64rr %620, %621, implicit-def $eflags
    $rcx = COPY %615
    $cl = KILL killed $rcx
    %610:gr64 = SHR64rCL %616, implicit-def $eflags, implicit $cl
    %609:gr64 = SUB64rr %613, %615, implicit-def $eflags
    %607:gr64 = XOR64rr %615, %616, implicit-def $eflags
    %604:gr64 = XOR64rr %607, %610, implicit-def $eflags
    %603:gr64 = IMUL64rr %609, %607, implicit-def $eflags
    %601:gr64 = OR64rr %610, %607, implicit-def $eflags
    %598:gr64 = XOR64ri32 %601, -1, implicit-def $eflags
    $rcx = COPY %603
    $cl = KILL killed $rcx
    %597:gr64 = SHL64rCL %601, implicit-def $eflags, implicit $cl
    %595:gr64 = OR64rr %604, %603, implicit-def $eflags
    $rcx = COPY %595
    $cl = KILL killed $rcx
    %592:gr64 = SHL64rCL %597, implicit-def $eflags, implicit $cl
    %591:gr64 = ADD64rr %595, %597, implicit-def $eflags
    $rcx = COPY %598
    $cl = KILL killed $rcx
    %589:gr64 = SHR64rCL %597, implicit-def $eflags, implicit $cl
    %586:gr64 = XOR64ri32 %589, -1, implicit-def $eflags
    $rcx = COPY %592
    $cl = KILL killed $rcx
    %584:gr64 = SHL64rCL %591, implicit-def $eflags, implicit $cl
    %581:gr64 = SUB64rr %584, %586, implicit-def $eflags
    %580:gr64 = SUB64rr %584, %586, implicit-def $eflags
    %578:gr64 = XOR64ri32 %586, -1, implicit-def $eflags
    $rcx = COPY %580
    $cl = KILL killed $rcx
    %576:gr64 = SHL64rCL %581, implicit-def $eflags, implicit $cl
    %574:gr64 = XOR64rr %578, %581, implicit-def $eflags
    %573:gr64 = XOR64rr %578, %581, implicit-def $eflags
    $rcx = COPY %573
    $cl = KILL killed $rcx
    %570:gr64 = SHR64rCL %574, implicit-def $eflags, implicit $cl
    %569:gr64 = ADD64rr %573, %576, implicit-def $eflags
    %566:gr64 = XOR64ri32 %574, -1, implicit-def $eflags
    $rcx = COPY %569
    $cl = KILL killed $rcx
    %564:gr64 = SHR64rCL %566, implicit-def $eflags, implicit $cl
    %563:gr64 = XOR64rr %570, %566, implicit-def $eflags
    %561:gr64 = SUB64rr %566, %569, implicit-def $eflags
    %558:gr64 = OR64rr %563, %564, implicit-def $eflags
    %556:gr64 = ADD64rr %564, %561, implicit-def $eflags
    %555:gr64 = ADD64rr %564, %561, implicit-def $eflags
    %552:gr64 = OR64rr %556, %558, implicit-def $eflags
    %551:gr64 = OR64rr %555, %556, implicit-def $eflags
    %549:gr64 = ADD64rr %555, %558, implicit-def $eflags
    %546:gr64 = ADD64rr %549, %551, implicit-def $eflags
    %545:gr64 = SUB64rr %551, %549, implicit-def $eflags
    $rcx = COPY %551
    $cl = KILL killed $rcx
    %543:gr64 = SHL64rCL %552, implicit-def $eflags, implicit $cl
    %540:gr64 = XOR64rr %546, %545, implicit-def $eflags
    $rcx = COPY %545
    $cl = KILL killed $rcx
    %539:gr64 = SHR64rCL %546, implicit-def $eflags, implicit $cl
    %537:gr64 = XOR64rr %545, %543, implicit-def $eflags
    $rcx = COPY %537
    $cl = KILL killed $rcx
    %534:gr64 = SHL64rCL %539, implicit-def $eflags, implicit $cl
    $rcx = COPY %537
    $cl = KILL killed $rcx
    %533:gr64 = SHR64rCL %539, implicit-def $eflags, implicit $cl
    %531:gr64 = IMUL64rr %539, %540, implicit-def $eflags
    %528:gr64 = OR64rr %534, %531, implicit-def $eflags
    %526:gr64 = OR64rr %533, %534, implicit-def $eflags
    %523:gr64 = SUB64rr %528, %526, implicit-def $eflags
    %522:gr64 = SUB64rr %528, %526, implicit-def $eflags
    $rcx = COPY %523
    $cl = KILL killed $rcx
    %519:gr64 = SHL64rCL %522, implicit-def $eflags, implicit $cl
    %518:gr64 = SUB64rr %523, %522, implicit-def $eflags
    $rcx = COPY %518
    $cl = KILL killed $rcx
    %515:gr64 = SHR64rCL %519, implicit-def $eflags, implicit $cl
    %514:gr64 = SUB64rr %518, %519, implicit-def $eflags
    $rcx = COPY %515
    $cl = KILL killed $rcx
    %511:gr64 = SHR64rCL %514, implicit-def $eflags, implicit $cl
    %510:gr64 = ADD64rr %514, %515, implicit-def $eflags
    %507:gr64 = XOR64ri32 %510, -1, implicit-def $eflags
    %506:gr64 = XOR64ri32 %510, -1, implicit-def $eflags
    %505:gr64 = ADD64rr %511, %510, implicit-def $eflags
    %502:gr64 = SUB64rr %505, %507, implicit-def $eflags
    %501:gr64 = IMUL64rr %506, %507, implicit-def $eflags
    %499:gr64 = SUB64rr %505, %506, implicit-def $eflags
    %496:gr64 = IMUL64rr %502, %499, implicit-def $eflags
    $rcx = COPY %501
    $cl = KILL killed $rcx
    %495:gr64 = SHR64rCL %499, implicit-def $eflags, implicit $cl
    %493:gr64 = SUB64rr %502, %501, implicit-def $eflags
    $rcx = COPY %493
    $cl = KILL killed $rcx
    %490:gr64 = SHL64rCL %495, implicit-def $eflags, implicit $cl
    $rcx = COPY %496
    $cl = KILL killed $rcx
    %488:gr64 = SHL64rCL %495, implicit-def $eflags, implicit $cl
    %485:gr64 = ADD64rr %490, %488, implicit-def $eflags
    %482:gr64 = XOR64ri32 %485, -1, implicit-def $eflags
    %479:gr64 = MOV64ri -8093928912543965560
    %480:gr64 = XOR64rr %482, %479, implicit-def $eflags
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %480 :: (store (s64) into %ir.330)
    %475:gr64 = MOV32ri64 2147352576
    %476:gr32 = MOV32rm %475, 1, $noreg, 0, $noreg :: (load (s32) from %ir.331)
    %473:gr32 = SHR32ri %476, 8, implicit-def $eflags
    %471:gr32 = AND32ri %473, 255, implicit-def $eflags
    %469:gr32 = ADD32ri %471, 61361, implicit-def $eflags
    %467:gr16 = COPY %469.sub_16bit
    %465:gr16 = OR16ri %467, 9340, implicit-def $eflags
    %462:gr64 = MOV32ri64 2147352576
    %463:gr32 = MOV32rm %462, 1, $noreg, 0, $noreg :: (load (s32) from %ir.338)
    %460:gr32 = SHR32ri %463, 8, implicit-def $eflags
    %458:gr32 = AND32ri %460, 255, implicit-def $eflags
    %456:gr32 = ADD32ri %458, 6141, implicit-def $eflags
    %454:gr16 = COPY %456.sub_16bit
    %452:gr16 = ADD16ri %454, 1529, implicit-def $eflags
    %449:gr64 = MOV32ri64 2147352576
    %450:gr32 = MOV32rm %449, 1, $noreg, 0, $noreg :: (load (s32) from %ir.345)
    %447:gr32 = SHR32ri %450, 8, implicit-def $eflags
    %445:gr32 = AND32ri %447, 255, implicit-def $eflags
    %443:gr32 = ADD32ri %445, 14143, implicit-def $eflags
    %441:gr16 = COPY %443.sub_16bit
    %439:gr16 = ADD16ri %441, 26647, implicit-def $eflags
    %437:gr16 = IMUL16rr %439, %452, implicit-def $eflags
    %435:gr16 = SUB16rr %452, %465, implicit-def $eflags
    %432:gr16 = OR16rr %435, %437, implicit-def $eflags
    %431:gr16 = ADD16rr %435, %437, implicit-def $eflags
    %430:gr16 = XOR16rr %435, %437, implicit-def $eflags
    %427:gr16 = SUB16rr %430, %431, implicit-def $eflags
    %425:gr16 = OR16rr %432, %430, implicit-def $eflags
    %423:gr16 = XOR16ri %430, -1, implicit-def $eflags
    $cx = COPY %427
    $cl = KILL killed $cx
    %421:gr16 = SHR16rCL %425, implicit-def $eflags, implicit $cl
    %420:gr16 = SUB16rr %425, %427, implicit-def $eflags
    %418:gr16 = SUB16rr %425, %423, implicit-def $eflags
    %415:gr16 = SUB16rr %421, %418, implicit-def $eflags
    %414:gr16 = XOR16rr %421, %420, implicit-def $eflags
    %412:gr16 = IMUL16rr %420, %418, implicit-def $eflags
    %409:gr16 = XOR16rr %415, %412, implicit-def $eflags
    %408:gr16 = SUB16rr %412, %414, implicit-def $eflags
    %406:gr16 = IMUL16rr %412, %415, implicit-def $eflags
    %403:gr16 = SUB16rr %406, %409, implicit-def $eflags
    %401:gr16 = XOR16ri %406, -1, implicit-def $eflags
    %399:gr16 = XOR16ri %408, -1, implicit-def $eflags
    %397:gr16 = ADD16rr %399, %401, implicit-def $eflags
    %396:gr16 = IMUL16rr %403, %399, implicit-def $eflags
    %394:gr16 = OR16rr %399, %401, implicit-def $eflags
    %391:gr16 = SUB16rr %394, %396, implicit-def $eflags
    %390:gr16 = ADD16rr %397, %396, implicit-def $eflags
    %388:gr16 = OR16rr %396, %394, implicit-def $eflags
    %385:gr16 = XOR16rr %391, %390, implicit-def $eflags
    %384:gr16 = OR16rr %388, %390, implicit-def $eflags
    $cx = COPY %390
    $cl = KILL killed $cx
    %382:gr16 = SHR16rCL %391, implicit-def $eflags, implicit $cl
    %379:gr16 = ADD16rr %385, %382, implicit-def $eflags
    %378:gr16 = SUB16rr %385, %382, implicit-def $eflags
    %376:gr16 = XOR16rr %382, %384, implicit-def $eflags
    $cx = COPY %378
    $cl = KILL killed $cx
    %373:gr16 = SHL16rCL %379, implicit-def $eflags, implicit $cl
    $cx = COPY %379
    $cl = KILL killed $cx
    %372:gr16 = SHL16rCL %376, implicit-def $eflags, implicit $cl
    $cx = COPY %378
    $cl = KILL killed $cx
    %370:gr16 = SHR16rCL %379, implicit-def $eflags, implicit $cl
    %367:gr16 = ADD16rr %370, %373, implicit-def $eflags
    %365:gr16 = ADD16rr %372, %373, implicit-def $eflags
    %362:gr16 = SUB16rr %367, %365, implicit-def $eflags
    $cx = COPY %365
    $cl = KILL killed $cx
    %361:gr16 = SHR16rCL %367, implicit-def $eflags, implicit $cl
    %359:gr16 = XOR16ri %367, -1, implicit-def $eflags
    %357:gr16 = SUB16rr %359, %361, implicit-def $eflags
    %355:gr16 = SUB16rr %359, %362, implicit-def $eflags
    %354:gr16 = ADD16rr %362, %359, implicit-def $eflags
    %351:gr16 = OR16rr %357, %355, implicit-def $eflags
    %349:gr16 = XOR16rr %354, %355, implicit-def $eflags
    %348:gr16 = SUB16rr %354, %355, implicit-def $eflags
    %345:gr16 = IMUL16rr %351, %348, implicit-def $eflags
    $cx = COPY %348
    $cl = KILL killed $cx
    %344:gr16 = SHL16rCL %349, implicit-def $eflags, implicit $cl
    %342:gr16 = SUB16rr %351, %349, implicit-def $eflags
    %339:gr16 = ADD16rr %345, %342, implicit-def $eflags
    $cx = COPY %345
    $cl = KILL killed $cx
    %338:gr16 = SHL16rCL %342, implicit-def $eflags, implicit $cl
    %336:gr16 = ADD16rr %344, %345, implicit-def $eflags
    %333:gr16 = XOR16rr %339, %336, implicit-def $eflags
    %332:gr16 = ADD16rr %336, %339, implicit-def $eflags
    %330:gr16 = XOR16rr %338, %336, implicit-def $eflags
    %327:gr16 = ADD16rr %332, %330, implicit-def $eflags
    %326:gr16 = XOR16rr %330, %332, implicit-def $eflags
    %324:gr16 = XOR16rr %333, %332, implicit-def $eflags
    %321:gr16 = XOR16ri %326, -1, implicit-def $eflags
    $cx = COPY %327
    $cl = KILL killed $cx
    %319:gr16 = SHL16rCL %324, implicit-def $eflags, implicit $cl
    %318:gr16 = SUB16rr %324, %327, implicit-def $eflags
    %315:gr16 = XOR16rr %318, %319, implicit-def $eflags
    %314:gr16 = OR16rr %321, %319, implicit-def $eflags
    %311:gr16 = XOR16ri %318, -1, implicit-def $eflags
    %309:gr16 = OR16rr %315, %311, implicit-def $eflags
    %307:gr16 = SUB16rr %314, %311, implicit-def $eflags
    %306:gr16 = OR16rr %311, %314, implicit-def $eflags
    %303:gr16 = XOR16ri %307, -1, implicit-def $eflags
    %302:gr16 = SUB16rr %307, %309, implicit-def $eflags
    %300:gr16 = OR16rr %306, %307, implicit-def $eflags
    %297:gr16 = OR16rr %300, %303, implicit-def $eflags
    %296:gr16 = IMUL16rr %300, %303, implicit-def $eflags
    %294:gr16 = ADD16rr %303, %302, implicit-def $eflags
    %291:gr16 = XOR16rr %294, %296, implicit-def $eflags
    %289:gr16 = ADD16rr %297, %294, implicit-def $eflags
    %286:gr16 = XOR16rr %289, %291, implicit-def $eflags
    %285:gr16 = XOR16rr %289, %291, implicit-def $eflags
    $cx = COPY %285
    $cl = KILL killed $cx
    %282:gr16 = SHR16rCL %286, implicit-def $eflags, implicit $cl
    %280:gr16 = XOR16ri %285, -1, implicit-def $eflags
    $cx = COPY %280
    $cl = KILL killed $cx
    %278:gr16 = SHR16rCL %282, implicit-def $eflags, implicit $cl
    %275:gr16 = XOR16ri %278, 26478, implicit-def $eflags
    MOV16mr %stack.5, 1, $noreg, 8, $noreg, %275 :: (store (s16) into %ir.438)
    %271:gr64 = MOV32ri64 2147352576
    %272:gr32 = MOV32rm %271, 1, $noreg, 0, $noreg :: (load (s32) from %ir.439)
    %269:gr32 = SHR32ri %272, 8, implicit-def $eflags
    %267:gr32 = AND32ri %269, 255, implicit-def $eflags
    %265:gr32 = ADD32ri %267, 74, implicit-def $eflags
    %263:gr8 = COPY %265.sub_8bit
    %261:gr8 = XOR8ri %263, 64, implicit-def $eflags
    %258:gr64 = MOV32ri64 2147352576
    %259:gr32 = MOV32rm %258, 1, $noreg, 0, $noreg :: (load (s32) from %ir.446)
    %256:gr32 = SHR32ri %259, 8, implicit-def $eflags
    %254:gr32 = AND32ri %256, 255, implicit-def $eflags
    %252:gr32 = ADD32ri %254, 21, implicit-def $eflags
    %250:gr8 = COPY %252.sub_8bit
    %246:gr8 = MOV8ri 110
    $cl = COPY %250
    %248:gr8 = SHL8rCL %246, implicit-def $eflags, implicit $cl
    %244:gr64 = MOV32ri64 2147352576
    %245:gr32 = MOV32rm %244, 1, $noreg, 0, $noreg :: (load (s32) from %ir.453)
    %242:gr32 = SHR32ri %245, 8, implicit-def $eflags
    %240:gr32 = AND32ri %242, 255, implicit-def $eflags
    %238:gr32 = ADD32ri %240, 175, implicit-def $eflags
    %236:gr8 = COPY %238.sub_8bit
    %233:gr8 = MOV8ri 229
    $al = COPY %236
    MUL8r %233, implicit-def $al, implicit-def $eflags, implicit-def $ax, implicit $al
    %234:gr8 = COPY $al
    $cl = COPY %234
    %231:gr8 = SHR8rCL %261, implicit-def $eflags, implicit $cl
    $cl = COPY %248
    %230:gr8 = SHL8rCL %234, implicit-def $eflags, implicit $cl
    %228:gr8 = ADD8rr %248, %261, implicit-def $eflags
    $cl = COPY %230
    %225:gr8 = SHL8rCL %228, implicit-def $eflags, implicit $cl
    %224:gr8 = XOR8rr %231, %230, implicit-def $eflags
    %222:gr8 = SUB8rr %231, %228, implicit-def $eflags
    $al = COPY %222
    MUL8r %225, implicit-def $al, implicit-def $eflags, implicit-def $ax, implicit $al
    %219:gr8 = COPY $al
    $al = COPY %225
    MUL8r %224, implicit-def $al, implicit-def $eflags, implicit-def $ax, implicit $al
    %218:gr8 = COPY $al
    %216:gr8 = ADD8rr %224, %222, implicit-def $eflags
    %213:gr8 = XOR8ri %216, -1, implicit-def $eflags
    %212:gr8 = OR8rr %219, %216, implicit-def $eflags
    %210:gr8 = SUB8rr %219, %218, implicit-def $eflags
    %207:gr8 = XOR8ri %213, -1, implicit-def $eflags
    %206:gr8 = ADD8rr %212, %210, implicit-def $eflags
    %204:gr8 = SUB8rr %210, %213, implicit-def $eflags
    $al = COPY %206
    MUL8r %204, implicit-def $al, implicit-def $eflags, implicit-def $ax, implicit $al
    %201:gr8 = COPY $al
    %200:gr8 = ADD8rr %206, %204, implicit-def $eflags
    %198:gr8 = OR8rr %207, %206, implicit-def $eflags
    %195:gr8 = ADD8rr %201, %200, implicit-def $eflags
    $cl = COPY %201
    %193:gr8 = SHR8rCL %198, implicit-def $eflags, implicit $cl
    $cl = COPY %201
    %192:gr8 = SHR8rCL %198, implicit-def $eflags, implicit $cl
    %189:gr8 = OR8rr %195, %192, implicit-def $eflags
    $cl = COPY %193
    %188:gr8 = SHR8rCL %192, implicit-def $eflags, implicit $cl
    %186:gr8 = SUB8rr %192, %195, implicit-def $eflags
    %183:gr8 = XOR8rr %188, %189, implicit-def $eflags
    %182:gr8 = SUB8rr %188, %186, implicit-def $eflags
    %180:gr8 = SUB8rr %186, %189, implicit-def $eflags
    %177:gr8 = OR8rr %182, %180, implicit-def $eflags
    %176:gr8 = SUB8rr %182, %180, implicit-def $eflags
    $cl = COPY %182
    %174:gr8 = SHL8rCL %183, implicit-def $eflags, implicit $cl
    %171:gr8 = OR8rr %177, %176, implicit-def $eflags
    %170:gr8 = ADD8rr %174, %176, implicit-def $eflags
    %168:gr8 = ADD8rr %177, %174, implicit-def $eflags
    $al = COPY %168
    MUL8r %170, implicit-def $al, implicit-def $eflags, implicit-def $ax, implicit $al
    %165:gr8 = COPY $al
    %163:gr8 = XOR8ri %168, -1, implicit-def $eflags
    %162:gr8 = SUB8rr %171, %168, implicit-def $eflags
    %159:gr8 = OR8rr %165, %163, implicit-def $eflags
    %157:gr8 = SUB8rr %162, %163, implicit-def $eflags
    $cl = COPY %163
    %156:gr8 = SHR8rCL %162, implicit-def $eflags, implicit $cl
    %153:gr8 = XOR8rr %157, %159, implicit-def $eflags
    %151:gr8 = OR8rr %156, %157, implicit-def $eflags
    $cl = COPY %153
    %148:gr8 = SHL8rCL %151, implicit-def $eflags, implicit $cl
    %147:gr8 = ADD8rr %153, %151, implicit-def $eflags
    $al = COPY %148
    MUL8r %147, implicit-def $al, implicit-def $eflags, implicit-def $ax, implicit $al
    %144:gr8 = COPY $al
    $cl = COPY %148
    %143:gr8 = SHL8rCL %147, implicit-def $eflags, implicit $cl
    $cl = COPY %147
    %142:gr8 = SHR8rCL %148, implicit-def $eflags, implicit $cl
    %139:gr8 = SUB8rr %142, %144, implicit-def $eflags
    $al = COPY %144
    MUL8r %143, implicit-def $al, implicit-def $eflags, implicit-def $ax, implicit $al
    %137:gr8 = COPY $al
    %135:gr8 = XOR8ri %143, -1, implicit-def $eflags
    %133:gr8 = SUB8rr %137, %135, implicit-def $eflags
    $al = COPY %137
    MUL8r %139, implicit-def $al, implicit-def $eflags, implicit-def $ax, implicit $al
    %132:gr8 = COPY $al
    $al = COPY %137
    MUL8r %135, implicit-def $al, implicit-def $eflags, implicit-def $ax, implicit $al
    %130:gr8 = COPY $al
    $cl = COPY %133
    %127:gr8 = SHR8rCL %132, implicit-def $eflags, implicit $cl
    %125:gr8 = SUB8rr %133, %130, implicit-def $eflags
    $cl = COPY %125
    %122:gr8 = SHL8rCL %127, implicit-def $eflags, implicit $cl
    %121:gr8 = OR8rr %125, %127, implicit-def $eflags
    %120:gr8 = ADD8rr %127, %125, implicit-def $eflags
    $cl = COPY %122
    %117:gr8 = SHL8rCL %120, implicit-def $eflags, implicit $cl
    %116:gr8 = XOR8rr %120, %121, implicit-def $eflags
    %114:gr8 = XOR8rr %121, %122, implicit-def $eflags
    %111:gr8 = XOR8ri %117, -1, implicit-def $eflags
    $cl = COPY %116
    %109:gr8 = SHL8rCL %114, implicit-def $eflags, implicit $cl
    $cl = COPY %109
    %106:gr8 = SHL8rCL %111, implicit-def $eflags, implicit $cl
    $cl = COPY %109
    %105:gr8 = SHL8rCL %111, implicit-def $eflags, implicit $cl
    %102:gr8 = XOR8ri %106, -1, implicit-def $eflags
    %101:gr8 = ADD8rr %105, %106, implicit-def $eflags
    %99:gr8 = XOR8ri %105, -1, implicit-def $eflags
    %97:gr8 = SUB8rr %102, %101, implicit-def $eflags
    $cl = COPY %99
    %96:gr8 = SHL8rCL %101, implicit-def $eflags, implicit $cl
    %94:gr8 = XOR8rr %99, %102, implicit-def $eflags
    $cl = COPY %94
    %91:gr8 = SHR8rCL %97, implicit-def $eflags, implicit $cl
    %90:gr8 = XOR8rr %97, %96, implicit-def $eflags
    %88:gr8 = OR8rr %94, %96, implicit-def $eflags
    %85:gr8 = OR8rr %90, %88, implicit-def $eflags
    $al = COPY %91
    MUL8r %88, implicit-def $al, implicit-def $eflags, implicit-def $ax, implicit $al
    %84:gr8 = COPY $al
    $cl = COPY %88
    %82:gr8 = SHL8rCL %90, implicit-def $eflags, implicit $cl
    %79:gr8 = ADD8rr %84, %85, implicit-def $eflags
    $cl = COPY %85
    %77:gr8 = SHR8rCL %82, implicit-def $eflags, implicit $cl
    %74:gr8 = OR8rr %77, %79, implicit-def $eflags
    %71:gr8 = XOR8ri %74, -1, implicit-def $eflags
    MOV8mr %stack.5, 1, $noreg, 10, $noreg, %71 :: (store (s8) into %ir.545)
    %68:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, %68 :: (store (s64) into %ir.222)
    %66:gr64 = MOV64rm %stack.0, 1, $noreg, 8, $noreg :: (load (s64) from %ir.547)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %66 :: (store (s64) into %ir.3)
    %64:gr64 = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (load (s64) from %ir.549)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %64 :: (store (s64) into %ir.4)
    %62:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 32, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %60:gr64 = LEA64r $rip, 1, $noreg, @.str.4, $noreg
    $rcx = COPY %60
    $rdx = COPY %62
    CALL64pcrel32 @printf, csr_win64, implicit $rsp, implicit $ssp, implicit $rcx, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %61:gr32 = COPY $eax
    %58:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 32, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %56:gr64 = LEA64r $rip, 1, $noreg, @.str.4, $noreg
    $rcx = COPY %56
    $rdx = COPY %58
    CALL64pcrel32 @printf, csr_win64, implicit $rsp, implicit $ssp, implicit $rcx, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %57:gr32 = COPY $eax
    ADJCALLSTACKDOWN64 32, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 @_Z11str_printerv, csr_win64, implicit $rsp, implicit $ssp, implicit-def $rax
    ADJCALLSTACKUP64 32, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %54:gr64 = COPY $rax
    %52:gr64 = LEA64r $rip, 1, $noreg, @.str.4, $noreg
    %53:gr64 = ADD64ri32 %52, 1193046, implicit-def $eflags
    %50:gr64 = MOV32ri64 2147352576
    %51:gr32 = MOV32rm %50, 1, $noreg, 0, $noreg :: (load (s32) from %ir.557)
    %48:gr32 = SHR32ri %51, 8, implicit-def $eflags
    %46:gr32 = AND32ri %48, 255, implicit-def $eflags
    %44:gr32 = ADD32ri %46, 1048576, implicit-def $eflags
    %40:gr32 = MOV32ri 2652494037
    $ecx = COPY %44
    $cl = KILL killed $ecx
    %42:gr32 = SHL32rCL %40, implicit-def $eflags, implicit $cl
    %38:gr64 = MOV32ri64 2147352576
    %39:gr32 = MOV32rm %38, 1, $noreg, 0, $noreg :: (load (s32) from %ir.563)
    %36:gr32 = SHR32ri %39, 8, implicit-def $eflags
    %34:gr32 = AND32ri %36, 255, implicit-def $eflags
    %32:gr32 = ADD32ri %34, 16777215, implicit-def $eflags
    %30:gr32 = ADD32ri %32, 1901240620, implicit-def $eflags
    %28:gr32 = OR32rr %30, %42, implicit-def $eflags
    %27:gr32 = IMUL32rr %42, %30, implicit-def $eflags
    %24:gr32 = IMUL32rr %28, %27, implicit-def $eflags
    %23:gr32 = ADD32rr %28, %27, implicit-def $eflags
    %20:gr32 = OR32rr %23, %24, implicit-def $eflags
    %19:gr32 = OR32rr %24, %23, implicit-def $eflags
    %16:gr32 = ADD32rr %20, %19, implicit-def $eflags
    %13:gr32 = ADD32ri %16, 24261720, implicit-def $eflags
    %9:gr32 = MOV32rr %13
    %10:gr64 = SUBREG_TO_REG 0, %9, %subreg.sub_32bit
    %7:gr64 = SUB64rr %53, %10, implicit-def $eflags
    ADJCALLSTACKDOWN64 32, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rcx = COPY %7
    $rdx = COPY %54
    CALL64pcrel32 @printf, csr_win64, implicit $rsp, implicit $ssp, implicit $rcx, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %3:gr32 = COPY $eax
    %0:gr32 = MOV32r0 implicit-def $eflags
    $eax = COPY %0
    RET64 implicit $eax

...
---
name:            _ZL8_obf_strPKc
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rcx', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rcx
  
    %0:gr64 = COPY $rcx
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.2)
    %2:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    $rax = COPY %2
    RET64 implicit $rax

...
