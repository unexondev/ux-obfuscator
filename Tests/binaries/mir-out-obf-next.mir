--- |
  ; ModuleID = './binaries/mir-out-obf.mir'
  source_filename = "./src/main.cpp"
  target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-windows-gnu"
  
  %struct.StringContainer = type { i32, ptr }
  
  @.str = private unnamed_addr constant [29 x i8] c"Gonna let str_printer talk!\0A\00", align 1
  @.str.1 = private unnamed_addr constant [26 x i8] c"str_printer: hello world!\00", align 1
  @.str.2 = private unnamed_addr constant [10 x i8] c"warevisor\00", align 1
  @.str.3 = private unnamed_addr constant [11 x i8] c"warevising\00", align 1
  @.str.4 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define dso_local noundef ptr @_Z11str_printerv() #0 {
    %1 = getelementptr i8, ptr @.str, i32 1193046
    %2 = inttoptr i64 2147352576 to ptr
    %3 = load i32, ptr %2, align 4
    %4 = lshr i32 %3, 8
    %5 = and i32 %4, 255
    %6 = add i32 %5, 1048576
    %7 = mul i32 -310323074, %6
    %8 = inttoptr i64 2147352576 to ptr
    %9 = load i32, ptr %8, align 4
    %10 = lshr i32 %9, 8
    %11 = and i32 %10, 255
    %12 = add i32 %11, 16777215
    %13 = shl i32 -782102522, %12
    %14 = mul i32 %13, %7
    %15 = mul i32 %7, %13
    %16 = or i32 %15, %14
    %17 = xor i32 %15, %14
    %18 = mul i32 %17, %16
    %19 = add i32 %17, %16
    %20 = mul i32 %19, %18
    %21 = add i32 %20, 1193046
    %22 = ptrtoint ptr %1 to i64
    %23 = zext i32 %21 to i64
    %24 = sub i64 %22, %23
    %25 = inttoptr i64 %24 to ptr
    %26 = call i32 (ptr, ...) @printf(ptr noundef %25)
    %27 = alloca i8, i8 26, align 1
    %28 = inttoptr i64 2147352576 to ptr
    %29 = load i32, ptr %28, align 4
    %30 = lshr i32 %29, 8
    %31 = and i32 %30, 255
    %32 = zext i32 %31 to i64
    %33 = add i64 %32, 8288249558864263834
    %34 = sub i64 -5946784057107526366, %33
    %35 = inttoptr i64 2147352576 to ptr
    %36 = load i32, ptr %35, align 4
    %37 = lshr i32 %36, 8
    %38 = and i32 %37, 255
    %39 = zext i32 %38 to i64
    %40 = add i64 %39, 6607870016291804059
    %41 = sub i64 1989243118387872835, %40
    %42 = inttoptr i64 2147352576 to ptr
    %43 = load i32, ptr %42, align 4
    %44 = lshr i32 %43, 8
    %45 = and i32 %44, 255
    %46 = zext i32 %45 to i64
    %47 = add i64 %46, -3584890062199842076
    %48 = shl i64 3247702691107958268, %47
    %49 = xor i64 %48, -1
    %50 = add i64 %48, %41
    %51 = xor i64 %41, -1
    %52 = lshr i64 %50, %49
    %53 = mul i64 %50, %51
    %54 = lshr i64 %51, %49
    %55 = xor i64 %54, -1
    %56 = sub i64 %52, %53
    %57 = xor i64 %54, -1
    %58 = xor i64 %55, -1
    %59 = add i64 %57, %56
    %60 = lshr i64 %58, %59
    %61 = lshr i64 %59, %58
    %62 = xor i64 %58, -1
    %63 = or i64 %62, %60
    %64 = shl i64 %62, %60
    %65 = mul i64 %60, %61
    %66 = or i64 %63, %64
    %67 = or i64 %63, %65
    %68 = shl i64 %64, %65
    %69 = sub i64 %68, %66
    %70 = lshr i64 %67, %66
    %71 = lshr i64 %69, %70
    %72 = sub i64 %70, %69
    %73 = or i64 %71, %72
    %74 = sub i64 %71, %72
    %75 = sub i64 %72, %71
    %76 = or i64 %75, %73
    %77 = lshr i64 %73, %75
    %78 = xor i64 %73, -1
    %79 = xor i64 %78, %77
    %80 = mul i64 %78, %77
    %81 = add i64 %78, %76
    %82 = mul i64 %79, %80
    %83 = lshr i64 %81, %79
    %84 = lshr i64 %81, %79
    %85 = or i64 %84, %83
    %86 = sub i64 %84, %82
    %87 = xor i64 %82, -1
    %88 = xor i64 %85, %86
    %89 = lshr i64 %86, %87
    %90 = xor i64 %85, %87
    %91 = or i64 %90, %88
    %92 = shl i64 %90, %89
    %93 = add i64 %91, %92
    %94 = sub i64 %92, %91
    %95 = lshr i64 %93, %94
    %96 = xor i64 %93, %94
    %97 = or i64 %93, %94
    %98 = mul i64 %96, %95
    %99 = shl i64 %97, %96
    %100 = add i64 %97, %96
    %101 = mul i64 %99, %98
    %102 = add i64 %98, %99
    %103 = lshr i64 %98, %100
    %104 = add i64 %101, %102
    %105 = shl i64 %102, %101
    %106 = shl i64 %105, %104
    %107 = sub i64 %104, %105
    %108 = mul i64 %104, %105
    %109 = add i64 %108, %106
    %110 = lshr i64 %107, %108
    %111 = add i64 %109, %110
    %112 = lshr i64 %110, %109
    %113 = shl i64 %109, %110
    %114 = sub i64 %112, %113
    %115 = sub i64 %111, %113
    %116 = add i64 %112, %111
    %117 = xor i64 %116, %114
    %118 = xor i64 %116, -1
    %119 = add i64 %115, %114
    %120 = xor i64 %118, %117
    %121 = or i64 %118, %119
    %122 = xor i64 %118, %119
    %123 = or i64 %120, %121
    %124 = xor i64 %122, -1
    %125 = shl i64 %123, %124
    %126 = xor i64 %125, -7956016043689931892
    %127 = ptrtoint ptr %27 to i64
    %128 = add i64 %127, 0
    %129 = inttoptr i64 %128 to ptr
    store i64 %126, ptr %129, align 8
    %130 = inttoptr i64 2147352576 to ptr
    %131 = load i32, ptr %130, align 4
    %132 = lshr i32 %131, 8
    %133 = and i32 %132, 255
    %134 = zext i32 %133 to i64
    %135 = add i64 %134, -3839250753194139507
    %136 = shl i64 5262334155435938502, %135
    %137 = inttoptr i64 2147352576 to ptr
    %138 = load i32, ptr %137, align 4
    %139 = lshr i32 %138, 8
    %140 = and i32 %139, 255
    %141 = zext i32 %140 to i64
    %142 = add i64 %141, -2786066528538475506
    %143 = xor i64 -6914162340842475582, %142
    %144 = inttoptr i64 2147352576 to ptr
    %145 = load i32, ptr %144, align 4
    %146 = lshr i32 %145, 8
    %147 = and i32 %146, 255
    %148 = zext i32 %147 to i64
    %149 = add i64 %148, 9141901671883109322
    %150 = xor i64 7185728663751831686, %149
    %151 = add i64 %136, %143
    %152 = or i64 %136, %150
    %153 = add i64 %143, %150
    %154 = xor i64 %153, -1
    %155 = or i64 %152, %153
    %156 = or i64 %151, %152
    %157 = mul i64 %156, %155
    %158 = add i64 %156, %155
    %159 = or i64 %154, %156
    %160 = xor i64 %158, -1
    %161 = add i64 %158, %157
    %162 = shl i64 %158, %159
    %163 = add i64 %162, %160
    %164 = lshr i64 %161, %160
    %165 = or i64 %161, %162
    %166 = xor i64 %164, -1
    %167 = sub i64 %165, %164
    %168 = shl i64 %163, %165
    %169 = mul i64 %167, %168
    %170 = add i64 %168, %166
    %171 = shl i64 %166, %168
    %172 = or i64 %169, %170
    %173 = mul i64 %169, %171
    %174 = xor i64 %169, %170
    %175 = add i64 %174, %172
    %176 = or i64 %173, %172
    %177 = xor i64 %172, -1
    %178 = or i64 %176, %177
    %179 = mul i64 %177, %176
    %180 = lshr i64 %175, %177
    %181 = lshr i64 %179, %178
    %182 = or i64 %178, %180
    %183 = add i64 %181, %182
    %184 = add i64 %182, %181
    %185 = shl i64 %181, %182
    %186 = add i64 %185, %184
    %187 = shl i64 %183, %184
    %188 = sub i64 %187, %186
    %189 = mul i64 %186, %187
    %190 = sub i64 %186, %187
    %191 = xor i64 %188, -1
    %192 = xor i64 %188, -1
    %193 = xor i64 %189, %188
    %194 = xor i64 %192, %191
    %195 = or i64 %191, %192
    %196 = add i64 %193, %191
    %197 = lshr i64 %196, %194
    %198 = xor i64 %196, %194
    %199 = mul i64 %196, %195
    %200 = shl i64 %197, %198
    %201 = xor i64 %198, -1
    %202 = add i64 %197, %199
    %203 = xor i64 %202, %200
    %204 = sub i64 %200, %201
    %205 = xor i64 %201, -1
    %206 = xor i64 %205, -1
    %207 = lshr i64 %204, %203
    %208 = xor i64 %203, -1
    %209 = mul i64 %206, %207
    %210 = xor i64 %208, %206
    %211 = shl i64 %208, %207
    %212 = xor i64 %209, -1
    %213 = shl i64 %209, %211
    %214 = or i64 %209, %211
    %215 = shl i64 %213, %212
    %216 = xor i64 %213, %214
    %217 = or i64 %212, %213
    %218 = xor i64 %217, -1
    %219 = shl i64 %217, %216
    %220 = shl i64 %215, %217
    %221 = xor i64 %220, %219
    %222 = lshr i64 %218, %219
    %223 = sub i64 %219, %218
    %224 = sub i64 %221, %223
    %225 = lshr i64 %223, %222
    %226 = add i64 %221, %222
    %227 = lshr i64 %225, %226
    %228 = xor i64 %224, -1
    %229 = xor i64 %225, -1
    %230 = lshr i64 %229, %227
    %231 = sub i64 %228, %227
    %232 = xor i64 %230, -1
    %233 = xor i64 %232, -1412608420481964684
    %234 = ptrtoint ptr %27 to i64
    %235 = add i64 %234, 8
    %236 = inttoptr i64 %235 to ptr
    store i64 %233, ptr %236, align 8
    %237 = inttoptr i64 2147352576 to ptr
    %238 = load i32, ptr %237, align 4
    %239 = lshr i32 %238, 8
    %240 = and i32 %239, 255
    %241 = zext i32 %240 to i64
    %242 = add i64 %241, -7148059725910420608
    %243 = or i64 -8683244575073280178, %242
    %244 = inttoptr i64 2147352576 to ptr
    %245 = load i32, ptr %244, align 4
    %246 = lshr i32 %245, 8
    %247 = and i32 %246, 255
    %248 = zext i32 %247 to i64
    %249 = add i64 %248, 1244980582329829786
    %250 = xor i64 6483140857148821400, %249
    %251 = inttoptr i64 2147352576 to ptr
    %252 = load i32, ptr %251, align 4
    %253 = lshr i32 %252, 8
    %254 = and i32 %253, 255
    %255 = zext i32 %254 to i64
    %256 = add i64 %255, -8190515476989150261
    %257 = sub i64 3232377974712179288, %256
    %258 = mul i64 %257, %250
    %259 = sub i64 %250, %257
    %260 = add i64 %250, %243
    %261 = shl i64 %260, %258
    %262 = or i64 %259, %258
    %263 = lshr i64 %260, %258
    %264 = or i64 %262, %263
    %265 = xor i64 %261, %263
    %266 = shl i64 %265, %264
    %267 = add i64 %265, %264
    %268 = xor i64 %264, -1
    %269 = mul i64 %268, %266
    %270 = shl i64 %267, %266
    %271 = xor i64 %268, -1
    %272 = xor i64 %271, -1
    %273 = add i64 %271, %269
    %274 = or i64 %270, %271
    %275 = xor i64 %273, -1
    %276 = mul i64 %273, %272
    %277 = add i64 %273, %274
    %278 = shl i64 %275, %276
    %279 = sub i64 %276, %277
    %280 = sub i64 %277, %276
    %281 = shl i64 %279, %278
    %282 = sub i64 %279, %280
    %283 = xor i64 %279, %280
    %284 = xor i64 %283, %282
    %285 = xor i64 %281, %282
    %286 = add i64 %282, %283
    %287 = or i64 %285, %286
    %288 = mul i64 %286, %284
    %289 = or i64 %285, %284
    %290 = shl i64 %288, %287
    %291 = sub i64 %287, %289
    %292 = lshr i64 %288, %287
    %293 = sub i64 %290, %292
    %294 = mul i64 %290, %291
    %295 = lshr i64 %292, %290
    %296 = mul i64 %294, %293
    %297 = mul i64 %294, %293
    %298 = lshr i64 %295, %294
    %299 = lshr i64 %298, %297
    %300 = or i64 %296, %298
    %301 = mul i64 %296, %298
    %302 = xor i64 %299, -1
    %303 = or i64 %300, %301
    %304 = lshr i64 %303, %302
    %305 = xor i64 %303, -1
    %306 = sub i64 %302, %303
    %307 = xor i64 %305, %304
    %308 = or i64 %306, %305
    %309 = add i64 %305, %304
    %310 = sub i64 %309, %307
    %311 = shl i64 %309, %307
    %312 = or i64 %307, %308
    %313 = sub i64 %311, %310
    %314 = mul i64 %312, %311
    %315 = xor i64 %312, -1
    %316 = sub i64 %315, %314
    %317 = lshr i64 %313, %315
    %318 = xor i64 %315, %314
    %319 = sub i64 %317, %316
    %320 = shl i64 %316, %318
    %321 = or i64 %316, %318
    %322 = or i64 %319, %321
    %323 = xor i64 %321, %319
    %324 = xor i64 %319, %320
    %325 = or i64 %322, %323
    %326 = xor i64 %323, %322
    %327 = mul i64 %322, %324
    %328 = add i64 %325, %326
    %329 = add i64 %326, %327
    %330 = or i64 %325, %327
    %331 = xor i64 %330, %328
    %332 = xor i64 %330, -1
    %333 = xor i64 %329, -1
    %334 = shl i64 %331, %332
    %335 = or i64 %333, %331
    %336 = sub i64 %333, %332
    %337 = sub i64 %334, %335
    %338 = xor i64 %336, -1
    %339 = lshr i64 %337, %338
    %340 = xor i64 %339, 7236284524343095148
    %341 = ptrtoint ptr %27 to i64
    %342 = add i64 %341, 16
    %343 = inttoptr i64 %342 to ptr
    store i64 %340, ptr %343, align 8
    %344 = inttoptr i64 2147352576 to ptr
    %345 = load i32, ptr %344, align 4
    %346 = lshr i32 %345, 8
    %347 = and i32 %346, 255
    %348 = add i32 %347, 52450
    %349 = trunc i32 %348 to i16
    %350 = mul i16 10994, %349
    %351 = inttoptr i64 2147352576 to ptr
    %352 = load i32, ptr %351, align 4
    %353 = lshr i32 %352, 8
    %354 = and i32 %353, 255
    %355 = add i32 %354, 7265
    %356 = trunc i32 %355 to i16
    %357 = xor i16 -32018, %356
    %358 = inttoptr i64 2147352576 to ptr
    %359 = load i32, ptr %358, align 4
    %360 = lshr i32 %359, 8
    %361 = and i32 %360, 255
    %362 = add i32 %361, 32358
    %363 = trunc i32 %362 to i16
    %364 = add i16 -19444, %363
    %365 = lshr i16 %350, %357
    %366 = mul i16 %357, %364
    %367 = mul i16 %357, %364
    %368 = or i16 %367, %366
    %369 = or i16 %366, %365
    %370 = lshr i16 %365, %367
    %371 = xor i16 %368, -1
    %372 = mul i16 %369, %370
    %373 = sub i16 %369, %370
    %374 = sub i16 %372, %371
    %375 = xor i16 %371, -1
    %376 = sub i16 %372, %373
    %377 = or i16 %375, %374
    %378 = lshr i16 %374, %376
    %379 = xor i16 %378, %377
    %380 = mul i16 %378, %377
    %381 = or i16 %377, %378
    %382 = mul i16 %379, %381
    %383 = xor i16 %381, %379
    %384 = shl i16 %381, %380
    %385 = lshr i16 %384, %383
    %386 = xor i16 %383, %382
    %387 = mul i16 %384, %383
    %388 = shl i16 %385, %386
    %389 = shl i16 %386, %387
    %390 = add i16 %385, %386
    %391 = xor i16 %390, %388
    %392 = sub i16 %390, %388
    %393 = mul i16 %390, %389
    %394 = sub i16 %393, %391
    %395 = sub i16 %392, %391
    %396 = xor i16 %392, -1
    %397 = shl i16 %394, %395
    %398 = xor i16 %396, -1
    %399 = xor i16 %395, -1
    %400 = xor i16 %398, -1
    %401 = shl i16 %399, %398
    %402 = mul i16 %399, %397
    %403 = mul i16 %402, %401
    %404 = xor i16 %400, %402
    %405 = mul i16 %401, %400
    %406 = sub i16 %403, %405
    %407 = xor i16 %405, -1
    %408 = shl i16 %403, %404
    %409 = lshr i16 %408, %407
    %410 = xor i16 %408, %406
    %411 = add i16 %407, %406
    %412 = xor i16 %410, -1
    %413 = shl i16 %409, %411
    %414 = or i16 %411, %410
    %415 = or i16 %414, %413
    %416 = mul i16 %413, %412
    %417 = sub i16 %412, %414
    %418 = sub i16 %416, %417
    %419 = add i16 %417, %416
    %420 = or i16 %417, %415
    %421 = or i16 %420, %419
    %422 = sub i16 %418, %419
    %423 = sub i16 %422, %421
    %424 = xor i16 %422, %421
    %425 = xor i16 %422, -1
    %426 = xor i16 %423, %424
    %427 = sub i16 %425, %424
    %428 = or i16 %423, %425
    %429 = lshr i16 %427, %426
    %430 = xor i16 %426, %428
    %431 = xor i16 %429, %430
    %432 = xor i16 %430, %429
    %433 = add i16 %430, %429
    %434 = mul i16 %431, %433
    %435 = or i16 %433, %432
    %436 = mul i16 %433, %431
    %437 = shl i16 %434, %436
    %438 = lshr i16 %436, %434
    %439 = or i16 %438, %437
    %440 = add i16 %437, %438
    %441 = sub i16 %437, %438
    %442 = lshr i16 %440, %441
    %443 = xor i16 %441, %439
    %444 = lshr i16 %443, %442
    %445 = xor i16 %444, 33
    %446 = ptrtoint ptr %27 to i64
    %447 = add i64 %446, 24
    %448 = inttoptr i64 %447 to ptr
    store i16 %445, ptr %448, align 2
    %449 = bitcast ptr %27 to ptr
    ret ptr %449
  }
  
  declare i32 @printf(ptr noundef, ...) #1
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define internal noundef ptr @_ZL8_obf_strPKc(ptr noundef %0) #2 section "._obf_str" {
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress noinline norecurse optnone uwtable
  define dso_local noundef i32 @main() #3 {
    %1 = alloca %struct.StringContainer, align 8
    %2 = alloca %struct.StringContainer, align 8
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = getelementptr inbounds %struct.StringContainer, ptr %1, i32 0, i32 0
    store i32 300, ptr %5, align 8
    %6 = getelementptr inbounds %struct.StringContainer, ptr %1, i32 0, i32 1
    %7 = alloca i8, i8 10, align 1
    %8 = inttoptr i64 2147352576 to ptr
    %9 = load i32, ptr %8, align 4
    %10 = lshr i32 %9, 8
    %11 = and i32 %10, 255
    %12 = zext i32 %11 to i64
    %13 = add i64 %12, 4301250715357807179
    %14 = lshr i64 6597419133114160879, %13
    %15 = inttoptr i64 2147352576 to ptr
    %16 = load i32, ptr %15, align 4
    %17 = lshr i32 %16, 8
    %18 = and i32 %17, 255
    %19 = zext i32 %18 to i64
    %20 = add i64 %19, -5401555618185310808
    %21 = mul i64 3931091994120062661, %20
    %22 = inttoptr i64 2147352576 to ptr
    %23 = load i32, ptr %22, align 4
    %24 = lshr i32 %23, 8
    %25 = and i32 %24, 255
    %26 = zext i32 %25 to i64
    %27 = add i64 %26, -3725718841275263683
    %28 = or i64 -7868861332125761690, %27
    %29 = xor i64 %28, %21
    %30 = mul i64 %14, %28
    %31 = xor i64 %21, -1
    %32 = add i64 %30, %29
    %33 = xor i64 %30, %29
    %34 = add i64 %33, %32
    %35 = xor i64 %33, %32
    %36 = mul i64 %32, %33
    %37 = or i64 %34, %36
    %38 = shl i64 %36, %35
    %39 = lshr i64 %36, %34
    %40 = add i64 %37, %38
    %41 = xor i64 %39, -1
    %42 = mul i64 %37, %38
    %43 = add i64 %41, %42
    %44 = shl i64 %42, %41
    %45 = sub i64 %43, %44
    %46 = lshr i64 %43, %44
    %47 = xor i64 %43, -1
    %48 = shl i64 %45, %47
    %49 = xor i64 %46, %47
    %50 = mul i64 %46, %47
    %51 = mul i64 %50, %48
    %52 = xor i64 %49, -1
    %53 = add i64 %48, %50
    %54 = mul i64 %53, %52
    %55 = add i64 %53, %52
    %56 = add i64 %51, %52
    %57 = mul i64 %54, %55
    %58 = or i64 %54, %56
    %59 = xor i64 %56, %54
    %60 = xor i64 %58, %57
    %61 = add i64 %58, %59
    %62 = xor i64 %59, -1
    %63 = add i64 %60, %61
    %64 = or i64 %61, %60
    %65 = or i64 %60, %62
    %66 = or i64 %64, %65
    %67 = lshr i64 %63, %65
    %68 = sub i64 %64, %63
    %69 = or i64 %68, %67
    %70 = lshr i64 %68, %67
    %71 = mul i64 %67, %66
    %72 = lshr i64 %70, %69
    %73 = add i64 %69, %71
    %74 = xor i64 %69, -1
    %75 = lshr i64 %73, %72
    %76 = sub i64 %73, %74
    %77 = xor i64 %72, %74
    %78 = sub i64 %75, %76
    %79 = or i64 %76, %77
    %80 = xor i64 %75, %77
    %81 = mul i64 %79, %78
    %82 = shl i64 %79, %80
    %83 = mul i64 %79, %78
    %84 = mul i64 %83, %81
    %85 = xor i64 %81, -1
    %86 = lshr i64 %83, %82
    %87 = xor i64 %84, -1
    %88 = sub i64 %84, %86
    %89 = shl i64 %88, %87
    %90 = xor i64 %88, -1
    %91 = xor i64 %87, -1
    %92 = sub i64 %91, %89
    %93 = xor i64 %91, %90
    %94 = or i64 %90, %91
    %95 = mul i64 %92, %94
    %96 = lshr i64 %92, %93
    %97 = or i64 %93, %94
    %98 = or i64 %97, %96
    %99 = xor i64 %97, -1
    %100 = add i64 %97, %95
    %101 = or i64 %99, %98
    %102 = mul i64 %99, %98
    %103 = sub i64 %100, %98
    %104 = shl i64 %101, %102
    %105 = shl i64 %101, %102
    %106 = or i64 %102, %103
    %107 = xor i64 %105, %106
    %108 = sub i64 %106, %104
    %109 = add i64 %108, %107
    %110 = xor i64 %109, 8030878517760778615
    %111 = ptrtoint ptr %7 to i64
    %112 = add i64 %111, 0
    %113 = inttoptr i64 %112 to ptr
    store i64 %110, ptr %113, align 8
    %114 = inttoptr i64 2147352576 to ptr
    %115 = load i32, ptr %114, align 4
    %116 = lshr i32 %115, 8
    %117 = and i32 %116, 255
    %118 = add i32 %117, 27727
    %119 = trunc i32 %118 to i16
    %120 = or i16 12264, %119
    %121 = inttoptr i64 2147352576 to ptr
    %122 = load i32, ptr %121, align 4
    %123 = lshr i32 %122, 8
    %124 = and i32 %123, 255
    %125 = add i32 %124, 19601
    %126 = trunc i32 %125 to i16
    %127 = xor i16 24418, %126
    %128 = inttoptr i64 2147352576 to ptr
    %129 = load i32, ptr %128, align 4
    %130 = lshr i32 %129, 8
    %131 = and i32 %130, 255
    %132 = add i32 %131, 49209
    %133 = trunc i32 %132 to i16
    %134 = xor i16 -4805, %133
    %135 = mul i16 %120, %127
    %136 = shl i16 %127, %134
    %137 = xor i16 %127, -1
    %138 = xor i16 %137, -1
    %139 = add i16 %137, %135
    %140 = shl i16 %135, %137
    %141 = sub i16 %139, %138
    %142 = shl i16 %140, %139
    %143 = mul i16 %138, %140
    %144 = lshr i16 %141, %142
    %145 = mul i16 %142, %143
    %146 = sub i16 %143, %142
    %147 = xor i16 %144, -1
    %148 = or i16 %146, %145
    %149 = sub i16 %145, %146
    %150 = sub i16 %149, %148
    %151 = add i16 %148, %147
    %152 = sub i16 %149, %147
    %153 = shl i16 %150, %152
    %154 = mul i16 %150, %152
    %155 = mul i16 %152, %151
    %156 = xor i16 %153, %154
    %157 = or i16 %155, %153
    %158 = add i16 %156, %157
    %159 = mul i16 %156, %157
    %160 = mul i16 %156, %157
    %161 = xor i16 %158, %160
    %162 = add i16 %160, %158
    %163 = add i16 %161, %162
    %164 = xor i16 %162, %161
    %165 = xor i16 %161, %162
    %166 = shl i16 %164, %163
    %167 = add i16 %165, %164
    %168 = add i16 %165, %164
    %169 = mul i16 %168, %167
    %170 = mul i16 %167, %166
    %171 = sub i16 %167, %166
    %172 = xor i16 %170, %171
    %173 = xor i16 %171, -1
    %174 = xor i16 %170, -1
    %175 = add i16 %173, %172
    %176 = or i16 %174, %173
    %177 = xor i16 %174, %172
    %178 = sub i16 %177, %176
    %179 = shl i16 %176, %175
    %180 = mul i16 %175, %176
    %181 = or i16 %179, %178
    %182 = xor i16 %180, -1
    %183 = lshr i16 %180, %178
    %184 = xor i16 %182, -1
    %185 = add i16 %181, %183
    %186 = shl i16 %181, %182
    %187 = xor i16 %184, -1
    %188 = lshr i16 %186, %185
    %189 = mul i16 %185, %184
    %190 = shl i16 %188, %189
    %191 = xor i16 %187, %188
    %192 = xor i16 %187, -1
    %193 = add i16 %192, %190
    %194 = mul i16 %191, %192
    %195 = add i16 %192, %191
    %196 = xor i16 %195, %194
    %197 = xor i16 %193, -1
    %198 = xor i16 %196, -1
    %199 = xor i16 %196, -1
    %200 = add i16 %196, %197
    %201 = mul i16 %199, %200
    %202 = xor i16 %198, %200
    %203 = shl i16 %200, %199
    %204 = shl i16 %201, %202
    %205 = xor i16 %202, %203
    %206 = sub i16 %203, %202
    %207 = xor i16 %206, %204
    %208 = lshr i16 %205, %204
    %209 = or i16 %206, %205
    %210 = mul i16 %209, %208
    %211 = add i16 %207, %209
    %212 = sub i16 %208, %207
    %213 = or i16 %212, %211
    %214 = lshr i16 %210, %212
    %215 = lshr i16 %214, %213
    %216 = xor i16 %215, 114
    %217 = ptrtoint ptr %7 to i64
    %218 = add i64 %217, 8
    %219 = inttoptr i64 %218 to ptr
    store i16 %216, ptr %219, align 2
    %220 = bitcast ptr %7 to ptr
    store ptr %220, ptr %6, align 8
    %221 = getelementptr inbounds %struct.StringContainer, ptr %2, i32 0, i32 0
    store i32 90000, ptr %221, align 8
    %222 = getelementptr inbounds %struct.StringContainer, ptr %2, i32 0, i32 1
    %223 = alloca i8, i8 11, align 1
    %224 = inttoptr i64 2147352576 to ptr
    %225 = load i32, ptr %224, align 4
    %226 = lshr i32 %225, 8
    %227 = and i32 %226, 255
    %228 = zext i32 %227 to i64
    %229 = add i64 %228, 569506267795969050
    %230 = mul i64 -6721089043960457534, %229
    %231 = inttoptr i64 2147352576 to ptr
    %232 = load i32, ptr %231, align 4
    %233 = lshr i32 %232, 8
    %234 = and i32 %233, 255
    %235 = zext i32 %234 to i64
    %236 = add i64 %235, -2691975893715720134
    %237 = xor i64 9055538531896245800, %236
    %238 = inttoptr i64 2147352576 to ptr
    %239 = load i32, ptr %238, align 4
    %240 = lshr i32 %239, 8
    %241 = and i32 %240, 255
    %242 = zext i32 %241 to i64
    %243 = add i64 %242, 6524466296865750129
    %244 = sub i64 -3285592596558189406, %243
    %245 = xor i64 %237, %230
    %246 = or i64 %237, %230
    %247 = xor i64 %245, -1
    %248 = xor i64 %246, %245
    %249 = xor i64 %245, %246
    %250 = xor i64 %247, -1
    %251 = shl i64 %249, %247
    %252 = or i64 %248, %249
    %253 = xor i64 %252, %251
    %254 = xor i64 %252, %251
    %255 = shl i64 %250, %251
    %256 = add i64 %253, %254
    %257 = lshr i64 %254, %255
    %258 = sub i64 %253, %255
    %259 = or i64 %257, %258
    %260 = mul i64 %256, %258
    %261 = xor i64 %257, -1
    %262 = or i64 %260, %261
    %263 = shl i64 %261, %259
    %264 = shl i64 %261, %259
    %265 = shl i64 %262, %264
    %266 = sub i64 %264, %262
    %267 = xor i64 %263, %262
    %268 = xor i64 %267, -1
    %269 = shl i64 %267, %266
    %270 = sub i64 %266, %265
    %271 = add i64 %269, %270
    %272 = mul i64 %270, %268
    %273 = sub i64 %269, %268
    %274 = add i64 %273, %272
    %275 = mul i64 %271, %273
    %276 = lshr i64 %273, %272
    %277 = or i64 %276, %275
    %278 = shl i64 %275, %276
    %279 = xor i64 %274, %276
    %280 = mul i64 %277, %279
    %281 = or i64 %278, %279
    %282 = shl i64 %278, %277
    %283 = xor i64 %280, -1
    %284 = xor i64 %281, %280
    %285 = mul i64 %281, %280
    %286 = xor i64 %283, -1
    %287 = shl i64 %283, %284
    %288 = xor i64 %283, %284
    %289 = xor i64 %286, %287
    %290 = shl i64 %288, %287
    %291 = mul i64 %287, %286
    %292 = mul i64 %291, %289
    %293 = lshr i64 %289, %291
    %294 = sub i64 %290, %289
    %295 = mul i64 %293, %292
    %296 = lshr i64 %294, %293
    %297 = sub i64 %292, %294
    %298 = sub i64 %296, %295
    %299 = or i64 %296, %295
    %300 = or i64 %296, %297
    %301 = lshr i64 %300, %298
    %302 = xor i64 %300, %298
    %303 = xor i64 %299, -1
    %304 = sub i64 %301, %303
    %305 = sub i64 %302, %303
    %306 = sub i64 %303, %301
    %307 = or i64 %306, %305
    %308 = mul i64 %304, %305
    %309 = xor i64 %306, -1
    %310 = lshr i64 %309, %307
    %311 = lshr i64 %309, %308
    %312 = sub i64 %308, %307
    %313 = lshr i64 %312, %311
    %314 = add i64 %311, %312
    %315 = shl i64 %310, %311
    %316 = add i64 %314, %315
    %317 = or i64 %314, %313
    %318 = xor i64 %317, -1
    %319 = mul i64 %316, %317
    %320 = lshr i64 %317, %316
    %321 = or i64 %318, %320
    %322 = xor i64 %318, %319
    %323 = shl i64 %319, %318
    %324 = shl i64 %323, %321
    %325 = lshr i64 %322, %323
    %326 = shl i64 %325, %324
    %327 = xor i64 %326, 7598532953503116444
    %328 = ptrtoint ptr %223 to i64
    %329 = add i64 %328, 0
    %330 = inttoptr i64 %329 to ptr
    store i64 %327, ptr %330, align 8
    %331 = inttoptr i64 2147352576 to ptr
    %332 = load i32, ptr %331, align 4
    %333 = lshr i32 %332, 8
    %334 = and i32 %333, 255
    %335 = add i32 %334, 8489
    %336 = trunc i32 %335 to i16
    %337 = xor i16 5386, %336
    %338 = inttoptr i64 2147352576 to ptr
    %339 = load i32, ptr %338, align 4
    %340 = lshr i32 %339, 8
    %341 = and i32 %340, 255
    %342 = add i32 %341, 59879
    %343 = trunc i32 %342 to i16
    %344 = sub i16 9050, %343
    %345 = sub i16 %337, %344
    %346 = shl i16 %337, %344
    %347 = lshr i16 %344, %337
    %348 = xor i16 %347, -1
    %349 = or i16 %346, %345
    %350 = xor i16 %346, %347
    %351 = xor i16 %350, %349
    %352 = lshr i16 %350, %349
    %353 = shl i16 %352, %351
    %354 = xor i16 %352, -1
    %355 = xor i16 %352, -1
    %356 = xor i16 %353, %355
    %357 = shl i16 %353, %355
    %358 = shl i16 %354, %355
    %359 = lshr i16 %358, %357
    %360 = sub i16 %358, %356
    %361 = xor i16 %357, -1
    %362 = shl i16 %360, %359
    %363 = add i16 %360, %361
    %364 = xor i16 %362, %363
    %365 = xor i16 %363, %362
    %366 = shl i16 %362, %363
    %367 = add i16 %366, %364
    %368 = xor i16 %366, %365
    %369 = add i16 %368, %367
    %370 = or i16 %368, %367
    %371 = sub i16 %367, %368
    %372 = xor i16 %370, -1
    %373 = xor i16 %371, -1
    %374 = add i16 %373, %372
    %375 = xor i16 %373, %372
    %376 = mul i16 %373, %372
    %377 = sub i16 %376, %374
    %378 = sub i16 %374, %375
    %379 = xor i16 %375, -1
    %380 = xor i16 %378, %379
    %381 = xor i16 %379, %377
    %382 = mul i16 %379, %378
    %383 = lshr i16 %382, %381
    %384 = sub i16 %382, %380
    %385 = mul i16 %381, %380
    %386 = xor i16 %385, %384
    %387 = sub i16 %384, %385
    %388 = add i16 %383, %385
    %389 = shl i16 %387, %386
    %390 = sub i16 %388, %386
    %391 = sub i16 %386, %387
    %392 = lshr i16 %389, %391
    %393 = mul i16 %390, %389
    %394 = xor i16 %390, %391
    %395 = lshr i16 %393, %392
    %396 = shl i16 %393, %394
    %397 = shl i16 %393, %392
    %398 = or i16 %396, %395
    %399 = xor i16 %395, -1
    %400 = xor i16 %395, -1
    %401 = shl i16 %399, %400
    %402 = xor i16 %398, -1
    %403 = add i16 %398, %399
    %404 = shl i16 %403, %401
    %405 = shl i16 %401, %403
    %406 = add i16 %402, %403
    %407 = mul i16 %406, %404
    %408 = shl i16 %406, %405
    %409 = xor i16 %406, %405
    %410 = or i16 %408, %407
    %411 = sub i16 %409, %407
    %412 = sub i16 %408, %409
    %413 = lshr i16 %412, %410
    %414 = shl i16 %411, %410
    %415 = sub i16 %412, %411
    %416 = xor i16 %414, -1
    %417 = xor i16 %413, -1
    %418 = mul i16 %415, %414
    %419 = shl i16 %418, %416
    %420 = lshr i16 %417, %416
    %421 = lshr i16 %418, %417
    %422 = sub i16 %419, %421
    %423 = xor i16 %420, %421
    %424 = mul i16 %422, %423
    %425 = xor i16 %424, 26478
    %426 = ptrtoint ptr %223 to i64
    %427 = add i64 %426, 8
    %428 = inttoptr i64 %427 to ptr
    store i16 %425, ptr %428, align 2
    %429 = inttoptr i64 2147352576 to ptr
    %430 = load i32, ptr %429, align 4
    %431 = lshr i32 %430, 8
    %432 = and i32 %431, 255
    %433 = add i32 %432, 89
    %434 = trunc i32 %433 to i8
    %435 = xor i8 52, %434
    %436 = inttoptr i64 2147352576 to ptr
    %437 = load i32, ptr %436, align 4
    %438 = lshr i32 %437, 8
    %439 = and i32 %438, 255
    %440 = add i32 %439, 220
    %441 = trunc i32 %440 to i8
    %442 = lshr i8 -34, %441
    %443 = inttoptr i64 2147352576 to ptr
    %444 = load i32, ptr %443, align 4
    %445 = lshr i32 %444, 8
    %446 = and i32 %445, 255
    %447 = add i32 %446, 196
    %448 = trunc i32 %447 to i8
    %449 = mul i8 -64, %448
    %450 = xor i8 %449, -1
    %451 = mul i8 %442, %449
    %452 = lshr i8 %435, %449
    %453 = xor i8 %451, %450
    %454 = or i8 %450, %452
    %455 = lshr i8 %452, %451
    %456 = add i8 %455, %454
    %457 = shl i8 %453, %454
    %458 = add i8 %455, %454
    %459 = shl i8 %457, %458
    %460 = or i8 %457, %456
    %461 = sub i8 %460, %459
    %462 = xor i8 %460, %459
    %463 = shl i8 %459, %460
    %464 = xor i8 %463, %462
    %465 = shl i8 %462, %461
    %466 = or i8 %462, %461
    %467 = mul i8 %465, %464
    %468 = or i8 %466, %465
    %469 = xor i8 %465, -1
    %470 = xor i8 %469, -1
    %471 = mul i8 %468, %469
    %472 = shl i8 %469, %468
    %473 = lshr i8 %471, %472
    %474 = lshr i8 %470, %471
    %475 = lshr i8 %474, %473
    %476 = xor i8 %473, %474
    %477 = mul i8 %474, %473
    %478 = xor i8 %475, -1
    %479 = lshr i8 %477, %476
    %480 = xor i8 %477, -1
    %481 = mul i8 %480, %478
    %482 = lshr i8 %480, %479
    %483 = mul i8 %478, %479
    %484 = xor i8 %483, -1
    %485 = or i8 %483, %481
    %486 = or i8 %482, %481
    %487 = or i8 %484, %486
    %488 = mul i8 %485, %486
    %489 = xor i8 %484, %485
    %490 = xor i8 %488, %487
    %491 = or i8 %489, %488
    %492 = sub i8 %488, %487
    %493 = xor i8 %491, %492
    %494 = xor i8 %490, -1
    %495 = xor i8 %490, %492
    %496 = sub i8 %494, %495
    %497 = add i8 %495, %493
    %498 = or i8 %495, %493
    %499 = xor i8 %498, %496
    %500 = xor i8 %497, %496
    %501 = add i8 %496, %498
    %502 = shl i8 %499, %501
    %503 = or i8 %500, %501
    %504 = mul i8 %499, %500
    %505 = xor i8 %504, -1
    %506 = xor i8 %502, %503
    %507 = mul i8 %502, %504
    %508 = or i8 %506, %505
    %509 = xor i8 %507, %505
    %510 = sub i8 %507, %506
    %511 = add i8 %509, %510
    %512 = xor i8 %509, %510
    %513 = sub i8 %508, %510
    %514 = add i8 %511, %513
    %515 = shl i8 %512, %511
    %516 = add i8 %512, %511
    %517 = or i8 %514, %516
    %518 = mul i8 %514, %516
    %519 = or i8 %515, %514
    %520 = shl i8 %517, %519
    %521 = shl i8 %519, %517
    %522 = lshr i8 %518, %517
    %523 = xor i8 %521, -1
    %524 = lshr i8 %521, %522
    %525 = shl i8 %521, %520
    %526 = or i8 %525, %524
    %527 = lshr i8 %524, %523
    %528 = shl i8 %524, %525
    %529 = xor i8 %528, %526
    %530 = mul i8 %528, %526
    %531 = sub i8 %529, %530
    %532 = xor i8 %531, 0
    %533 = ptrtoint ptr %223 to i64
    %534 = add i64 %533, 10
    %535 = inttoptr i64 %534 to ptr
    store i8 %532, ptr %535, align 1
    %536 = bitcast ptr %223 to ptr
    store ptr %536, ptr %222, align 8
    %537 = getelementptr inbounds %struct.StringContainer, ptr %1, i32 0, i32 1
    %538 = load ptr, ptr %537, align 8
    store ptr %538, ptr %3, align 8
    %539 = getelementptr inbounds %struct.StringContainer, ptr %2, i32 0, i32 1
    %540 = load ptr, ptr %539, align 8
    store ptr %540, ptr %4, align 8
    %541 = load ptr, ptr %3, align 8
    %542 = call i32 (ptr, ...) @printf(ptr noundef @.str.4, ptr noundef %541)
    %543 = load ptr, ptr %4, align 8
    %544 = call i32 (ptr, ...) @printf(ptr noundef @.str.4, ptr noundef %543)
    %545 = call noundef ptr @_Z11str_printerv()
    %546 = getelementptr i8, ptr @.str.4, i32 1193046
    %547 = inttoptr i64 2147352576 to ptr
    %548 = load i32, ptr %547, align 4
    %549 = lshr i32 %548, 8
    %550 = and i32 %549, 255
    %551 = add i32 %550, 1048576
    %552 = add i32 -1802281087, %551
    %553 = inttoptr i64 2147352576 to ptr
    %554 = load i32, ptr %553, align 4
    %555 = lshr i32 %554, 8
    %556 = and i32 %555, 255
    %557 = add i32 %556, 16777215
    %558 = mul i32 1189901775, %557
    %559 = xor i32 %552, %558
    %560 = xor i32 %558, %552
    %561 = xor i32 %560, -1
    %562 = lshr i32 %560, %559
    %563 = shl i32 %561, %562
    %564 = mul i32 %561, %562
    %565 = xor i32 %564, %563
    %566 = add i32 %565, 482544135
    %567 = ptrtoint ptr %546 to i64
    %568 = zext i32 %566 to i64
    %569 = sub i64 %567, %568
    %570 = inttoptr i64 %569 to ptr
    %571 = call i32 (ptr, ...) @printf(ptr noundef %570, ptr noundef %545)
    ret i32 0
  }
  
  attributes #0 = { mustprogress noinline optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #2 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #3 = { mustprogress noinline norecurse optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 2}
  !5 = !{!"Ubuntu clang version 18.1.3 (1ubuntu1)"}

...
---
name:            _Z11str_printerv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr16, preferred-register: '' }
  - { id: 3, class: gr16, preferred-register: '' }
  - { id: 4, class: gr16, preferred-register: '' }
  - { id: 5, class: gr16, preferred-register: '' }
  - { id: 6, class: gr16, preferred-register: '' }
  - { id: 7, class: gr16, preferred-register: '' }
  - { id: 8, class: gr16, preferred-register: '' }
  - { id: 9, class: gr16, preferred-register: '' }
  - { id: 10, class: gr16, preferred-register: '' }
  - { id: 11, class: gr16, preferred-register: '' }
  - { id: 12, class: gr16, preferred-register: '' }
  - { id: 13, class: gr16, preferred-register: '' }
  - { id: 14, class: gr16, preferred-register: '' }
  - { id: 15, class: gr16, preferred-register: '' }
  - { id: 16, class: gr16, preferred-register: '' }
  - { id: 17, class: gr16, preferred-register: '' }
  - { id: 18, class: gr16, preferred-register: '' }
  - { id: 19, class: gr16, preferred-register: '' }
  - { id: 20, class: gr16, preferred-register: '' }
  - { id: 21, class: gr16, preferred-register: '' }
  - { id: 22, class: gr16, preferred-register: '' }
  - { id: 23, class: gr16, preferred-register: '' }
  - { id: 24, class: gr16, preferred-register: '' }
  - { id: 25, class: gr16, preferred-register: '' }
  - { id: 26, class: gr16, preferred-register: '' }
  - { id: 27, class: gr16, preferred-register: '' }
  - { id: 28, class: gr16, preferred-register: '' }
  - { id: 29, class: gr16, preferred-register: '' }
  - { id: 30, class: gr16, preferred-register: '' }
  - { id: 31, class: gr16, preferred-register: '' }
  - { id: 32, class: gr16, preferred-register: '' }
  - { id: 33, class: gr16, preferred-register: '' }
  - { id: 34, class: gr16, preferred-register: '' }
  - { id: 35, class: gr16, preferred-register: '' }
  - { id: 36, class: gr16, preferred-register: '' }
  - { id: 37, class: gr16, preferred-register: '' }
  - { id: 38, class: gr16, preferred-register: '' }
  - { id: 39, class: gr16, preferred-register: '' }
  - { id: 40, class: gr16, preferred-register: '' }
  - { id: 41, class: gr16, preferred-register: '' }
  - { id: 42, class: gr16, preferred-register: '' }
  - { id: 43, class: gr16, preferred-register: '' }
  - { id: 44, class: gr16, preferred-register: '' }
  - { id: 45, class: gr16, preferred-register: '' }
  - { id: 46, class: gr16, preferred-register: '' }
  - { id: 47, class: gr16, preferred-register: '' }
  - { id: 48, class: gr16, preferred-register: '' }
  - { id: 49, class: gr16, preferred-register: '' }
  - { id: 50, class: gr16, preferred-register: '' }
  - { id: 51, class: gr16, preferred-register: '' }
  - { id: 52, class: gr16, preferred-register: '' }
  - { id: 53, class: gr16, preferred-register: '' }
  - { id: 54, class: gr16, preferred-register: '' }
  - { id: 55, class: gr16, preferred-register: '' }
  - { id: 56, class: gr16, preferred-register: '' }
  - { id: 57, class: gr16, preferred-register: '' }
  - { id: 58, class: gr16, preferred-register: '' }
  - { id: 59, class: gr16, preferred-register: '' }
  - { id: 60, class: gr16, preferred-register: '' }
  - { id: 61, class: gr16, preferred-register: '' }
  - { id: 62, class: gr16, preferred-register: '' }
  - { id: 63, class: gr16, preferred-register: '' }
  - { id: 64, class: gr16, preferred-register: '' }
  - { id: 65, class: gr16, preferred-register: '' }
  - { id: 66, class: gr16, preferred-register: '' }
  - { id: 67, class: gr16, preferred-register: '' }
  - { id: 68, class: gr16, preferred-register: '' }
  - { id: 69, class: gr16, preferred-register: '' }
  - { id: 70, class: gr16, preferred-register: '' }
  - { id: 71, class: gr16, preferred-register: '' }
  - { id: 72, class: gr16, preferred-register: '' }
  - { id: 73, class: gr16, preferred-register: '' }
  - { id: 74, class: gr16, preferred-register: '' }
  - { id: 75, class: gr16, preferred-register: '' }
  - { id: 76, class: gr16, preferred-register: '' }
  - { id: 77, class: gr16, preferred-register: '' }
  - { id: 78, class: gr16, preferred-register: '' }
  - { id: 79, class: gr16, preferred-register: '' }
  - { id: 80, class: gr16, preferred-register: '' }
  - { id: 81, class: gr16, preferred-register: '' }
  - { id: 82, class: gr16, preferred-register: '' }
  - { id: 83, class: gr16, preferred-register: '' }
  - { id: 84, class: gr16, preferred-register: '' }
  - { id: 85, class: gr16, preferred-register: '' }
  - { id: 86, class: gr16, preferred-register: '' }
  - { id: 87, class: gr16, preferred-register: '' }
  - { id: 88, class: gr16, preferred-register: '' }
  - { id: 89, class: gr16, preferred-register: '' }
  - { id: 90, class: gr16, preferred-register: '' }
  - { id: 91, class: gr16, preferred-register: '' }
  - { id: 92, class: gr16, preferred-register: '' }
  - { id: 93, class: gr16, preferred-register: '' }
  - { id: 94, class: gr16, preferred-register: '' }
  - { id: 95, class: gr16, preferred-register: '' }
  - { id: 96, class: gr16, preferred-register: '' }
  - { id: 97, class: gr16, preferred-register: '' }
  - { id: 98, class: gr16, preferred-register: '' }
  - { id: 99, class: gr16, preferred-register: '' }
  - { id: 100, class: gr16, preferred-register: '' }
  - { id: 101, class: gr16, preferred-register: '' }
  - { id: 102, class: gr16, preferred-register: '' }
  - { id: 103, class: gr16, preferred-register: '' }
  - { id: 104, class: gr16, preferred-register: '' }
  - { id: 105, class: gr16, preferred-register: '' }
  - { id: 106, class: gr16, preferred-register: '' }
  - { id: 107, class: gr16, preferred-register: '' }
  - { id: 108, class: gr16, preferred-register: '' }
  - { id: 109, class: gr16, preferred-register: '' }
  - { id: 110, class: gr16, preferred-register: '' }
  - { id: 111, class: gr16, preferred-register: '' }
  - { id: 112, class: gr16, preferred-register: '' }
  - { id: 113, class: gr16, preferred-register: '' }
  - { id: 114, class: gr16, preferred-register: '' }
  - { id: 115, class: gr16, preferred-register: '' }
  - { id: 116, class: gr16, preferred-register: '' }
  - { id: 117, class: gr16, preferred-register: '' }
  - { id: 118, class: gr16, preferred-register: '' }
  - { id: 119, class: gr16, preferred-register: '' }
  - { id: 120, class: gr16, preferred-register: '' }
  - { id: 121, class: gr16, preferred-register: '' }
  - { id: 122, class: gr16, preferred-register: '' }
  - { id: 123, class: gr16, preferred-register: '' }
  - { id: 124, class: gr16, preferred-register: '' }
  - { id: 125, class: gr16, preferred-register: '' }
  - { id: 126, class: gr16, preferred-register: '' }
  - { id: 127, class: gr16, preferred-register: '' }
  - { id: 128, class: gr16, preferred-register: '' }
  - { id: 129, class: gr16, preferred-register: '' }
  - { id: 130, class: gr16, preferred-register: '' }
  - { id: 131, class: gr16, preferred-register: '' }
  - { id: 132, class: gr16, preferred-register: '' }
  - { id: 133, class: gr16, preferred-register: '' }
  - { id: 134, class: gr16, preferred-register: '' }
  - { id: 135, class: gr16, preferred-register: '' }
  - { id: 136, class: gr16, preferred-register: '' }
  - { id: 137, class: gr16, preferred-register: '' }
  - { id: 138, class: gr16, preferred-register: '' }
  - { id: 139, class: gr16, preferred-register: '' }
  - { id: 140, class: gr16, preferred-register: '' }
  - { id: 141, class: gr16, preferred-register: '' }
  - { id: 142, class: gr16, preferred-register: '' }
  - { id: 143, class: gr16, preferred-register: '' }
  - { id: 144, class: gr16, preferred-register: '' }
  - { id: 145, class: gr16, preferred-register: '' }
  - { id: 146, class: gr16, preferred-register: '' }
  - { id: 147, class: gr16, preferred-register: '' }
  - { id: 148, class: gr16, preferred-register: '' }
  - { id: 149, class: gr16, preferred-register: '' }
  - { id: 150, class: gr16, preferred-register: '' }
  - { id: 151, class: gr16, preferred-register: '' }
  - { id: 152, class: gr16, preferred-register: '' }
  - { id: 153, class: gr16, preferred-register: '' }
  - { id: 154, class: gr16, preferred-register: '' }
  - { id: 155, class: gr16, preferred-register: '' }
  - { id: 156, class: gr16, preferred-register: '' }
  - { id: 157, class: gr16, preferred-register: '' }
  - { id: 158, class: gr16, preferred-register: '' }
  - { id: 159, class: gr16, preferred-register: '' }
  - { id: 160, class: gr16, preferred-register: '' }
  - { id: 161, class: gr16, preferred-register: '' }
  - { id: 162, class: gr16, preferred-register: '' }
  - { id: 163, class: gr16, preferred-register: '' }
  - { id: 164, class: gr16, preferred-register: '' }
  - { id: 165, class: gr32, preferred-register: '' }
  - { id: 166, class: gr16, preferred-register: '' }
  - { id: 167, class: gr32, preferred-register: '' }
  - { id: 168, class: gr32, preferred-register: '' }
  - { id: 169, class: gr32, preferred-register: '' }
  - { id: 170, class: gr32, preferred-register: '' }
  - { id: 171, class: gr32, preferred-register: '' }
  - { id: 172, class: gr32, preferred-register: '' }
  - { id: 173, class: gr64, preferred-register: '' }
  - { id: 174, class: gr64, preferred-register: '' }
  - { id: 175, class: gr32, preferred-register: '' }
  - { id: 176, class: gr16, preferred-register: '' }
  - { id: 177, class: gr16, preferred-register: '' }
  - { id: 178, class: gr32, preferred-register: '' }
  - { id: 179, class: gr16, preferred-register: '' }
  - { id: 180, class: gr32, preferred-register: '' }
  - { id: 181, class: gr32, preferred-register: '' }
  - { id: 182, class: gr32, preferred-register: '' }
  - { id: 183, class: gr32, preferred-register: '' }
  - { id: 184, class: gr32, preferred-register: '' }
  - { id: 185, class: gr32, preferred-register: '' }
  - { id: 186, class: gr64, preferred-register: '' }
  - { id: 187, class: gr64, preferred-register: '' }
  - { id: 188, class: gr32, preferred-register: '' }
  - { id: 189, class: gr16, preferred-register: '' }
  - { id: 190, class: gr16, preferred-register: '' }
  - { id: 191, class: gr32, preferred-register: '' }
  - { id: 192, class: gr16, preferred-register: '' }
  - { id: 193, class: gr32, preferred-register: '' }
  - { id: 194, class: gr32, preferred-register: '' }
  - { id: 195, class: gr32, preferred-register: '' }
  - { id: 196, class: gr32, preferred-register: '' }
  - { id: 197, class: gr32, preferred-register: '' }
  - { id: 198, class: gr32, preferred-register: '' }
  - { id: 199, class: gr64, preferred-register: '' }
  - { id: 200, class: gr64, preferred-register: '' }
  - { id: 201, class: gr32, preferred-register: '' }
  - { id: 202, class: gr64, preferred-register: '' }
  - { id: 203, class: gr64, preferred-register: '' }
  - { id: 204, class: gr64, preferred-register: '' }
  - { id: 205, class: gr64, preferred-register: '' }
  - { id: 206, class: gr64, preferred-register: '' }
  - { id: 207, class: gr64, preferred-register: '' }
  - { id: 208, class: gr64, preferred-register: '' }
  - { id: 209, class: gr64, preferred-register: '' }
  - { id: 210, class: gr64, preferred-register: '' }
  - { id: 211, class: gr64, preferred-register: '' }
  - { id: 212, class: gr64, preferred-register: '' }
  - { id: 213, class: gr64, preferred-register: '' }
  - { id: 214, class: gr64, preferred-register: '' }
  - { id: 215, class: gr64, preferred-register: '' }
  - { id: 216, class: gr64, preferred-register: '' }
  - { id: 217, class: gr64, preferred-register: '' }
  - { id: 218, class: gr64, preferred-register: '' }
  - { id: 219, class: gr64, preferred-register: '' }
  - { id: 220, class: gr64, preferred-register: '' }
  - { id: 221, class: gr64, preferred-register: '' }
  - { id: 222, class: gr64, preferred-register: '' }
  - { id: 223, class: gr64, preferred-register: '' }
  - { id: 224, class: gr64, preferred-register: '' }
  - { id: 225, class: gr64, preferred-register: '' }
  - { id: 226, class: gr64, preferred-register: '' }
  - { id: 227, class: gr64, preferred-register: '' }
  - { id: 228, class: gr64, preferred-register: '' }
  - { id: 229, class: gr64, preferred-register: '' }
  - { id: 230, class: gr64, preferred-register: '' }
  - { id: 231, class: gr64, preferred-register: '' }
  - { id: 232, class: gr64, preferred-register: '' }
  - { id: 233, class: gr64, preferred-register: '' }
  - { id: 234, class: gr64, preferred-register: '' }
  - { id: 235, class: gr64, preferred-register: '' }
  - { id: 236, class: gr64, preferred-register: '' }
  - { id: 237, class: gr64, preferred-register: '' }
  - { id: 238, class: gr64, preferred-register: '' }
  - { id: 239, class: gr64, preferred-register: '' }
  - { id: 240, class: gr64, preferred-register: '' }
  - { id: 241, class: gr64, preferred-register: '' }
  - { id: 242, class: gr64, preferred-register: '' }
  - { id: 243, class: gr64, preferred-register: '' }
  - { id: 244, class: gr64, preferred-register: '' }
  - { id: 245, class: gr64, preferred-register: '' }
  - { id: 246, class: gr64, preferred-register: '' }
  - { id: 247, class: gr64, preferred-register: '' }
  - { id: 248, class: gr64, preferred-register: '' }
  - { id: 249, class: gr64, preferred-register: '' }
  - { id: 250, class: gr64, preferred-register: '' }
  - { id: 251, class: gr64, preferred-register: '' }
  - { id: 252, class: gr64, preferred-register: '' }
  - { id: 253, class: gr64, preferred-register: '' }
  - { id: 254, class: gr64, preferred-register: '' }
  - { id: 255, class: gr64, preferred-register: '' }
  - { id: 256, class: gr64, preferred-register: '' }
  - { id: 257, class: gr64, preferred-register: '' }
  - { id: 258, class: gr64, preferred-register: '' }
  - { id: 259, class: gr64, preferred-register: '' }
  - { id: 260, class: gr64, preferred-register: '' }
  - { id: 261, class: gr64, preferred-register: '' }
  - { id: 262, class: gr64, preferred-register: '' }
  - { id: 263, class: gr64, preferred-register: '' }
  - { id: 264, class: gr64, preferred-register: '' }
  - { id: 265, class: gr64, preferred-register: '' }
  - { id: 266, class: gr64, preferred-register: '' }
  - { id: 267, class: gr64, preferred-register: '' }
  - { id: 268, class: gr64, preferred-register: '' }
  - { id: 269, class: gr64, preferred-register: '' }
  - { id: 270, class: gr64, preferred-register: '' }
  - { id: 271, class: gr64, preferred-register: '' }
  - { id: 272, class: gr64, preferred-register: '' }
  - { id: 273, class: gr64, preferred-register: '' }
  - { id: 274, class: gr64, preferred-register: '' }
  - { id: 275, class: gr64, preferred-register: '' }
  - { id: 276, class: gr64, preferred-register: '' }
  - { id: 277, class: gr64, preferred-register: '' }
  - { id: 278, class: gr64, preferred-register: '' }
  - { id: 279, class: gr64, preferred-register: '' }
  - { id: 280, class: gr64, preferred-register: '' }
  - { id: 281, class: gr64, preferred-register: '' }
  - { id: 282, class: gr64, preferred-register: '' }
  - { id: 283, class: gr64, preferred-register: '' }
  - { id: 284, class: gr64, preferred-register: '' }
  - { id: 285, class: gr64, preferred-register: '' }
  - { id: 286, class: gr64, preferred-register: '' }
  - { id: 287, class: gr64, preferred-register: '' }
  - { id: 288, class: gr64, preferred-register: '' }
  - { id: 289, class: gr64, preferred-register: '' }
  - { id: 290, class: gr64, preferred-register: '' }
  - { id: 291, class: gr64, preferred-register: '' }
  - { id: 292, class: gr64, preferred-register: '' }
  - { id: 293, class: gr64, preferred-register: '' }
  - { id: 294, class: gr64, preferred-register: '' }
  - { id: 295, class: gr64, preferred-register: '' }
  - { id: 296, class: gr64, preferred-register: '' }
  - { id: 297, class: gr64, preferred-register: '' }
  - { id: 298, class: gr64, preferred-register: '' }
  - { id: 299, class: gr64, preferred-register: '' }
  - { id: 300, class: gr64, preferred-register: '' }
  - { id: 301, class: gr64, preferred-register: '' }
  - { id: 302, class: gr64, preferred-register: '' }
  - { id: 303, class: gr64, preferred-register: '' }
  - { id: 304, class: gr64, preferred-register: '' }
  - { id: 305, class: gr64, preferred-register: '' }
  - { id: 306, class: gr64, preferred-register: '' }
  - { id: 307, class: gr64, preferred-register: '' }
  - { id: 308, class: gr64, preferred-register: '' }
  - { id: 309, class: gr64, preferred-register: '' }
  - { id: 310, class: gr64, preferred-register: '' }
  - { id: 311, class: gr64, preferred-register: '' }
  - { id: 312, class: gr64, preferred-register: '' }
  - { id: 313, class: gr64, preferred-register: '' }
  - { id: 314, class: gr64, preferred-register: '' }
  - { id: 315, class: gr64, preferred-register: '' }
  - { id: 316, class: gr64, preferred-register: '' }
  - { id: 317, class: gr64, preferred-register: '' }
  - { id: 318, class: gr64, preferred-register: '' }
  - { id: 319, class: gr64, preferred-register: '' }
  - { id: 320, class: gr64, preferred-register: '' }
  - { id: 321, class: gr64, preferred-register: '' }
  - { id: 322, class: gr64, preferred-register: '' }
  - { id: 323, class: gr64, preferred-register: '' }
  - { id: 324, class: gr64, preferred-register: '' }
  - { id: 325, class: gr64, preferred-register: '' }
  - { id: 326, class: gr64, preferred-register: '' }
  - { id: 327, class: gr64, preferred-register: '' }
  - { id: 328, class: gr64, preferred-register: '' }
  - { id: 329, class: gr64, preferred-register: '' }
  - { id: 330, class: gr64, preferred-register: '' }
  - { id: 331, class: gr64, preferred-register: '' }
  - { id: 332, class: gr64, preferred-register: '' }
  - { id: 333, class: gr64, preferred-register: '' }
  - { id: 334, class: gr64, preferred-register: '' }
  - { id: 335, class: gr64, preferred-register: '' }
  - { id: 336, class: gr64, preferred-register: '' }
  - { id: 337, class: gr64, preferred-register: '' }
  - { id: 338, class: gr64, preferred-register: '' }
  - { id: 339, class: gr64, preferred-register: '' }
  - { id: 340, class: gr64, preferred-register: '' }
  - { id: 341, class: gr64, preferred-register: '' }
  - { id: 342, class: gr64, preferred-register: '' }
  - { id: 343, class: gr64, preferred-register: '' }
  - { id: 344, class: gr64, preferred-register: '' }
  - { id: 345, class: gr64, preferred-register: '' }
  - { id: 346, class: gr64, preferred-register: '' }
  - { id: 347, class: gr64, preferred-register: '' }
  - { id: 348, class: gr64, preferred-register: '' }
  - { id: 349, class: gr64, preferred-register: '' }
  - { id: 350, class: gr64, preferred-register: '' }
  - { id: 351, class: gr64, preferred-register: '' }
  - { id: 352, class: gr64, preferred-register: '' }
  - { id: 353, class: gr64, preferred-register: '' }
  - { id: 354, class: gr64, preferred-register: '' }
  - { id: 355, class: gr64, preferred-register: '' }
  - { id: 356, class: gr64, preferred-register: '' }
  - { id: 357, class: gr64, preferred-register: '' }
  - { id: 358, class: gr64, preferred-register: '' }
  - { id: 359, class: gr64, preferred-register: '' }
  - { id: 360, class: gr64, preferred-register: '' }
  - { id: 361, class: gr64, preferred-register: '' }
  - { id: 362, class: gr64, preferred-register: '' }
  - { id: 363, class: gr64, preferred-register: '' }
  - { id: 364, class: gr64, preferred-register: '' }
  - { id: 365, class: gr64, preferred-register: '' }
  - { id: 366, class: gr64, preferred-register: '' }
  - { id: 367, class: gr64, preferred-register: '' }
  - { id: 368, class: gr64, preferred-register: '' }
  - { id: 369, class: gr64, preferred-register: '' }
  - { id: 370, class: gr64, preferred-register: '' }
  - { id: 371, class: gr64, preferred-register: '' }
  - { id: 372, class: gr64, preferred-register: '' }
  - { id: 373, class: gr64, preferred-register: '' }
  - { id: 374, class: gr64, preferred-register: '' }
  - { id: 375, class: gr64, preferred-register: '' }
  - { id: 376, class: gr64, preferred-register: '' }
  - { id: 377, class: gr64, preferred-register: '' }
  - { id: 378, class: gr32, preferred-register: '' }
  - { id: 379, class: gr32, preferred-register: '' }
  - { id: 380, class: gr64, preferred-register: '' }
  - { id: 381, class: gr32, preferred-register: '' }
  - { id: 382, class: gr32, preferred-register: '' }
  - { id: 383, class: gr32, preferred-register: '' }
  - { id: 384, class: gr32, preferred-register: '' }
  - { id: 385, class: gr64, preferred-register: '' }
  - { id: 386, class: gr64, preferred-register: '' }
  - { id: 387, class: gr32, preferred-register: '' }
  - { id: 388, class: gr64, preferred-register: '' }
  - { id: 389, class: gr64, preferred-register: '' }
  - { id: 390, class: gr64, preferred-register: '' }
  - { id: 391, class: gr64, preferred-register: '' }
  - { id: 392, class: gr64, preferred-register: '' }
  - { id: 393, class: gr64, preferred-register: '' }
  - { id: 394, class: gr32, preferred-register: '' }
  - { id: 395, class: gr32, preferred-register: '' }
  - { id: 396, class: gr64, preferred-register: '' }
  - { id: 397, class: gr32, preferred-register: '' }
  - { id: 398, class: gr32, preferred-register: '' }
  - { id: 399, class: gr32, preferred-register: '' }
  - { id: 400, class: gr32, preferred-register: '' }
  - { id: 401, class: gr64, preferred-register: '' }
  - { id: 402, class: gr64, preferred-register: '' }
  - { id: 403, class: gr32, preferred-register: '' }
  - { id: 404, class: gr64, preferred-register: '' }
  - { id: 405, class: gr64, preferred-register: '' }
  - { id: 406, class: gr64, preferred-register: '' }
  - { id: 407, class: gr64, preferred-register: '' }
  - { id: 408, class: gr64, preferred-register: '' }
  - { id: 409, class: gr64, preferred-register: '' }
  - { id: 410, class: gr32, preferred-register: '' }
  - { id: 411, class: gr32, preferred-register: '' }
  - { id: 412, class: gr64, preferred-register: '' }
  - { id: 413, class: gr32, preferred-register: '' }
  - { id: 414, class: gr32, preferred-register: '' }
  - { id: 415, class: gr32, preferred-register: '' }
  - { id: 416, class: gr32, preferred-register: '' }
  - { id: 417, class: gr64, preferred-register: '' }
  - { id: 418, class: gr64, preferred-register: '' }
  - { id: 419, class: gr32, preferred-register: '' }
  - { id: 420, class: gr64, preferred-register: '' }
  - { id: 421, class: gr64, preferred-register: '' }
  - { id: 422, class: gr64, preferred-register: '' }
  - { id: 423, class: gr64, preferred-register: '' }
  - { id: 424, class: gr64, preferred-register: '' }
  - { id: 425, class: gr64, preferred-register: '' }
  - { id: 426, class: gr64, preferred-register: '' }
  - { id: 427, class: gr64, preferred-register: '' }
  - { id: 428, class: gr64, preferred-register: '' }
  - { id: 429, class: gr64, preferred-register: '' }
  - { id: 430, class: gr64, preferred-register: '' }
  - { id: 431, class: gr64, preferred-register: '' }
  - { id: 432, class: gr64, preferred-register: '' }
  - { id: 433, class: gr64, preferred-register: '' }
  - { id: 434, class: gr64, preferred-register: '' }
  - { id: 435, class: gr64, preferred-register: '' }
  - { id: 436, class: gr64, preferred-register: '' }
  - { id: 437, class: gr64, preferred-register: '' }
  - { id: 438, class: gr64, preferred-register: '' }
  - { id: 439, class: gr64, preferred-register: '' }
  - { id: 440, class: gr64, preferred-register: '' }
  - { id: 441, class: gr64, preferred-register: '' }
  - { id: 442, class: gr64, preferred-register: '' }
  - { id: 443, class: gr64, preferred-register: '' }
  - { id: 444, class: gr64, preferred-register: '' }
  - { id: 445, class: gr64, preferred-register: '' }
  - { id: 446, class: gr64, preferred-register: '' }
  - { id: 447, class: gr64, preferred-register: '' }
  - { id: 448, class: gr64, preferred-register: '' }
  - { id: 449, class: gr64, preferred-register: '' }
  - { id: 450, class: gr64, preferred-register: '' }
  - { id: 451, class: gr64, preferred-register: '' }
  - { id: 452, class: gr64, preferred-register: '' }
  - { id: 453, class: gr64, preferred-register: '' }
  - { id: 454, class: gr64, preferred-register: '' }
  - { id: 455, class: gr64, preferred-register: '' }
  - { id: 456, class: gr64, preferred-register: '' }
  - { id: 457, class: gr64, preferred-register: '' }
  - { id: 458, class: gr64, preferred-register: '' }
  - { id: 459, class: gr64, preferred-register: '' }
  - { id: 460, class: gr64, preferred-register: '' }
  - { id: 461, class: gr64, preferred-register: '' }
  - { id: 462, class: gr64, preferred-register: '' }
  - { id: 463, class: gr64, preferred-register: '' }
  - { id: 464, class: gr64, preferred-register: '' }
  - { id: 465, class: gr64, preferred-register: '' }
  - { id: 466, class: gr64, preferred-register: '' }
  - { id: 467, class: gr64, preferred-register: '' }
  - { id: 468, class: gr64, preferred-register: '' }
  - { id: 469, class: gr64, preferred-register: '' }
  - { id: 470, class: gr64, preferred-register: '' }
  - { id: 471, class: gr64, preferred-register: '' }
  - { id: 472, class: gr64, preferred-register: '' }
  - { id: 473, class: gr64, preferred-register: '' }
  - { id: 474, class: gr64, preferred-register: '' }
  - { id: 475, class: gr64, preferred-register: '' }
  - { id: 476, class: gr64, preferred-register: '' }
  - { id: 477, class: gr64, preferred-register: '' }
  - { id: 478, class: gr64, preferred-register: '' }
  - { id: 479, class: gr64, preferred-register: '' }
  - { id: 480, class: gr64, preferred-register: '' }
  - { id: 481, class: gr64, preferred-register: '' }
  - { id: 482, class: gr64, preferred-register: '' }
  - { id: 483, class: gr64, preferred-register: '' }
  - { id: 484, class: gr64, preferred-register: '' }
  - { id: 485, class: gr64, preferred-register: '' }
  - { id: 486, class: gr64, preferred-register: '' }
  - { id: 487, class: gr64, preferred-register: '' }
  - { id: 488, class: gr64, preferred-register: '' }
  - { id: 489, class: gr64, preferred-register: '' }
  - { id: 490, class: gr64, preferred-register: '' }
  - { id: 491, class: gr64, preferred-register: '' }
  - { id: 492, class: gr64, preferred-register: '' }
  - { id: 493, class: gr64, preferred-register: '' }
  - { id: 494, class: gr64, preferred-register: '' }
  - { id: 495, class: gr64, preferred-register: '' }
  - { id: 496, class: gr64, preferred-register: '' }
  - { id: 497, class: gr64, preferred-register: '' }
  - { id: 498, class: gr64, preferred-register: '' }
  - { id: 499, class: gr64, preferred-register: '' }
  - { id: 500, class: gr64, preferred-register: '' }
  - { id: 501, class: gr64, preferred-register: '' }
  - { id: 502, class: gr64, preferred-register: '' }
  - { id: 503, class: gr64, preferred-register: '' }
  - { id: 504, class: gr64, preferred-register: '' }
  - { id: 505, class: gr64, preferred-register: '' }
  - { id: 506, class: gr64, preferred-register: '' }
  - { id: 507, class: gr64, preferred-register: '' }
  - { id: 508, class: gr64, preferred-register: '' }
  - { id: 509, class: gr64, preferred-register: '' }
  - { id: 510, class: gr64, preferred-register: '' }
  - { id: 511, class: gr64, preferred-register: '' }
  - { id: 512, class: gr64, preferred-register: '' }
  - { id: 513, class: gr64, preferred-register: '' }
  - { id: 514, class: gr64, preferred-register: '' }
  - { id: 515, class: gr64, preferred-register: '' }
  - { id: 516, class: gr64, preferred-register: '' }
  - { id: 517, class: gr64, preferred-register: '' }
  - { id: 518, class: gr64, preferred-register: '' }
  - { id: 519, class: gr64, preferred-register: '' }
  - { id: 520, class: gr64, preferred-register: '' }
  - { id: 521, class: gr64, preferred-register: '' }
  - { id: 522, class: gr64, preferred-register: '' }
  - { id: 523, class: gr64, preferred-register: '' }
  - { id: 524, class: gr64, preferred-register: '' }
  - { id: 525, class: gr64, preferred-register: '' }
  - { id: 526, class: gr64, preferred-register: '' }
  - { id: 527, class: gr64, preferred-register: '' }
  - { id: 528, class: gr64, preferred-register: '' }
  - { id: 529, class: gr64, preferred-register: '' }
  - { id: 530, class: gr64, preferred-register: '' }
  - { id: 531, class: gr64, preferred-register: '' }
  - { id: 532, class: gr64, preferred-register: '' }
  - { id: 533, class: gr64, preferred-register: '' }
  - { id: 534, class: gr64, preferred-register: '' }
  - { id: 535, class: gr64, preferred-register: '' }
  - { id: 536, class: gr64, preferred-register: '' }
  - { id: 537, class: gr64, preferred-register: '' }
  - { id: 538, class: gr64, preferred-register: '' }
  - { id: 539, class: gr64, preferred-register: '' }
  - { id: 540, class: gr64, preferred-register: '' }
  - { id: 541, class: gr64, preferred-register: '' }
  - { id: 542, class: gr64, preferred-register: '' }
  - { id: 543, class: gr64, preferred-register: '' }
  - { id: 544, class: gr64, preferred-register: '' }
  - { id: 545, class: gr64, preferred-register: '' }
  - { id: 546, class: gr64, preferred-register: '' }
  - { id: 547, class: gr64, preferred-register: '' }
  - { id: 548, class: gr64, preferred-register: '' }
  - { id: 549, class: gr64, preferred-register: '' }
  - { id: 550, class: gr64, preferred-register: '' }
  - { id: 551, class: gr64, preferred-register: '' }
  - { id: 552, class: gr64, preferred-register: '' }
  - { id: 553, class: gr64, preferred-register: '' }
  - { id: 554, class: gr64, preferred-register: '' }
  - { id: 555, class: gr64, preferred-register: '' }
  - { id: 556, class: gr64, preferred-register: '' }
  - { id: 557, class: gr64, preferred-register: '' }
  - { id: 558, class: gr64, preferred-register: '' }
  - { id: 559, class: gr64, preferred-register: '' }
  - { id: 560, class: gr64, preferred-register: '' }
  - { id: 561, class: gr64, preferred-register: '' }
  - { id: 562, class: gr64, preferred-register: '' }
  - { id: 563, class: gr64, preferred-register: '' }
  - { id: 564, class: gr64, preferred-register: '' }
  - { id: 565, class: gr64, preferred-register: '' }
  - { id: 566, class: gr64, preferred-register: '' }
  - { id: 567, class: gr64, preferred-register: '' }
  - { id: 568, class: gr64, preferred-register: '' }
  - { id: 569, class: gr64, preferred-register: '' }
  - { id: 570, class: gr64, preferred-register: '' }
  - { id: 571, class: gr64, preferred-register: '' }
  - { id: 572, class: gr64, preferred-register: '' }
  - { id: 573, class: gr64, preferred-register: '' }
  - { id: 574, class: gr64, preferred-register: '' }
  - { id: 575, class: gr64, preferred-register: '' }
  - { id: 576, class: gr64, preferred-register: '' }
  - { id: 577, class: gr64, preferred-register: '' }
  - { id: 578, class: gr64, preferred-register: '' }
  - { id: 579, class: gr64, preferred-register: '' }
  - { id: 580, class: gr64, preferred-register: '' }
  - { id: 581, class: gr64, preferred-register: '' }
  - { id: 582, class: gr64, preferred-register: '' }
  - { id: 583, class: gr64, preferred-register: '' }
  - { id: 584, class: gr64, preferred-register: '' }
  - { id: 585, class: gr64, preferred-register: '' }
  - { id: 586, class: gr32, preferred-register: '' }
  - { id: 587, class: gr32, preferred-register: '' }
  - { id: 588, class: gr64, preferred-register: '' }
  - { id: 589, class: gr32, preferred-register: '' }
  - { id: 590, class: gr32, preferred-register: '' }
  - { id: 591, class: gr32, preferred-register: '' }
  - { id: 592, class: gr32, preferred-register: '' }
  - { id: 593, class: gr64, preferred-register: '' }
  - { id: 594, class: gr64, preferred-register: '' }
  - { id: 595, class: gr32, preferred-register: '' }
  - { id: 596, class: gr64, preferred-register: '' }
  - { id: 597, class: gr64, preferred-register: '' }
  - { id: 598, class: gr64, preferred-register: '' }
  - { id: 599, class: gr64, preferred-register: '' }
  - { id: 600, class: gr64, preferred-register: '' }
  - { id: 601, class: gr64, preferred-register: '' }
  - { id: 602, class: gr32, preferred-register: '' }
  - { id: 603, class: gr32, preferred-register: '' }
  - { id: 604, class: gr64, preferred-register: '' }
  - { id: 605, class: gr32, preferred-register: '' }
  - { id: 606, class: gr32, preferred-register: '' }
  - { id: 607, class: gr32, preferred-register: '' }
  - { id: 608, class: gr32, preferred-register: '' }
  - { id: 609, class: gr64, preferred-register: '' }
  - { id: 610, class: gr64, preferred-register: '' }
  - { id: 611, class: gr32, preferred-register: '' }
  - { id: 612, class: gr64, preferred-register: '' }
  - { id: 613, class: gr64, preferred-register: '' }
  - { id: 614, class: gr64, preferred-register: '' }
  - { id: 615, class: gr64, preferred-register: '' }
  - { id: 616, class: gr64, preferred-register: '' }
  - { id: 617, class: gr64, preferred-register: '' }
  - { id: 618, class: gr32, preferred-register: '' }
  - { id: 619, class: gr32, preferred-register: '' }
  - { id: 620, class: gr64, preferred-register: '' }
  - { id: 621, class: gr32, preferred-register: '' }
  - { id: 622, class: gr32, preferred-register: '' }
  - { id: 623, class: gr32, preferred-register: '' }
  - { id: 624, class: gr32, preferred-register: '' }
  - { id: 625, class: gr64, preferred-register: '' }
  - { id: 626, class: gr64, preferred-register: '' }
  - { id: 627, class: gr32, preferred-register: '' }
  - { id: 628, class: gr64, preferred-register: '' }
  - { id: 629, class: gr64, preferred-register: '' }
  - { id: 630, class: gr64, preferred-register: '' }
  - { id: 631, class: gr64, preferred-register: '' }
  - { id: 632, class: gr64, preferred-register: '' }
  - { id: 633, class: gr64, preferred-register: '' }
  - { id: 634, class: gr64, preferred-register: '' }
  - { id: 635, class: gr64, preferred-register: '' }
  - { id: 636, class: gr64, preferred-register: '' }
  - { id: 637, class: gr64, preferred-register: '' }
  - { id: 638, class: gr64, preferred-register: '' }
  - { id: 639, class: gr64, preferred-register: '' }
  - { id: 640, class: gr64, preferred-register: '' }
  - { id: 641, class: gr64, preferred-register: '' }
  - { id: 642, class: gr64, preferred-register: '' }
  - { id: 643, class: gr64, preferred-register: '' }
  - { id: 644, class: gr64, preferred-register: '' }
  - { id: 645, class: gr64, preferred-register: '' }
  - { id: 646, class: gr64, preferred-register: '' }
  - { id: 647, class: gr64, preferred-register: '' }
  - { id: 648, class: gr64, preferred-register: '' }
  - { id: 649, class: gr64, preferred-register: '' }
  - { id: 650, class: gr64, preferred-register: '' }
  - { id: 651, class: gr64, preferred-register: '' }
  - { id: 652, class: gr64, preferred-register: '' }
  - { id: 653, class: gr64, preferred-register: '' }
  - { id: 654, class: gr64, preferred-register: '' }
  - { id: 655, class: gr64, preferred-register: '' }
  - { id: 656, class: gr64, preferred-register: '' }
  - { id: 657, class: gr64, preferred-register: '' }
  - { id: 658, class: gr64, preferred-register: '' }
  - { id: 659, class: gr64, preferred-register: '' }
  - { id: 660, class: gr64, preferred-register: '' }
  - { id: 661, class: gr64, preferred-register: '' }
  - { id: 662, class: gr64, preferred-register: '' }
  - { id: 663, class: gr64, preferred-register: '' }
  - { id: 664, class: gr64, preferred-register: '' }
  - { id: 665, class: gr64, preferred-register: '' }
  - { id: 666, class: gr64, preferred-register: '' }
  - { id: 667, class: gr64, preferred-register: '' }
  - { id: 668, class: gr64, preferred-register: '' }
  - { id: 669, class: gr64, preferred-register: '' }
  - { id: 670, class: gr64, preferred-register: '' }
  - { id: 671, class: gr64, preferred-register: '' }
  - { id: 672, class: gr64, preferred-register: '' }
  - { id: 673, class: gr64, preferred-register: '' }
  - { id: 674, class: gr64, preferred-register: '' }
  - { id: 675, class: gr64, preferred-register: '' }
  - { id: 676, class: gr64, preferred-register: '' }
  - { id: 677, class: gr64, preferred-register: '' }
  - { id: 678, class: gr64, preferred-register: '' }
  - { id: 679, class: gr64, preferred-register: '' }
  - { id: 680, class: gr64, preferred-register: '' }
  - { id: 681, class: gr64, preferred-register: '' }
  - { id: 682, class: gr64, preferred-register: '' }
  - { id: 683, class: gr64, preferred-register: '' }
  - { id: 684, class: gr64, preferred-register: '' }
  - { id: 685, class: gr64, preferred-register: '' }
  - { id: 686, class: gr64, preferred-register: '' }
  - { id: 687, class: gr64, preferred-register: '' }
  - { id: 688, class: gr64, preferred-register: '' }
  - { id: 689, class: gr64, preferred-register: '' }
  - { id: 690, class: gr64, preferred-register: '' }
  - { id: 691, class: gr64, preferred-register: '' }
  - { id: 692, class: gr64, preferred-register: '' }
  - { id: 693, class: gr64, preferred-register: '' }
  - { id: 694, class: gr64, preferred-register: '' }
  - { id: 695, class: gr64, preferred-register: '' }
  - { id: 696, class: gr64, preferred-register: '' }
  - { id: 697, class: gr64, preferred-register: '' }
  - { id: 698, class: gr64, preferred-register: '' }
  - { id: 699, class: gr64, preferred-register: '' }
  - { id: 700, class: gr64, preferred-register: '' }
  - { id: 701, class: gr64, preferred-register: '' }
  - { id: 702, class: gr64, preferred-register: '' }
  - { id: 703, class: gr64, preferred-register: '' }
  - { id: 704, class: gr64, preferred-register: '' }
  - { id: 705, class: gr64, preferred-register: '' }
  - { id: 706, class: gr64, preferred-register: '' }
  - { id: 707, class: gr64, preferred-register: '' }
  - { id: 708, class: gr64, preferred-register: '' }
  - { id: 709, class: gr64, preferred-register: '' }
  - { id: 710, class: gr64, preferred-register: '' }
  - { id: 711, class: gr64, preferred-register: '' }
  - { id: 712, class: gr64, preferred-register: '' }
  - { id: 713, class: gr64, preferred-register: '' }
  - { id: 714, class: gr64, preferred-register: '' }
  - { id: 715, class: gr64, preferred-register: '' }
  - { id: 716, class: gr64, preferred-register: '' }
  - { id: 717, class: gr64, preferred-register: '' }
  - { id: 718, class: gr64, preferred-register: '' }
  - { id: 719, class: gr64, preferred-register: '' }
  - { id: 720, class: gr64, preferred-register: '' }
  - { id: 721, class: gr64, preferred-register: '' }
  - { id: 722, class: gr64, preferred-register: '' }
  - { id: 723, class: gr64, preferred-register: '' }
  - { id: 724, class: gr64, preferred-register: '' }
  - { id: 725, class: gr64, preferred-register: '' }
  - { id: 726, class: gr64, preferred-register: '' }
  - { id: 727, class: gr64, preferred-register: '' }
  - { id: 728, class: gr64, preferred-register: '' }
  - { id: 729, class: gr64, preferred-register: '' }
  - { id: 730, class: gr64, preferred-register: '' }
  - { id: 731, class: gr64, preferred-register: '' }
  - { id: 732, class: gr64, preferred-register: '' }
  - { id: 733, class: gr64, preferred-register: '' }
  - { id: 734, class: gr64, preferred-register: '' }
  - { id: 735, class: gr64, preferred-register: '' }
  - { id: 736, class: gr64, preferred-register: '' }
  - { id: 737, class: gr64, preferred-register: '' }
  - { id: 738, class: gr64, preferred-register: '' }
  - { id: 739, class: gr64, preferred-register: '' }
  - { id: 740, class: gr64, preferred-register: '' }
  - { id: 741, class: gr64, preferred-register: '' }
  - { id: 742, class: gr64, preferred-register: '' }
  - { id: 743, class: gr64, preferred-register: '' }
  - { id: 744, class: gr64, preferred-register: '' }
  - { id: 745, class: gr64, preferred-register: '' }
  - { id: 746, class: gr64, preferred-register: '' }
  - { id: 747, class: gr64, preferred-register: '' }
  - { id: 748, class: gr64, preferred-register: '' }
  - { id: 749, class: gr64, preferred-register: '' }
  - { id: 750, class: gr64, preferred-register: '' }
  - { id: 751, class: gr64, preferred-register: '' }
  - { id: 752, class: gr64, preferred-register: '' }
  - { id: 753, class: gr64, preferred-register: '' }
  - { id: 754, class: gr64, preferred-register: '' }
  - { id: 755, class: gr64, preferred-register: '' }
  - { id: 756, class: gr64, preferred-register: '' }
  - { id: 757, class: gr64, preferred-register: '' }
  - { id: 758, class: gr64, preferred-register: '' }
  - { id: 759, class: gr64, preferred-register: '' }
  - { id: 760, class: gr64, preferred-register: '' }
  - { id: 761, class: gr64, preferred-register: '' }
  - { id: 762, class: gr64, preferred-register: '' }
  - { id: 763, class: gr64, preferred-register: '' }
  - { id: 764, class: gr64, preferred-register: '' }
  - { id: 765, class: gr64, preferred-register: '' }
  - { id: 766, class: gr64, preferred-register: '' }
  - { id: 767, class: gr64, preferred-register: '' }
  - { id: 768, class: gr64, preferred-register: '' }
  - { id: 769, class: gr64, preferred-register: '' }
  - { id: 770, class: gr64, preferred-register: '' }
  - { id: 771, class: gr64, preferred-register: '' }
  - { id: 772, class: gr64, preferred-register: '' }
  - { id: 773, class: gr64, preferred-register: '' }
  - { id: 774, class: gr64, preferred-register: '' }
  - { id: 775, class: gr64, preferred-register: '' }
  - { id: 776, class: gr64, preferred-register: '' }
  - { id: 777, class: gr64, preferred-register: '' }
  - { id: 778, class: gr64, preferred-register: '' }
  - { id: 779, class: gr64, preferred-register: '' }
  - { id: 780, class: gr64, preferred-register: '' }
  - { id: 781, class: gr64, preferred-register: '' }
  - { id: 782, class: gr64, preferred-register: '' }
  - { id: 783, class: gr64, preferred-register: '' }
  - { id: 784, class: gr64, preferred-register: '' }
  - { id: 785, class: gr64, preferred-register: '' }
  - { id: 786, class: gr64, preferred-register: '' }
  - { id: 787, class: gr32, preferred-register: '' }
  - { id: 788, class: gr32, preferred-register: '' }
  - { id: 789, class: gr64, preferred-register: '' }
  - { id: 790, class: gr32, preferred-register: '' }
  - { id: 791, class: gr32, preferred-register: '' }
  - { id: 792, class: gr32, preferred-register: '' }
  - { id: 793, class: gr32, preferred-register: '' }
  - { id: 794, class: gr64, preferred-register: '' }
  - { id: 795, class: gr64, preferred-register: '' }
  - { id: 796, class: gr32, preferred-register: '' }
  - { id: 797, class: gr64, preferred-register: '' }
  - { id: 798, class: gr64, preferred-register: '' }
  - { id: 799, class: gr64, preferred-register: '' }
  - { id: 800, class: gr64, preferred-register: '' }
  - { id: 801, class: gr64, preferred-register: '' }
  - { id: 802, class: gr64, preferred-register: '' }
  - { id: 803, class: gr32, preferred-register: '' }
  - { id: 804, class: gr32, preferred-register: '' }
  - { id: 805, class: gr64, preferred-register: '' }
  - { id: 806, class: gr32, preferred-register: '' }
  - { id: 807, class: gr32, preferred-register: '' }
  - { id: 808, class: gr32, preferred-register: '' }
  - { id: 809, class: gr32, preferred-register: '' }
  - { id: 810, class: gr64, preferred-register: '' }
  - { id: 811, class: gr64, preferred-register: '' }
  - { id: 812, class: gr32, preferred-register: '' }
  - { id: 813, class: gr64, preferred-register: '' }
  - { id: 814, class: gr32, preferred-register: '' }
  - { id: 815, class: gr64, preferred-register: '' }
  - { id: 816, class: gr64, preferred-register: '' }
  - { id: 817, class: gr64, preferred-register: '' }
  - { id: 818, class: gr64, preferred-register: '' }
  - { id: 819, class: gr32, preferred-register: '' }
  - { id: 820, class: gr32, preferred-register: '' }
  - { id: 821, class: gr64, preferred-register: '' }
  - { id: 822, class: gr64, preferred-register: '' }
  - { id: 823, class: gr32, preferred-register: '' }
  - { id: 824, class: gr32, preferred-register: '' }
  - { id: 825, class: gr32, preferred-register: '' }
  - { id: 826, class: gr32, preferred-register: '' }
  - { id: 827, class: gr32, preferred-register: '' }
  - { id: 828, class: gr32, preferred-register: '' }
  - { id: 829, class: gr32, preferred-register: '' }
  - { id: 830, class: gr32, preferred-register: '' }
  - { id: 831, class: gr32, preferred-register: '' }
  - { id: 832, class: gr32, preferred-register: '' }
  - { id: 833, class: gr32, preferred-register: '' }
  - { id: 834, class: gr32, preferred-register: '' }
  - { id: 835, class: gr32, preferred-register: '' }
  - { id: 836, class: gr32, preferred-register: '' }
  - { id: 837, class: gr32, preferred-register: '' }
  - { id: 838, class: gr32, preferred-register: '' }
  - { id: 839, class: gr32, preferred-register: '' }
  - { id: 840, class: gr32, preferred-register: '' }
  - { id: 841, class: gr32, preferred-register: '' }
  - { id: 842, class: gr32, preferred-register: '' }
  - { id: 843, class: gr32, preferred-register: '' }
  - { id: 844, class: gr32, preferred-register: '' }
  - { id: 845, class: gr32, preferred-register: '' }
  - { id: 846, class: gr32, preferred-register: '' }
  - { id: 847, class: gr32, preferred-register: '' }
  - { id: 848, class: gr32, preferred-register: '' }
  - { id: 849, class: gr64, preferred-register: '' }
  - { id: 850, class: gr64, preferred-register: '' }
  - { id: 851, class: gr32, preferred-register: '' }
  - { id: 852, class: gr32, preferred-register: '' }
  - { id: 853, class: gr32, preferred-register: '' }
  - { id: 854, class: gr32, preferred-register: '' }
  - { id: 855, class: gr32, preferred-register: '' }
  - { id: 856, class: gr32, preferred-register: '' }
  - { id: 857, class: gr32, preferred-register: '' }
  - { id: 858, class: gr32, preferred-register: '' }
  - { id: 859, class: gr32, preferred-register: '' }
  - { id: 860, class: gr64, preferred-register: '' }
  - { id: 861, class: gr64, preferred-register: '' }
  - { id: 862, class: gr32, preferred-register: '' }
  - { id: 863, class: gr64, preferred-register: '' }
  - { id: 864, class: gr64, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 26, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    %863:gr64 = LEA64r $rip, 1, $noreg, @.str, $noreg
    %864:gr64 = ADD64ri32 %863, 1193046, implicit-def $eflags
    %861:gr64 = MOV32ri64 2147352576
    %862:gr32 = MOV32rm %861, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
    %859:gr32 = SHR32ri %862, 8, implicit-def $eflags
    %857:gr32 = AND32ri %859, 255, implicit-def $eflags
    %855:gr32 = ADD32ri %857, 1048576, implicit-def $eflags
    %853:gr32 = IMUL32rri %855, 3984644222, implicit-def $eflags
    %850:gr64 = MOV32ri64 2147352576
    %851:gr32 = MOV32rm %850, 1, $noreg, 0, $noreg :: (load (s32) from %ir.8)
    %848:gr32 = SHR32ri %851, 8, implicit-def $eflags
    %846:gr32 = AND32ri %848, 255, implicit-def $eflags
    %844:gr32 = ADD32ri %846, 16777215, implicit-def $eflags
    %840:gr32 = MOV32ri 3512864774
    $ecx = COPY %844
    $cl = KILL killed $ecx
    %842:gr32 = SHL32rCL %840, implicit-def $eflags, implicit $cl
    %839:gr32 = IMUL32rr %842, %853, implicit-def $eflags
    %838:gr32 = IMUL32rr %853, %842, implicit-def $eflags
    %835:gr32 = OR32rr %838, %839, implicit-def $eflags
    %834:gr32 = XOR32rr %838, %839, implicit-def $eflags
    %831:gr32 = IMUL32rr %834, %835, implicit-def $eflags
    %830:gr32 = ADD32rr %834, %835, implicit-def $eflags
    %827:gr32 = IMUL32rr %830, %831, implicit-def $eflags
    %824:gr32 = ADD32ri %827, 1193046, implicit-def $eflags
    %820:gr32 = MOV32rr %824
    %821:gr64 = SUBREG_TO_REG 0, %820, %subreg.sub_32bit
    %818:gr64 = SUB64rr %864, %821, implicit-def $eflags
    ADJCALLSTACKDOWN64 32, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rcx = COPY %818
    CALL64pcrel32 @printf, csr_win64, implicit $rsp, implicit $ssp, implicit $rcx, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %814:gr32 = COPY $eax
    %811:gr64 = MOV32ri64 2147352576
    %812:gr32 = MOV32rm %811, 1, $noreg, 0, $noreg :: (load (s32) from %ir.35)
    %809:gr32 = SHR32ri %812, 8, implicit-def $eflags
    %807:gr32 = AND32ri %809, 255, implicit-def $eflags
    %804:gr32 = MOV32rr %807
    %805:gr64 = SUBREG_TO_REG 0, %804, %subreg.sub_32bit
    %801:gr64 = MOV64ri 6607870016291804059
    %802:gr64 = ADD64rr %805, %801, implicit-def $eflags
    %797:gr64 = MOV64ri 1989243118387872835
    %799:gr64 = SUB64rr %797, %802, implicit-def $eflags
    %795:gr64 = MOV32ri64 2147352576
    %796:gr32 = MOV32rm %795, 1, $noreg, 0, $noreg :: (load (s32) from %ir.42)
    %793:gr32 = SHR32ri %796, 8, implicit-def $eflags
    %791:gr32 = AND32ri %793, 255, implicit-def $eflags
    %788:gr32 = MOV32rr %791
    %789:gr64 = SUBREG_TO_REG 0, %788, %subreg.sub_32bit
    %785:gr64 = MOV64ri -3584890062199842076
    %786:gr64 = ADD64rr %789, %785, implicit-def $eflags
    %781:gr64 = MOV64ri 3247702691107958268
    $rcx = COPY %786
    $cl = KILL killed $rcx
    %783:gr64 = SHL64rCL %781, implicit-def $eflags, implicit $cl
    %780:gr64 = XOR64ri32 %783, -1, implicit-def $eflags
    %779:gr64 = ADD64rr %783, %799, implicit-def $eflags
    %777:gr64 = XOR64ri32 %799, -1, implicit-def $eflags
    $rcx = COPY %780
    $cl = KILL killed $rcx
    %775:gr64 = SHR64rCL %779, implicit-def $eflags, implicit $cl
    %774:gr64 = IMUL64rr %779, %777, implicit-def $eflags
    $rcx = COPY %780
    $cl = KILL killed $rcx
    %772:gr64 = SHR64rCL %777, implicit-def $eflags, implicit $cl
    %769:gr64 = XOR64ri32 %772, -1, implicit-def $eflags
    %768:gr64 = SUB64rr %775, %774, implicit-def $eflags
    %765:gr64 = XOR64ri32 %772, -1, implicit-def $eflags
    %763:gr64 = XOR64ri32 %769, -1, implicit-def $eflags
    %761:gr64 = ADD64rr %765, %768, implicit-def $eflags
    $rcx = COPY %761
    $cl = KILL killed $rcx
    %758:gr64 = SHR64rCL %763, implicit-def $eflags, implicit $cl
    $rcx = COPY %763
    $cl = KILL killed $rcx
    %757:gr64 = SHR64rCL %761, implicit-def $eflags, implicit $cl
    %755:gr64 = XOR64ri32 %763, -1, implicit-def $eflags
    %753:gr64 = OR64rr %755, %758, implicit-def $eflags
    $rcx = COPY %758
    $cl = KILL killed $rcx
    %752:gr64 = SHL64rCL %755, implicit-def $eflags, implicit $cl
    %750:gr64 = IMUL64rr %758, %757, implicit-def $eflags
    %747:gr64 = OR64rr %753, %752, implicit-def $eflags
    %746:gr64 = OR64rr %753, %750, implicit-def $eflags
    $rcx = COPY %750
    $cl = KILL killed $rcx
    %744:gr64 = SHL64rCL %752, implicit-def $eflags, implicit $cl
    %741:gr64 = SUB64rr %744, %747, implicit-def $eflags
    $rcx = COPY %747
    $cl = KILL killed $rcx
    %739:gr64 = SHR64rCL %746, implicit-def $eflags, implicit $cl
    $rcx = COPY %739
    $cl = KILL killed $rcx
    %736:gr64 = SHR64rCL %741, implicit-def $eflags, implicit $cl
    %735:gr64 = SUB64rr %739, %741, implicit-def $eflags
    %732:gr64 = OR64rr %736, %735, implicit-def $eflags
    %731:gr64 = SUB64rr %735, %736, implicit-def $eflags
    %728:gr64 = OR64rr %731, %732, implicit-def $eflags
    $rcx = COPY %731
    $cl = KILL killed $rcx
    %727:gr64 = SHR64rCL %732, implicit-def $eflags, implicit $cl
    %725:gr64 = XOR64ri32 %732, -1, implicit-def $eflags
    %723:gr64 = XOR64rr %725, %727, implicit-def $eflags
    %722:gr64 = IMUL64rr %725, %727, implicit-def $eflags
    %720:gr64 = ADD64rr %725, %728, implicit-def $eflags
    %717:gr64 = IMUL64rr %723, %722, implicit-def $eflags
    $rcx = COPY %723
    $cl = KILL killed $rcx
    %715:gr64 = SHR64rCL %720, implicit-def $eflags, implicit $cl
    $rcx = COPY %723
    $cl = KILL killed $rcx
    %714:gr64 = SHR64rCL %720, implicit-def $eflags, implicit $cl
    %711:gr64 = OR64rr %714, %715, implicit-def $eflags
    %709:gr64 = SUB64rr %714, %717, implicit-def $eflags
    %707:gr64 = XOR64ri32 %717, -1, implicit-def $eflags
    %705:gr64 = XOR64rr %711, %709, implicit-def $eflags
    $rcx = COPY %707
    $cl = KILL killed $rcx
    %704:gr64 = SHR64rCL %709, implicit-def $eflags, implicit $cl
    %702:gr64 = XOR64rr %711, %707, implicit-def $eflags
    %699:gr64 = OR64rr %702, %705, implicit-def $eflags
    $rcx = COPY %704
    $cl = KILL killed $rcx
    %697:gr64 = SHL64rCL %702, implicit-def $eflags, implicit $cl
    %694:gr64 = ADD64rr %699, %697, implicit-def $eflags
    %693:gr64 = SUB64rr %697, %699, implicit-def $eflags
    $rcx = COPY %693
    $cl = KILL killed $rcx
    %690:gr64 = SHR64rCL %694, implicit-def $eflags, implicit $cl
    %689:gr64 = XOR64rr %694, %693, implicit-def $eflags
    %688:gr64 = OR64rr %694, %693, implicit-def $eflags
    %685:gr64 = IMUL64rr %689, %690, implicit-def $eflags
    $rcx = COPY %689
    $cl = KILL killed $rcx
    %683:gr64 = SHL64rCL %688, implicit-def $eflags, implicit $cl
    %680:gr64 = IMUL64rr %683, %685, implicit-def $eflags
    %679:gr64 = ADD64rr %685, %683, implicit-def $eflags
    %676:gr64 = ADD64rr %680, %679, implicit-def $eflags
    $rcx = COPY %680
    $cl = KILL killed $rcx
    %675:gr64 = SHL64rCL %679, implicit-def $eflags, implicit $cl
    $rcx = COPY %676
    $cl = KILL killed $rcx
    %672:gr64 = SHL64rCL %675, implicit-def $eflags, implicit $cl
    %671:gr64 = SUB64rr %676, %675, implicit-def $eflags
    %670:gr64 = IMUL64rr %676, %675, implicit-def $eflags
    %667:gr64 = ADD64rr %670, %672, implicit-def $eflags
    $rcx = COPY %670
    $cl = KILL killed $rcx
    %665:gr64 = SHR64rCL %671, implicit-def $eflags, implicit $cl
    %662:gr64 = ADD64rr %667, %665, implicit-def $eflags
    $rcx = COPY %667
    $cl = KILL killed $rcx
    %661:gr64 = SHR64rCL %665, implicit-def $eflags, implicit $cl
    $rcx = COPY %665
    $cl = KILL killed $rcx
    %660:gr64 = SHL64rCL %667, implicit-def $eflags, implicit $cl
    %657:gr64 = SUB64rr %661, %660, implicit-def $eflags
    %656:gr64 = SUB64rr %662, %660, implicit-def $eflags
    %654:gr64 = ADD64rr %661, %662, implicit-def $eflags
    %651:gr64 = XOR64rr %654, %657, implicit-def $eflags
    %650:gr64 = XOR64ri32 %654, -1, implicit-def $eflags
    %648:gr64 = ADD64rr %656, %657, implicit-def $eflags
    %645:gr64 = XOR64rr %650, %651, implicit-def $eflags
    %643:gr64 = OR64rr %650, %648, implicit-def $eflags
    %642:gr64 = XOR64rr %650, %648, implicit-def $eflags
    %639:gr64 = OR64rr %645, %643, implicit-def $eflags
    %636:gr64 = XOR64ri32 %642, -1, implicit-def $eflags
    $rcx = COPY %636
    $cl = KILL killed $rcx
    %634:gr64 = SHL64rCL %639, implicit-def $eflags, implicit $cl
    %630:gr64 = MOV64ri -7956016043689931892
    %631:gr64 = XOR64rr %634, %630, implicit-def $eflags
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %631 :: (store (s64) into %ir.129)
    %626:gr64 = MOV32ri64 2147352576
    %627:gr32 = MOV32rm %626, 1, $noreg, 0, $noreg :: (load (s32) from %ir.130)
    %624:gr32 = SHR32ri %627, 8, implicit-def $eflags
    %622:gr32 = AND32ri %624, 255, implicit-def $eflags
    %619:gr32 = MOV32rr %622
    %620:gr64 = SUBREG_TO_REG 0, %619, %subreg.sub_32bit
    %616:gr64 = MOV64ri -3839250753194139507
    %617:gr64 = ADD64rr %620, %616, implicit-def $eflags
    %612:gr64 = MOV64ri 5262334155435938502
    $rcx = COPY %617
    $cl = KILL killed $rcx
    %614:gr64 = SHL64rCL %612, implicit-def $eflags, implicit $cl
    %610:gr64 = MOV32ri64 2147352576
    %611:gr32 = MOV32rm %610, 1, $noreg, 0, $noreg :: (load (s32) from %ir.137)
    %608:gr32 = SHR32ri %611, 8, implicit-def $eflags
    %606:gr32 = AND32ri %608, 255, implicit-def $eflags
    %603:gr32 = MOV32rr %606
    %604:gr64 = SUBREG_TO_REG 0, %603, %subreg.sub_32bit
    %600:gr64 = MOV64ri -2786066528538475506
    %601:gr64 = ADD64rr %604, %600, implicit-def $eflags
    %597:gr64 = MOV64ri -6914162340842475582
    %598:gr64 = XOR64rr %601, %597, implicit-def $eflags
    %594:gr64 = MOV32ri64 2147352576
    %595:gr32 = MOV32rm %594, 1, $noreg, 0, $noreg :: (load (s32) from %ir.144)
    %592:gr32 = SHR32ri %595, 8, implicit-def $eflags
    %590:gr32 = AND32ri %592, 255, implicit-def $eflags
    %587:gr32 = MOV32rr %590
    %588:gr64 = SUBREG_TO_REG 0, %587, %subreg.sub_32bit
    %584:gr64 = MOV64ri 9141901671883109322
    %585:gr64 = ADD64rr %588, %584, implicit-def $eflags
    %581:gr64 = MOV64ri 7185728663751831686
    %582:gr64 = XOR64rr %585, %581, implicit-def $eflags
    %579:gr64 = ADD64rr %614, %598, implicit-def $eflags
    %578:gr64 = OR64rr %614, %582, implicit-def $eflags
    %576:gr64 = ADD64rr %598, %582, implicit-def $eflags
    %573:gr64 = XOR64ri32 %576, -1, implicit-def $eflags
    %572:gr64 = OR64rr %578, %576, implicit-def $eflags
    %570:gr64 = OR64rr %579, %578, implicit-def $eflags
    %567:gr64 = IMUL64rr %570, %572, implicit-def $eflags
    %566:gr64 = ADD64rr %570, %572, implicit-def $eflags
    %564:gr64 = OR64rr %573, %570, implicit-def $eflags
    %561:gr64 = XOR64ri32 %566, -1, implicit-def $eflags
    %560:gr64 = ADD64rr %566, %567, implicit-def $eflags
    $rcx = COPY %564
    $cl = KILL killed $rcx
    %558:gr64 = SHL64rCL %566, implicit-def $eflags, implicit $cl
    %555:gr64 = ADD64rr %558, %561, implicit-def $eflags
    $rcx = COPY %561
    $cl = KILL killed $rcx
    %554:gr64 = SHR64rCL %560, implicit-def $eflags, implicit $cl
    %552:gr64 = OR64rr %560, %558, implicit-def $eflags
    %549:gr64 = XOR64ri32 %554, -1, implicit-def $eflags
    %548:gr64 = SUB64rr %552, %554, implicit-def $eflags
    $rcx = COPY %552
    $cl = KILL killed $rcx
    %546:gr64 = SHL64rCL %555, implicit-def $eflags, implicit $cl
    %543:gr64 = IMUL64rr %548, %546, implicit-def $eflags
    %541:gr64 = ADD64rr %546, %549, implicit-def $eflags
    $rcx = COPY %546
    $cl = KILL killed $rcx
    %540:gr64 = SHL64rCL %549, implicit-def $eflags, implicit $cl
    %537:gr64 = OR64rr %543, %541, implicit-def $eflags
    %536:gr64 = IMUL64rr %543, %540, implicit-def $eflags
    %534:gr64 = XOR64rr %543, %541, implicit-def $eflags
    %531:gr64 = ADD64rr %534, %537, implicit-def $eflags
    %529:gr64 = OR64rr %536, %537, implicit-def $eflags
    %527:gr64 = XOR64ri32 %537, -1, implicit-def $eflags
    %525:gr64 = OR64rr %529, %527, implicit-def $eflags
    %524:gr64 = IMUL64rr %527, %529, implicit-def $eflags
    $rcx = COPY %527
    $cl = KILL killed $rcx
    %522:gr64 = SHR64rCL %531, implicit-def $eflags, implicit $cl
    $rcx = COPY %525
    $cl = KILL killed $rcx
    %519:gr64 = SHR64rCL %524, implicit-def $eflags, implicit $cl
    %517:gr64 = OR64rr %525, %522, implicit-def $eflags
    %514:gr64 = ADD64rr %519, %517, implicit-def $eflags
    %513:gr64 = ADD64rr %517, %519, implicit-def $eflags
    $rcx = COPY %517
    $cl = KILL killed $rcx
    %512:gr64 = SHL64rCL %519, implicit-def $eflags, implicit $cl
    %509:gr64 = ADD64rr %512, %513, implicit-def $eflags
    $rcx = COPY %513
    $cl = KILL killed $rcx
    %507:gr64 = SHL64rCL %514, implicit-def $eflags, implicit $cl
    %504:gr64 = SUB64rr %507, %509, implicit-def $eflags
    %503:gr64 = IMUL64rr %509, %507, implicit-def $eflags
    %500:gr64 = XOR64ri32 %504, -1, implicit-def $eflags
    %499:gr64 = XOR64ri32 %504, -1, implicit-def $eflags
    %498:gr64 = XOR64rr %503, %504, implicit-def $eflags
    %495:gr64 = XOR64rr %499, %500, implicit-def $eflags
    %494:gr64 = OR64rr %500, %499, implicit-def $eflags
    %492:gr64 = ADD64rr %498, %500, implicit-def $eflags
    $rcx = COPY %495
    $cl = KILL killed $rcx
    %489:gr64 = SHR64rCL %492, implicit-def $eflags, implicit $cl
    %488:gr64 = XOR64rr %492, %495, implicit-def $eflags
    %486:gr64 = IMUL64rr %492, %494, implicit-def $eflags
    $rcx = COPY %488
    $cl = KILL killed $rcx
    %483:gr64 = SHL64rCL %489, implicit-def $eflags, implicit $cl
    %482:gr64 = XOR64ri32 %488, -1, implicit-def $eflags
    %480:gr64 = ADD64rr %489, %486, implicit-def $eflags
    %477:gr64 = XOR64rr %480, %483, implicit-def $eflags
    %475:gr64 = SUB64rr %483, %482, implicit-def $eflags
    %473:gr64 = XOR64ri32 %482, -1, implicit-def $eflags
    %471:gr64 = XOR64ri32 %473, -1, implicit-def $eflags
    $rcx = COPY %477
    $cl = KILL killed $rcx
    %469:gr64 = SHR64rCL %475, implicit-def $eflags, implicit $cl
    %467:gr64 = XOR64ri32 %477, -1, implicit-def $eflags
    %465:gr64 = IMUL64rr %471, %469, implicit-def $eflags
    $rcx = COPY %469
    $cl = KILL killed $rcx
    %463:gr64 = SHL64rCL %467, implicit-def $eflags, implicit $cl
    %460:gr64 = XOR64ri32 %465, -1, implicit-def $eflags
    $rcx = COPY %463
    $cl = KILL killed $rcx
    %459:gr64 = SHL64rCL %465, implicit-def $eflags, implicit $cl
    %458:gr64 = OR64rr %465, %463, implicit-def $eflags
    $rcx = COPY %460
    $cl = KILL killed $rcx
    %455:gr64 = SHL64rCL %459, implicit-def $eflags, implicit $cl
    %454:gr64 = XOR64rr %459, %458, implicit-def $eflags
    %452:gr64 = OR64rr %460, %459, implicit-def $eflags
    %449:gr64 = XOR64ri32 %452, -1, implicit-def $eflags
    $rcx = COPY %454
    $cl = KILL killed $rcx
    %448:gr64 = SHL64rCL %452, implicit-def $eflags, implicit $cl
    $rcx = COPY %452
    $cl = KILL killed $rcx
    %446:gr64 = SHL64rCL %455, implicit-def $eflags, implicit $cl
    %443:gr64 = XOR64rr %446, %448, implicit-def $eflags
    $rcx = COPY %448
    $cl = KILL killed $rcx
    %441:gr64 = SHR64rCL %449, implicit-def $eflags, implicit $cl
    %440:gr64 = SUB64rr %448, %449, implicit-def $eflags
    $rcx = COPY %441
    $cl = KILL killed $rcx
    %437:gr64 = SHR64rCL %440, implicit-def $eflags, implicit $cl
    %435:gr64 = ADD64rr %443, %441, implicit-def $eflags
    $rcx = COPY %435
    $cl = KILL killed $rcx
    %432:gr64 = SHR64rCL %437, implicit-def $eflags, implicit $cl
    %430:gr64 = XOR64ri32 %437, -1, implicit-def $eflags
    $rcx = COPY %432
    $cl = KILL killed $rcx
    %428:gr64 = SHR64rCL %430, implicit-def $eflags, implicit $cl
    %425:gr64 = XOR64ri32 %428, -1, implicit-def $eflags
    %422:gr64 = MOV64ri -1412608420481964684
    %423:gr64 = XOR64rr %425, %422, implicit-def $eflags
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, %423 :: (store (s64) into %ir.236)
    %418:gr64 = MOV32ri64 2147352576
    %419:gr32 = MOV32rm %418, 1, $noreg, 0, $noreg :: (load (s32) from %ir.237)
    %416:gr32 = SHR32ri %419, 8, implicit-def $eflags
    %414:gr32 = AND32ri %416, 255, implicit-def $eflags
    %411:gr32 = MOV32rr %414
    %412:gr64 = SUBREG_TO_REG 0, %411, %subreg.sub_32bit
    %408:gr64 = MOV64ri -7148059725910420608
    %409:gr64 = ADD64rr %412, %408, implicit-def $eflags
    %405:gr64 = MOV64ri -8683244575073280178
    %406:gr64 = OR64rr %409, %405, implicit-def $eflags
    %402:gr64 = MOV32ri64 2147352576
    %403:gr32 = MOV32rm %402, 1, $noreg, 0, $noreg :: (load (s32) from %ir.244)
    %400:gr32 = SHR32ri %403, 8, implicit-def $eflags
    %398:gr32 = AND32ri %400, 255, implicit-def $eflags
    %395:gr32 = MOV32rr %398
    %396:gr64 = SUBREG_TO_REG 0, %395, %subreg.sub_32bit
    %392:gr64 = MOV64ri 1244980582329829786
    %393:gr64 = ADD64rr %396, %392, implicit-def $eflags
    %389:gr64 = MOV64ri 6483140857148821400
    %390:gr64 = XOR64rr %393, %389, implicit-def $eflags
    %386:gr64 = MOV32ri64 2147352576
    %387:gr32 = MOV32rm %386, 1, $noreg, 0, $noreg :: (load (s32) from %ir.251)
    %384:gr32 = SHR32ri %387, 8, implicit-def $eflags
    %382:gr32 = AND32ri %384, 255, implicit-def $eflags
    %379:gr32 = MOV32rr %382
    %380:gr64 = SUBREG_TO_REG 0, %379, %subreg.sub_32bit
    %376:gr64 = MOV64ri -8190515476989150261
    %377:gr64 = ADD64rr %380, %376, implicit-def $eflags
    %372:gr64 = MOV64ri 3232377974712179288
    %374:gr64 = SUB64rr %372, %377, implicit-def $eflags
    %371:gr64 = IMUL64rr %374, %390, implicit-def $eflags
    %370:gr64 = SUB64rr %390, %374, implicit-def $eflags
    %368:gr64 = ADD64rr %390, %406, implicit-def $eflags
    $rcx = COPY %371
    $cl = KILL killed $rcx
    %365:gr64 = SHL64rCL %368, implicit-def $eflags, implicit $cl
    %364:gr64 = OR64rr %370, %371, implicit-def $eflags
    $rcx = COPY %371
    $cl = KILL killed $rcx
    %362:gr64 = SHR64rCL %368, implicit-def $eflags, implicit $cl
    %359:gr64 = OR64rr %364, %362, implicit-def $eflags
    %357:gr64 = XOR64rr %365, %362, implicit-def $eflags
    $rcx = COPY %359
    $cl = KILL killed $rcx
    %354:gr64 = SHL64rCL %357, implicit-def $eflags, implicit $cl
    %353:gr64 = ADD64rr %357, %359, implicit-def $eflags
    %351:gr64 = XOR64ri32 %359, -1, implicit-def $eflags
    %349:gr64 = IMUL64rr %351, %354, implicit-def $eflags
    $rcx = COPY %354
    $cl = KILL killed $rcx
    %348:gr64 = SHL64rCL %353, implicit-def $eflags, implicit $cl
    %345:gr64 = XOR64ri32 %351, -1, implicit-def $eflags
    %343:gr64 = XOR64ri32 %345, -1, implicit-def $eflags
    %342:gr64 = ADD64rr %345, %349, implicit-def $eflags
    %340:gr64 = OR64rr %348, %345, implicit-def $eflags
    %337:gr64 = XOR64ri32 %342, -1, implicit-def $eflags
    %336:gr64 = IMUL64rr %342, %343, implicit-def $eflags
    %334:gr64 = ADD64rr %342, %340, implicit-def $eflags
    $rcx = COPY %336
    $cl = KILL killed $rcx
    %331:gr64 = SHL64rCL %337, implicit-def $eflags, implicit $cl
    %329:gr64 = SUB64rr %336, %334, implicit-def $eflags
    %328:gr64 = SUB64rr %334, %336, implicit-def $eflags
    $rcx = COPY %331
    $cl = KILL killed $rcx
    %325:gr64 = SHL64rCL %329, implicit-def $eflags, implicit $cl
    %323:gr64 = SUB64rr %329, %328, implicit-def $eflags
    %322:gr64 = XOR64rr %329, %328, implicit-def $eflags
    %319:gr64 = XOR64rr %322, %323, implicit-def $eflags
    %318:gr64 = XOR64rr %325, %323, implicit-def $eflags
    %316:gr64 = ADD64rr %323, %322, implicit-def $eflags
    %313:gr64 = OR64rr %318, %316, implicit-def $eflags
    %312:gr64 = IMUL64rr %316, %319, implicit-def $eflags
    %310:gr64 = OR64rr %318, %319, implicit-def $eflags
    $rcx = COPY %313
    $cl = KILL killed $rcx
    %307:gr64 = SHL64rCL %312, implicit-def $eflags, implicit $cl
    %306:gr64 = SUB64rr %313, %310, implicit-def $eflags
    $rcx = COPY %313
    $cl = KILL killed $rcx
    %304:gr64 = SHR64rCL %312, implicit-def $eflags, implicit $cl
    %301:gr64 = SUB64rr %307, %304, implicit-def $eflags
    %300:gr64 = IMUL64rr %307, %306, implicit-def $eflags
    $rcx = COPY %307
    $cl = KILL killed $rcx
    %298:gr64 = SHR64rCL %304, implicit-def $eflags, implicit $cl
    %295:gr64 = IMUL64rr %300, %301, implicit-def $eflags
    %294:gr64 = IMUL64rr %300, %301, implicit-def $eflags
    $rcx = COPY %300
    $cl = KILL killed $rcx
    %292:gr64 = SHR64rCL %298, implicit-def $eflags, implicit $cl
    $rcx = COPY %294
    $cl = KILL killed $rcx
    %289:gr64 = SHR64rCL %292, implicit-def $eflags, implicit $cl
    %287:gr64 = OR64rr %295, %292, implicit-def $eflags
    %286:gr64 = IMUL64rr %295, %292, implicit-def $eflags
    %283:gr64 = XOR64ri32 %289, -1, implicit-def $eflags
    %281:gr64 = OR64rr %287, %286, implicit-def $eflags
    $rcx = COPY %283
    $cl = KILL killed $rcx
    %278:gr64 = SHR64rCL %281, implicit-def $eflags, implicit $cl
    %277:gr64 = XOR64ri32 %281, -1, implicit-def $eflags
    %276:gr64 = SUB64rr %283, %281, implicit-def $eflags
    %273:gr64 = XOR64rr %277, %278, implicit-def $eflags
    %272:gr64 = OR64rr %276, %277, implicit-def $eflags
    %270:gr64 = ADD64rr %277, %278, implicit-def $eflags
    %267:gr64 = SUB64rr %270, %273, implicit-def $eflags
    $rcx = COPY %273
    $cl = KILL killed $rcx
    %266:gr64 = SHL64rCL %270, implicit-def $eflags, implicit $cl
    %264:gr64 = OR64rr %273, %272, implicit-def $eflags
    %261:gr64 = SUB64rr %266, %267, implicit-def $eflags
    %259:gr64 = IMUL64rr %264, %266, implicit-def $eflags
    %257:gr64 = XOR64ri32 %264, -1, implicit-def $eflags
    %255:gr64 = SUB64rr %257, %259, implicit-def $eflags
    $rcx = COPY %257
    $cl = KILL killed $rcx
    %254:gr64 = SHR64rCL %261, implicit-def $eflags, implicit $cl
    %252:gr64 = XOR64rr %257, %259, implicit-def $eflags
    %249:gr64 = SUB64rr %254, %255, implicit-def $eflags
    $rcx = COPY %252
    $cl = KILL killed $rcx
    %247:gr64 = SHL64rCL %255, implicit-def $eflags, implicit $cl
    %246:gr64 = OR64rr %255, %252, implicit-def $eflags
    %243:gr64 = OR64rr %249, %246, implicit-def $eflags
    %242:gr64 = XOR64rr %246, %249, implicit-def $eflags
    %240:gr64 = XOR64rr %249, %247, implicit-def $eflags
    %237:gr64 = OR64rr %243, %242, implicit-def $eflags
    %236:gr64 = XOR64rr %242, %243, implicit-def $eflags
    %234:gr64 = IMUL64rr %243, %240, implicit-def $eflags
    %231:gr64 = ADD64rr %237, %236, implicit-def $eflags
    %230:gr64 = ADD64rr %236, %234, implicit-def $eflags
    %228:gr64 = OR64rr %237, %234, implicit-def $eflags
    %225:gr64 = XOR64rr %228, %231, implicit-def $eflags
    %223:gr64 = XOR64ri32 %228, -1, implicit-def $eflags
    %221:gr64 = XOR64ri32 %230, -1, implicit-def $eflags
    $rcx = COPY %223
    $cl = KILL killed $rcx
    %219:gr64 = SHL64rCL %225, implicit-def $eflags, implicit $cl
    %218:gr64 = OR64rr %221, %225, implicit-def $eflags
    %216:gr64 = SUB64rr %221, %223, implicit-def $eflags
    %213:gr64 = SUB64rr %219, %218, implicit-def $eflags
    %210:gr64 = XOR64ri32 %216, -1, implicit-def $eflags
    $rcx = COPY %210
    $cl = KILL killed $rcx
    %208:gr64 = SHR64rCL %213, implicit-def $eflags, implicit $cl
    %204:gr64 = MOV64ri 7236284524343095148
    %205:gr64 = XOR64rr %208, %204, implicit-def $eflags
    MOV64mr %stack.0, 1, $noreg, 16, $noreg, %205 :: (store (s64) into %ir.343)
    %200:gr64 = MOV32ri64 2147352576
    %201:gr32 = MOV32rm %200, 1, $noreg, 0, $noreg :: (load (s32) from %ir.344)
    %198:gr32 = SHR32ri %201, 8, implicit-def $eflags
    %196:gr32 = AND32ri %198, 255, implicit-def $eflags
    %194:gr32 = ADD32ri %196, 52450, implicit-def $eflags
    %192:gr16 = COPY %194.sub_16bit
    %190:gr16 = IMUL16rri %192, 10994, implicit-def $eflags
    %187:gr64 = MOV32ri64 2147352576
    %188:gr32 = MOV32rm %187, 1, $noreg, 0, $noreg :: (load (s32) from %ir.351)
    %185:gr32 = SHR32ri %188, 8, implicit-def $eflags
    %183:gr32 = AND32ri %185, 255, implicit-def $eflags
    %181:gr32 = ADD32ri %183, 7265, implicit-def $eflags
    %179:gr16 = COPY %181.sub_16bit
    %177:gr16 = XOR16ri %179, 33518, implicit-def $eflags
    %174:gr64 = MOV32ri64 2147352576
    %175:gr32 = MOV32rm %174, 1, $noreg, 0, $noreg :: (load (s32) from %ir.358)
    %172:gr32 = SHR32ri %175, 8, implicit-def $eflags
    %170:gr32 = AND32ri %172, 255, implicit-def $eflags
    %168:gr32 = ADD32ri %170, 32358, implicit-def $eflags
    %166:gr16 = COPY %168.sub_16bit
    %164:gr16 = ADD16ri %166, 46092, implicit-def $eflags
    $cx = COPY %177
    $cl = KILL killed $cx
    %162:gr16 = SHR16rCL %190, implicit-def $eflags, implicit $cl
    %160:gr16 = IMUL16rr %177, %164, implicit-def $eflags
    %159:gr16 = IMUL16rr %177, %164, implicit-def $eflags
    %156:gr16 = OR16rr %159, %160, implicit-def $eflags
    %155:gr16 = OR16rr %160, %162, implicit-def $eflags
    $cx = COPY %159
    $cl = KILL killed $cx
    %153:gr16 = SHR16rCL %162, implicit-def $eflags, implicit $cl
    %150:gr16 = XOR16ri %156, -1, implicit-def $eflags
    %148:gr16 = IMUL16rr %155, %153, implicit-def $eflags
    %147:gr16 = SUB16rr %155, %153, implicit-def $eflags
    %144:gr16 = SUB16rr %148, %150, implicit-def $eflags
    %143:gr16 = XOR16ri %150, -1, implicit-def $eflags
    %141:gr16 = SUB16rr %148, %147, implicit-def $eflags
    %138:gr16 = OR16rr %143, %144, implicit-def $eflags
    $cx = COPY %141
    $cl = KILL killed $cx
    %136:gr16 = SHR16rCL %144, implicit-def $eflags, implicit $cl
    %133:gr16 = XOR16rr %136, %138, implicit-def $eflags
    %132:gr16 = IMUL16rr %136, %138, implicit-def $eflags
    %131:gr16 = OR16rr %138, %136, implicit-def $eflags
    %128:gr16 = IMUL16rr %133, %131, implicit-def $eflags
    %127:gr16 = XOR16rr %131, %133, implicit-def $eflags
    $cx = COPY %132
    $cl = KILL killed $cx
    %125:gr16 = SHL16rCL %131, implicit-def $eflags, implicit $cl
    $cx = COPY %127
    $cl = KILL killed $cx
    %122:gr16 = SHR16rCL %125, implicit-def $eflags, implicit $cl
    %121:gr16 = XOR16rr %127, %128, implicit-def $eflags
    %119:gr16 = IMUL16rr %125, %127, implicit-def $eflags
    $cx = COPY %121
    $cl = KILL killed $cx
    %116:gr16 = SHL16rCL %122, implicit-def $eflags, implicit $cl
    $cx = COPY %119
    $cl = KILL killed $cx
    %115:gr16 = SHL16rCL %121, implicit-def $eflags, implicit $cl
    %113:gr16 = ADD16rr %122, %121, implicit-def $eflags
    %110:gr16 = XOR16rr %113, %116, implicit-def $eflags
    %109:gr16 = SUB16rr %113, %116, implicit-def $eflags
    %107:gr16 = IMUL16rr %113, %115, implicit-def $eflags
    %104:gr16 = SUB16rr %107, %110, implicit-def $eflags
    %102:gr16 = SUB16rr %109, %110, implicit-def $eflags
    %100:gr16 = XOR16ri %109, -1, implicit-def $eflags
    $cx = COPY %102
    $cl = KILL killed $cx
    %98:gr16 = SHL16rCL %104, implicit-def $eflags, implicit $cl
    %96:gr16 = XOR16ri %100, -1, implicit-def $eflags
    %94:gr16 = XOR16ri %102, -1, implicit-def $eflags
    %92:gr16 = XOR16ri %96, -1, implicit-def $eflags
    $cx = COPY %96
    $cl = KILL killed $cx
    %91:gr16 = SHL16rCL %94, implicit-def $eflags, implicit $cl
    %89:gr16 = IMUL16rr %94, %98, implicit-def $eflags
    %86:gr16 = IMUL16rr %89, %91, implicit-def $eflags
    %85:gr16 = XOR16rr %92, %89, implicit-def $eflags
    %83:gr16 = IMUL16rr %91, %92, implicit-def $eflags
    %80:gr16 = SUB16rr %86, %83, implicit-def $eflags
    %79:gr16 = XOR16ri %83, -1, implicit-def $eflags
    $cx = COPY %85
    $cl = KILL killed $cx
    %77:gr16 = SHL16rCL %86, implicit-def $eflags, implicit $cl
    $cx = COPY %79
    $cl = KILL killed $cx
    %74:gr16 = SHR16rCL %77, implicit-def $eflags, implicit $cl
    %73:gr16 = XOR16rr %77, %80, implicit-def $eflags
    %71:gr16 = ADD16rr %79, %80, implicit-def $eflags
    %68:gr16 = XOR16ri %73, -1, implicit-def $eflags
    $cx = COPY %71
    $cl = KILL killed $cx
    %67:gr16 = SHL16rCL %74, implicit-def $eflags, implicit $cl
    %65:gr16 = OR16rr %71, %73, implicit-def $eflags
    %62:gr16 = OR16rr %65, %67, implicit-def $eflags
    %61:gr16 = IMUL16rr %67, %68, implicit-def $eflags
    %59:gr16 = SUB16rr %68, %65, implicit-def $eflags
    %56:gr16 = SUB16rr %61, %59, implicit-def $eflags
    %55:gr16 = ADD16rr %59, %61, implicit-def $eflags
    %53:gr16 = OR16rr %59, %62, implicit-def $eflags
    %50:gr16 = OR16rr %53, %55, implicit-def $eflags
    %48:gr16 = SUB16rr %56, %55, implicit-def $eflags
    %45:gr16 = SUB16rr %48, %50, implicit-def $eflags
    %44:gr16 = XOR16rr %48, %50, implicit-def $eflags
    %42:gr16 = XOR16ri %48, -1, implicit-def $eflags
    %40:gr16 = XOR16rr %45, %44, implicit-def $eflags
    %39:gr16 = SUB16rr %42, %44, implicit-def $eflags
    %37:gr16 = OR16rr %45, %42, implicit-def $eflags
    $cx = COPY %40
    $cl = KILL killed $cx
    %34:gr16 = SHR16rCL %39, implicit-def $eflags, implicit $cl
    %32:gr16 = XOR16rr %40, %37, implicit-def $eflags
    %29:gr16 = XOR16rr %34, %32, implicit-def $eflags
    %28:gr16 = ADD16rr %32, %34, implicit-def $eflags
    %25:gr16 = IMUL16rr %29, %28, implicit-def $eflags
    %24:gr16 = IMUL16rr %28, %29, implicit-def $eflags
    $cx = COPY %24
    $cl = KILL killed $cx
    %21:gr16 = SHL16rCL %25, implicit-def $eflags, implicit $cl
    $cx = COPY %25
    $cl = KILL killed $cx
    %20:gr16 = SHR16rCL %24, implicit-def $eflags, implicit $cl
    %17:gr16 = OR16rr %20, %21, implicit-def $eflags
    %16:gr16 = ADD16rr %21, %20, implicit-def $eflags
    %15:gr16 = SUB16rr %21, %20, implicit-def $eflags
    $cx = COPY %15
    $cl = KILL killed $cx
    %12:gr16 = SHR16rCL %16, implicit-def $eflags, implicit $cl
    %10:gr16 = XOR16rr %15, %17, implicit-def $eflags
    $cx = COPY %12
    $cl = KILL killed $cx
    %7:gr16 = SHR16rCL %10, implicit-def $eflags, implicit $cl
    %4:gr16 = XOR16ri %7, 33, implicit-def $eflags
    MOV16mr %stack.0, 1, $noreg, 24, $noreg, %4 :: (store (s16) into %ir.448)
    %1:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rax = COPY %1
    RET64 implicit $rax

...
---
name:            _ZL8_obf_strPKc
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rcx', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.1):
    liveins: $rcx
  
    %0:gr64 = COPY $rcx
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.2)
    %2:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    $rax = COPY %2
    RET64 implicit $rax

...
---
name:            main
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr32, preferred-register: '' }
  - { id: 16, class: gr32, preferred-register: '' }
  - { id: 17, class: gr32, preferred-register: '' }
  - { id: 18, class: gr32, preferred-register: '' }
  - { id: 19, class: gr32, preferred-register: '' }
  - { id: 20, class: gr32, preferred-register: '' }
  - { id: 21, class: gr32, preferred-register: '' }
  - { id: 22, class: gr32, preferred-register: '' }
  - { id: 23, class: gr32, preferred-register: '' }
  - { id: 24, class: gr32, preferred-register: '' }
  - { id: 25, class: gr32, preferred-register: '' }
  - { id: 26, class: gr32, preferred-register: '' }
  - { id: 27, class: gr32, preferred-register: '' }
  - { id: 28, class: gr32, preferred-register: '' }
  - { id: 29, class: gr32, preferred-register: '' }
  - { id: 30, class: gr32, preferred-register: '' }
  - { id: 31, class: gr32, preferred-register: '' }
  - { id: 32, class: gr32, preferred-register: '' }
  - { id: 33, class: gr32, preferred-register: '' }
  - { id: 34, class: gr32, preferred-register: '' }
  - { id: 35, class: gr32, preferred-register: '' }
  - { id: 36, class: gr32, preferred-register: '' }
  - { id: 37, class: gr64, preferred-register: '' }
  - { id: 38, class: gr64, preferred-register: '' }
  - { id: 39, class: gr32, preferred-register: '' }
  - { id: 40, class: gr32, preferred-register: '' }
  - { id: 41, class: gr32, preferred-register: '' }
  - { id: 42, class: gr32, preferred-register: '' }
  - { id: 43, class: gr32, preferred-register: '' }
  - { id: 44, class: gr32, preferred-register: '' }
  - { id: 45, class: gr32, preferred-register: '' }
  - { id: 46, class: gr32, preferred-register: '' }
  - { id: 47, class: gr32, preferred-register: '' }
  - { id: 48, class: gr64, preferred-register: '' }
  - { id: 49, class: gr64, preferred-register: '' }
  - { id: 50, class: gr32, preferred-register: '' }
  - { id: 51, class: gr64, preferred-register: '' }
  - { id: 52, class: gr64, preferred-register: '' }
  - { id: 53, class: gr64, preferred-register: '' }
  - { id: 54, class: gr64, preferred-register: '' }
  - { id: 55, class: gr64, preferred-register: '' }
  - { id: 56, class: gr32, preferred-register: '' }
  - { id: 57, class: gr64, preferred-register: '' }
  - { id: 58, class: gr64, preferred-register: '' }
  - { id: 59, class: gr64, preferred-register: '' }
  - { id: 60, class: gr32, preferred-register: '' }
  - { id: 61, class: gr64, preferred-register: '' }
  - { id: 62, class: gr64, preferred-register: '' }
  - { id: 63, class: gr64, preferred-register: '' }
  - { id: 64, class: gr64, preferred-register: '' }
  - { id: 65, class: gr64, preferred-register: '' }
  - { id: 66, class: gr64, preferred-register: '' }
  - { id: 67, class: gr64, preferred-register: '' }
  - { id: 68, class: gr8, preferred-register: '' }
  - { id: 69, class: gr8, preferred-register: '' }
  - { id: 70, class: gr8, preferred-register: '' }
  - { id: 71, class: gr8, preferred-register: '' }
  - { id: 72, class: gr8, preferred-register: '' }
  - { id: 73, class: gr8, preferred-register: '' }
  - { id: 74, class: gr8, preferred-register: '' }
  - { id: 75, class: gr8, preferred-register: '' }
  - { id: 76, class: gr8, preferred-register: '' }
  - { id: 77, class: gr8, preferred-register: '' }
  - { id: 78, class: gr8, preferred-register: '' }
  - { id: 79, class: gr8, preferred-register: '' }
  - { id: 80, class: gr8, preferred-register: '' }
  - { id: 81, class: gr8, preferred-register: '' }
  - { id: 82, class: gr8, preferred-register: '' }
  - { id: 83, class: gr8, preferred-register: '' }
  - { id: 84, class: gr8, preferred-register: '' }
  - { id: 85, class: gr8, preferred-register: '' }
  - { id: 86, class: gr8, preferred-register: '' }
  - { id: 87, class: gr8, preferred-register: '' }
  - { id: 88, class: gr8, preferred-register: '' }
  - { id: 89, class: gr8, preferred-register: '' }
  - { id: 90, class: gr8, preferred-register: '' }
  - { id: 91, class: gr8, preferred-register: '' }
  - { id: 92, class: gr8, preferred-register: '' }
  - { id: 93, class: gr8, preferred-register: '' }
  - { id: 94, class: gr8, preferred-register: '' }
  - { id: 95, class: gr8, preferred-register: '' }
  - { id: 96, class: gr8, preferred-register: '' }
  - { id: 97, class: gr8, preferred-register: '' }
  - { id: 98, class: gr8, preferred-register: '' }
  - { id: 99, class: gr8, preferred-register: '' }
  - { id: 100, class: gr8, preferred-register: '' }
  - { id: 101, class: gr8, preferred-register: '' }
  - { id: 102, class: gr8, preferred-register: '' }
  - { id: 103, class: gr8, preferred-register: '' }
  - { id: 104, class: gr8, preferred-register: '' }
  - { id: 105, class: gr8, preferred-register: '' }
  - { id: 106, class: gr8, preferred-register: '' }
  - { id: 107, class: gr8, preferred-register: '' }
  - { id: 108, class: gr8, preferred-register: '' }
  - { id: 109, class: gr8, preferred-register: '' }
  - { id: 110, class: gr8, preferred-register: '' }
  - { id: 111, class: gr8, preferred-register: '' }
  - { id: 112, class: gr8, preferred-register: '' }
  - { id: 113, class: gr8, preferred-register: '' }
  - { id: 114, class: gr8, preferred-register: '' }
  - { id: 115, class: gr8, preferred-register: '' }
  - { id: 116, class: gr8, preferred-register: '' }
  - { id: 117, class: gr8, preferred-register: '' }
  - { id: 118, class: gr8, preferred-register: '' }
  - { id: 119, class: gr8, preferred-register: '' }
  - { id: 120, class: gr8, preferred-register: '' }
  - { id: 121, class: gr8, preferred-register: '' }
  - { id: 122, class: gr8, preferred-register: '' }
  - { id: 123, class: gr8, preferred-register: '' }
  - { id: 124, class: gr8, preferred-register: '' }
  - { id: 125, class: gr8, preferred-register: '' }
  - { id: 126, class: gr8, preferred-register: '' }
  - { id: 127, class: gr8, preferred-register: '' }
  - { id: 128, class: gr8, preferred-register: '' }
  - { id: 129, class: gr8, preferred-register: '' }
  - { id: 130, class: gr8, preferred-register: '' }
  - { id: 131, class: gr8, preferred-register: '' }
  - { id: 132, class: gr8, preferred-register: '' }
  - { id: 133, class: gr8, preferred-register: '' }
  - { id: 134, class: gr8, preferred-register: '' }
  - { id: 135, class: gr8, preferred-register: '' }
  - { id: 136, class: gr8, preferred-register: '' }
  - { id: 137, class: gr8, preferred-register: '' }
  - { id: 138, class: gr8, preferred-register: '' }
  - { id: 139, class: gr8, preferred-register: '' }
  - { id: 140, class: gr8, preferred-register: '' }
  - { id: 141, class: gr8, preferred-register: '' }
  - { id: 142, class: gr8, preferred-register: '' }
  - { id: 143, class: gr8, preferred-register: '' }
  - { id: 144, class: gr8, preferred-register: '' }
  - { id: 145, class: gr8, preferred-register: '' }
  - { id: 146, class: gr8, preferred-register: '' }
  - { id: 147, class: gr8, preferred-register: '' }
  - { id: 148, class: gr8, preferred-register: '' }
  - { id: 149, class: gr8, preferred-register: '' }
  - { id: 150, class: gr8, preferred-register: '' }
  - { id: 151, class: gr8, preferred-register: '' }
  - { id: 152, class: gr8, preferred-register: '' }
  - { id: 153, class: gr8, preferred-register: '' }
  - { id: 154, class: gr8, preferred-register: '' }
  - { id: 155, class: gr8, preferred-register: '' }
  - { id: 156, class: gr8, preferred-register: '' }
  - { id: 157, class: gr8, preferred-register: '' }
  - { id: 158, class: gr8, preferred-register: '' }
  - { id: 159, class: gr8, preferred-register: '' }
  - { id: 160, class: gr8, preferred-register: '' }
  - { id: 161, class: gr8, preferred-register: '' }
  - { id: 162, class: gr8, preferred-register: '' }
  - { id: 163, class: gr8, preferred-register: '' }
  - { id: 164, class: gr8, preferred-register: '' }
  - { id: 165, class: gr8, preferred-register: '' }
  - { id: 166, class: gr8, preferred-register: '' }
  - { id: 167, class: gr8, preferred-register: '' }
  - { id: 168, class: gr8, preferred-register: '' }
  - { id: 169, class: gr8, preferred-register: '' }
  - { id: 170, class: gr8, preferred-register: '' }
  - { id: 171, class: gr8, preferred-register: '' }
  - { id: 172, class: gr8, preferred-register: '' }
  - { id: 173, class: gr8, preferred-register: '' }
  - { id: 174, class: gr8, preferred-register: '' }
  - { id: 175, class: gr8, preferred-register: '' }
  - { id: 176, class: gr8, preferred-register: '' }
  - { id: 177, class: gr8, preferred-register: '' }
  - { id: 178, class: gr8, preferred-register: '' }
  - { id: 179, class: gr8, preferred-register: '' }
  - { id: 180, class: gr8, preferred-register: '' }
  - { id: 181, class: gr8, preferred-register: '' }
  - { id: 182, class: gr8, preferred-register: '' }
  - { id: 183, class: gr8, preferred-register: '' }
  - { id: 184, class: gr8, preferred-register: '' }
  - { id: 185, class: gr8, preferred-register: '' }
  - { id: 186, class: gr8, preferred-register: '' }
  - { id: 187, class: gr8, preferred-register: '' }
  - { id: 188, class: gr8, preferred-register: '' }
  - { id: 189, class: gr8, preferred-register: '' }
  - { id: 190, class: gr8, preferred-register: '' }
  - { id: 191, class: gr8, preferred-register: '' }
  - { id: 192, class: gr8, preferred-register: '' }
  - { id: 193, class: gr8, preferred-register: '' }
  - { id: 194, class: gr8, preferred-register: '' }
  - { id: 195, class: gr8, preferred-register: '' }
  - { id: 196, class: gr8, preferred-register: '' }
  - { id: 197, class: gr8, preferred-register: '' }
  - { id: 198, class: gr8, preferred-register: '' }
  - { id: 199, class: gr8, preferred-register: '' }
  - { id: 200, class: gr8, preferred-register: '' }
  - { id: 201, class: gr8, preferred-register: '' }
  - { id: 202, class: gr8, preferred-register: '' }
  - { id: 203, class: gr8, preferred-register: '' }
  - { id: 204, class: gr8, preferred-register: '' }
  - { id: 205, class: gr8, preferred-register: '' }
  - { id: 206, class: gr8, preferred-register: '' }
  - { id: 207, class: gr8, preferred-register: '' }
  - { id: 208, class: gr8, preferred-register: '' }
  - { id: 209, class: gr8, preferred-register: '' }
  - { id: 210, class: gr8, preferred-register: '' }
  - { id: 211, class: gr8, preferred-register: '' }
  - { id: 212, class: gr8, preferred-register: '' }
  - { id: 213, class: gr8, preferred-register: '' }
  - { id: 214, class: gr8, preferred-register: '' }
  - { id: 215, class: gr8, preferred-register: '' }
  - { id: 216, class: gr8, preferred-register: '' }
  - { id: 217, class: gr8, preferred-register: '' }
  - { id: 218, class: gr8, preferred-register: '' }
  - { id: 219, class: gr8, preferred-register: '' }
  - { id: 220, class: gr8, preferred-register: '' }
  - { id: 221, class: gr8, preferred-register: '' }
  - { id: 222, class: gr8, preferred-register: '' }
  - { id: 223, class: gr8, preferred-register: '' }
  - { id: 224, class: gr8, preferred-register: '' }
  - { id: 225, class: gr8, preferred-register: '' }
  - { id: 226, class: gr8, preferred-register: '' }
  - { id: 227, class: gr8, preferred-register: '' }
  - { id: 228, class: gr8, preferred-register: '' }
  - { id: 229, class: gr8, preferred-register: '' }
  - { id: 230, class: gr32, preferred-register: '' }
  - { id: 231, class: gr8, preferred-register: '' }
  - { id: 232, class: gr32, preferred-register: '' }
  - { id: 233, class: gr32, preferred-register: '' }
  - { id: 234, class: gr32, preferred-register: '' }
  - { id: 235, class: gr32, preferred-register: '' }
  - { id: 236, class: gr32, preferred-register: '' }
  - { id: 237, class: gr32, preferred-register: '' }
  - { id: 238, class: gr64, preferred-register: '' }
  - { id: 239, class: gr64, preferred-register: '' }
  - { id: 240, class: gr32, preferred-register: '' }
  - { id: 241, class: gr8, preferred-register: '' }
  - { id: 242, class: gr8, preferred-register: '' }
  - { id: 243, class: gr8, preferred-register: '' }
  - { id: 244, class: gr32, preferred-register: '' }
  - { id: 245, class: gr8, preferred-register: '' }
  - { id: 246, class: gr32, preferred-register: '' }
  - { id: 247, class: gr32, preferred-register: '' }
  - { id: 248, class: gr32, preferred-register: '' }
  - { id: 249, class: gr32, preferred-register: '' }
  - { id: 250, class: gr32, preferred-register: '' }
  - { id: 251, class: gr32, preferred-register: '' }
  - { id: 252, class: gr64, preferred-register: '' }
  - { id: 253, class: gr64, preferred-register: '' }
  - { id: 254, class: gr32, preferred-register: '' }
  - { id: 255, class: gr8, preferred-register: '' }
  - { id: 256, class: gr8, preferred-register: '' }
  - { id: 257, class: gr32, preferred-register: '' }
  - { id: 258, class: gr8, preferred-register: '' }
  - { id: 259, class: gr32, preferred-register: '' }
  - { id: 260, class: gr32, preferred-register: '' }
  - { id: 261, class: gr32, preferred-register: '' }
  - { id: 262, class: gr32, preferred-register: '' }
  - { id: 263, class: gr32, preferred-register: '' }
  - { id: 264, class: gr32, preferred-register: '' }
  - { id: 265, class: gr64, preferred-register: '' }
  - { id: 266, class: gr64, preferred-register: '' }
  - { id: 267, class: gr32, preferred-register: '' }
  - { id: 268, class: gr16, preferred-register: '' }
  - { id: 269, class: gr16, preferred-register: '' }
  - { id: 270, class: gr16, preferred-register: '' }
  - { id: 271, class: gr16, preferred-register: '' }
  - { id: 272, class: gr16, preferred-register: '' }
  - { id: 273, class: gr16, preferred-register: '' }
  - { id: 274, class: gr16, preferred-register: '' }
  - { id: 275, class: gr16, preferred-register: '' }
  - { id: 276, class: gr16, preferred-register: '' }
  - { id: 277, class: gr16, preferred-register: '' }
  - { id: 278, class: gr16, preferred-register: '' }
  - { id: 279, class: gr16, preferred-register: '' }
  - { id: 280, class: gr16, preferred-register: '' }
  - { id: 281, class: gr16, preferred-register: '' }
  - { id: 282, class: gr16, preferred-register: '' }
  - { id: 283, class: gr16, preferred-register: '' }
  - { id: 284, class: gr16, preferred-register: '' }
  - { id: 285, class: gr16, preferred-register: '' }
  - { id: 286, class: gr16, preferred-register: '' }
  - { id: 287, class: gr16, preferred-register: '' }
  - { id: 288, class: gr16, preferred-register: '' }
  - { id: 289, class: gr16, preferred-register: '' }
  - { id: 290, class: gr16, preferred-register: '' }
  - { id: 291, class: gr16, preferred-register: '' }
  - { id: 292, class: gr16, preferred-register: '' }
  - { id: 293, class: gr16, preferred-register: '' }
  - { id: 294, class: gr16, preferred-register: '' }
  - { id: 295, class: gr16, preferred-register: '' }
  - { id: 296, class: gr16, preferred-register: '' }
  - { id: 297, class: gr16, preferred-register: '' }
  - { id: 298, class: gr16, preferred-register: '' }
  - { id: 299, class: gr16, preferred-register: '' }
  - { id: 300, class: gr16, preferred-register: '' }
  - { id: 301, class: gr16, preferred-register: '' }
  - { id: 302, class: gr16, preferred-register: '' }
  - { id: 303, class: gr16, preferred-register: '' }
  - { id: 304, class: gr16, preferred-register: '' }
  - { id: 305, class: gr16, preferred-register: '' }
  - { id: 306, class: gr16, preferred-register: '' }
  - { id: 307, class: gr16, preferred-register: '' }
  - { id: 308, class: gr16, preferred-register: '' }
  - { id: 309, class: gr16, preferred-register: '' }
  - { id: 310, class: gr16, preferred-register: '' }
  - { id: 311, class: gr16, preferred-register: '' }
  - { id: 312, class: gr16, preferred-register: '' }
  - { id: 313, class: gr16, preferred-register: '' }
  - { id: 314, class: gr16, preferred-register: '' }
  - { id: 315, class: gr16, preferred-register: '' }
  - { id: 316, class: gr16, preferred-register: '' }
  - { id: 317, class: gr16, preferred-register: '' }
  - { id: 318, class: gr16, preferred-register: '' }
  - { id: 319, class: gr16, preferred-register: '' }
  - { id: 320, class: gr16, preferred-register: '' }
  - { id: 321, class: gr16, preferred-register: '' }
  - { id: 322, class: gr16, preferred-register: '' }
  - { id: 323, class: gr16, preferred-register: '' }
  - { id: 324, class: gr16, preferred-register: '' }
  - { id: 325, class: gr16, preferred-register: '' }
  - { id: 326, class: gr16, preferred-register: '' }
  - { id: 327, class: gr16, preferred-register: '' }
  - { id: 328, class: gr16, preferred-register: '' }
  - { id: 329, class: gr16, preferred-register: '' }
  - { id: 330, class: gr16, preferred-register: '' }
  - { id: 331, class: gr16, preferred-register: '' }
  - { id: 332, class: gr16, preferred-register: '' }
  - { id: 333, class: gr16, preferred-register: '' }
  - { id: 334, class: gr16, preferred-register: '' }
  - { id: 335, class: gr16, preferred-register: '' }
  - { id: 336, class: gr16, preferred-register: '' }
  - { id: 337, class: gr16, preferred-register: '' }
  - { id: 338, class: gr16, preferred-register: '' }
  - { id: 339, class: gr16, preferred-register: '' }
  - { id: 340, class: gr16, preferred-register: '' }
  - { id: 341, class: gr16, preferred-register: '' }
  - { id: 342, class: gr16, preferred-register: '' }
  - { id: 343, class: gr16, preferred-register: '' }
  - { id: 344, class: gr16, preferred-register: '' }
  - { id: 345, class: gr16, preferred-register: '' }
  - { id: 346, class: gr16, preferred-register: '' }
  - { id: 347, class: gr16, preferred-register: '' }
  - { id: 348, class: gr16, preferred-register: '' }
  - { id: 349, class: gr16, preferred-register: '' }
  - { id: 350, class: gr16, preferred-register: '' }
  - { id: 351, class: gr16, preferred-register: '' }
  - { id: 352, class: gr16, preferred-register: '' }
  - { id: 353, class: gr16, preferred-register: '' }
  - { id: 354, class: gr16, preferred-register: '' }
  - { id: 355, class: gr16, preferred-register: '' }
  - { id: 356, class: gr16, preferred-register: '' }
  - { id: 357, class: gr16, preferred-register: '' }
  - { id: 358, class: gr16, preferred-register: '' }
  - { id: 359, class: gr16, preferred-register: '' }
  - { id: 360, class: gr16, preferred-register: '' }
  - { id: 361, class: gr16, preferred-register: '' }
  - { id: 362, class: gr16, preferred-register: '' }
  - { id: 363, class: gr16, preferred-register: '' }
  - { id: 364, class: gr16, preferred-register: '' }
  - { id: 365, class: gr16, preferred-register: '' }
  - { id: 366, class: gr16, preferred-register: '' }
  - { id: 367, class: gr16, preferred-register: '' }
  - { id: 368, class: gr16, preferred-register: '' }
  - { id: 369, class: gr16, preferred-register: '' }
  - { id: 370, class: gr16, preferred-register: '' }
  - { id: 371, class: gr16, preferred-register: '' }
  - { id: 372, class: gr16, preferred-register: '' }
  - { id: 373, class: gr16, preferred-register: '' }
  - { id: 374, class: gr16, preferred-register: '' }
  - { id: 375, class: gr16, preferred-register: '' }
  - { id: 376, class: gr16, preferred-register: '' }
  - { id: 377, class: gr16, preferred-register: '' }
  - { id: 378, class: gr16, preferred-register: '' }
  - { id: 379, class: gr16, preferred-register: '' }
  - { id: 380, class: gr16, preferred-register: '' }
  - { id: 381, class: gr16, preferred-register: '' }
  - { id: 382, class: gr16, preferred-register: '' }
  - { id: 383, class: gr16, preferred-register: '' }
  - { id: 384, class: gr16, preferred-register: '' }
  - { id: 385, class: gr16, preferred-register: '' }
  - { id: 386, class: gr16, preferred-register: '' }
  - { id: 387, class: gr16, preferred-register: '' }
  - { id: 388, class: gr16, preferred-register: '' }
  - { id: 389, class: gr16, preferred-register: '' }
  - { id: 390, class: gr16, preferred-register: '' }
  - { id: 391, class: gr16, preferred-register: '' }
  - { id: 392, class: gr16, preferred-register: '' }
  - { id: 393, class: gr16, preferred-register: '' }
  - { id: 394, class: gr16, preferred-register: '' }
  - { id: 395, class: gr16, preferred-register: '' }
  - { id: 396, class: gr16, preferred-register: '' }
  - { id: 397, class: gr16, preferred-register: '' }
  - { id: 398, class: gr16, preferred-register: '' }
  - { id: 399, class: gr16, preferred-register: '' }
  - { id: 400, class: gr16, preferred-register: '' }
  - { id: 401, class: gr16, preferred-register: '' }
  - { id: 402, class: gr16, preferred-register: '' }
  - { id: 403, class: gr16, preferred-register: '' }
  - { id: 404, class: gr16, preferred-register: '' }
  - { id: 405, class: gr16, preferred-register: '' }
  - { id: 406, class: gr16, preferred-register: '' }
  - { id: 407, class: gr16, preferred-register: '' }
  - { id: 408, class: gr16, preferred-register: '' }
  - { id: 409, class: gr16, preferred-register: '' }
  - { id: 410, class: gr16, preferred-register: '' }
  - { id: 411, class: gr16, preferred-register: '' }
  - { id: 412, class: gr16, preferred-register: '' }
  - { id: 413, class: gr16, preferred-register: '' }
  - { id: 414, class: gr16, preferred-register: '' }
  - { id: 415, class: gr16, preferred-register: '' }
  - { id: 416, class: gr16, preferred-register: '' }
  - { id: 417, class: gr16, preferred-register: '' }
  - { id: 418, class: gr16, preferred-register: '' }
  - { id: 419, class: gr16, preferred-register: '' }
  - { id: 420, class: gr16, preferred-register: '' }
  - { id: 421, class: gr16, preferred-register: '' }
  - { id: 422, class: gr16, preferred-register: '' }
  - { id: 423, class: gr16, preferred-register: '' }
  - { id: 424, class: gr16, preferred-register: '' }
  - { id: 425, class: gr16, preferred-register: '' }
  - { id: 426, class: gr16, preferred-register: '' }
  - { id: 427, class: gr16, preferred-register: '' }
  - { id: 428, class: gr16, preferred-register: '' }
  - { id: 429, class: gr32, preferred-register: '' }
  - { id: 430, class: gr16, preferred-register: '' }
  - { id: 431, class: gr32, preferred-register: '' }
  - { id: 432, class: gr32, preferred-register: '' }
  - { id: 433, class: gr32, preferred-register: '' }
  - { id: 434, class: gr32, preferred-register: '' }
  - { id: 435, class: gr32, preferred-register: '' }
  - { id: 436, class: gr32, preferred-register: '' }
  - { id: 437, class: gr64, preferred-register: '' }
  - { id: 438, class: gr64, preferred-register: '' }
  - { id: 439, class: gr32, preferred-register: '' }
  - { id: 440, class: gr16, preferred-register: '' }
  - { id: 441, class: gr16, preferred-register: '' }
  - { id: 442, class: gr32, preferred-register: '' }
  - { id: 443, class: gr16, preferred-register: '' }
  - { id: 444, class: gr32, preferred-register: '' }
  - { id: 445, class: gr32, preferred-register: '' }
  - { id: 446, class: gr32, preferred-register: '' }
  - { id: 447, class: gr32, preferred-register: '' }
  - { id: 448, class: gr32, preferred-register: '' }
  - { id: 449, class: gr32, preferred-register: '' }
  - { id: 450, class: gr64, preferred-register: '' }
  - { id: 451, class: gr64, preferred-register: '' }
  - { id: 452, class: gr32, preferred-register: '' }
  - { id: 453, class: gr64, preferred-register: '' }
  - { id: 454, class: gr64, preferred-register: '' }
  - { id: 455, class: gr64, preferred-register: '' }
  - { id: 456, class: gr64, preferred-register: '' }
  - { id: 457, class: gr64, preferred-register: '' }
  - { id: 458, class: gr64, preferred-register: '' }
  - { id: 459, class: gr64, preferred-register: '' }
  - { id: 460, class: gr64, preferred-register: '' }
  - { id: 461, class: gr64, preferred-register: '' }
  - { id: 462, class: gr64, preferred-register: '' }
  - { id: 463, class: gr64, preferred-register: '' }
  - { id: 464, class: gr64, preferred-register: '' }
  - { id: 465, class: gr64, preferred-register: '' }
  - { id: 466, class: gr64, preferred-register: '' }
  - { id: 467, class: gr64, preferred-register: '' }
  - { id: 468, class: gr64, preferred-register: '' }
  - { id: 469, class: gr64, preferred-register: '' }
  - { id: 470, class: gr64, preferred-register: '' }
  - { id: 471, class: gr64, preferred-register: '' }
  - { id: 472, class: gr64, preferred-register: '' }
  - { id: 473, class: gr64, preferred-register: '' }
  - { id: 474, class: gr64, preferred-register: '' }
  - { id: 475, class: gr64, preferred-register: '' }
  - { id: 476, class: gr64, preferred-register: '' }
  - { id: 477, class: gr64, preferred-register: '' }
  - { id: 478, class: gr64, preferred-register: '' }
  - { id: 479, class: gr64, preferred-register: '' }
  - { id: 480, class: gr64, preferred-register: '' }
  - { id: 481, class: gr64, preferred-register: '' }
  - { id: 482, class: gr64, preferred-register: '' }
  - { id: 483, class: gr64, preferred-register: '' }
  - { id: 484, class: gr64, preferred-register: '' }
  - { id: 485, class: gr64, preferred-register: '' }
  - { id: 486, class: gr64, preferred-register: '' }
  - { id: 487, class: gr64, preferred-register: '' }
  - { id: 488, class: gr64, preferred-register: '' }
  - { id: 489, class: gr64, preferred-register: '' }
  - { id: 490, class: gr64, preferred-register: '' }
  - { id: 491, class: gr64, preferred-register: '' }
  - { id: 492, class: gr64, preferred-register: '' }
  - { id: 493, class: gr64, preferred-register: '' }
  - { id: 494, class: gr64, preferred-register: '' }
  - { id: 495, class: gr64, preferred-register: '' }
  - { id: 496, class: gr64, preferred-register: '' }
  - { id: 497, class: gr64, preferred-register: '' }
  - { id: 498, class: gr64, preferred-register: '' }
  - { id: 499, class: gr64, preferred-register: '' }
  - { id: 500, class: gr64, preferred-register: '' }
  - { id: 501, class: gr64, preferred-register: '' }
  - { id: 502, class: gr64, preferred-register: '' }
  - { id: 503, class: gr64, preferred-register: '' }
  - { id: 504, class: gr64, preferred-register: '' }
  - { id: 505, class: gr64, preferred-register: '' }
  - { id: 506, class: gr64, preferred-register: '' }
  - { id: 507, class: gr64, preferred-register: '' }
  - { id: 508, class: gr64, preferred-register: '' }
  - { id: 509, class: gr64, preferred-register: '' }
  - { id: 510, class: gr64, preferred-register: '' }
  - { id: 511, class: gr64, preferred-register: '' }
  - { id: 512, class: gr64, preferred-register: '' }
  - { id: 513, class: gr64, preferred-register: '' }
  - { id: 514, class: gr64, preferred-register: '' }
  - { id: 515, class: gr64, preferred-register: '' }
  - { id: 516, class: gr64, preferred-register: '' }
  - { id: 517, class: gr64, preferred-register: '' }
  - { id: 518, class: gr64, preferred-register: '' }
  - { id: 519, class: gr64, preferred-register: '' }
  - { id: 520, class: gr64, preferred-register: '' }
  - { id: 521, class: gr64, preferred-register: '' }
  - { id: 522, class: gr64, preferred-register: '' }
  - { id: 523, class: gr64, preferred-register: '' }
  - { id: 524, class: gr64, preferred-register: '' }
  - { id: 525, class: gr64, preferred-register: '' }
  - { id: 526, class: gr64, preferred-register: '' }
  - { id: 527, class: gr64, preferred-register: '' }
  - { id: 528, class: gr64, preferred-register: '' }
  - { id: 529, class: gr64, preferred-register: '' }
  - { id: 530, class: gr64, preferred-register: '' }
  - { id: 531, class: gr64, preferred-register: '' }
  - { id: 532, class: gr64, preferred-register: '' }
  - { id: 533, class: gr64, preferred-register: '' }
  - { id: 534, class: gr64, preferred-register: '' }
  - { id: 535, class: gr64, preferred-register: '' }
  - { id: 536, class: gr64, preferred-register: '' }
  - { id: 537, class: gr64, preferred-register: '' }
  - { id: 538, class: gr64, preferred-register: '' }
  - { id: 539, class: gr64, preferred-register: '' }
  - { id: 540, class: gr64, preferred-register: '' }
  - { id: 541, class: gr64, preferred-register: '' }
  - { id: 542, class: gr64, preferred-register: '' }
  - { id: 543, class: gr64, preferred-register: '' }
  - { id: 544, class: gr64, preferred-register: '' }
  - { id: 545, class: gr64, preferred-register: '' }
  - { id: 546, class: gr64, preferred-register: '' }
  - { id: 547, class: gr64, preferred-register: '' }
  - { id: 548, class: gr64, preferred-register: '' }
  - { id: 549, class: gr64, preferred-register: '' }
  - { id: 550, class: gr64, preferred-register: '' }
  - { id: 551, class: gr64, preferred-register: '' }
  - { id: 552, class: gr64, preferred-register: '' }
  - { id: 553, class: gr64, preferred-register: '' }
  - { id: 554, class: gr64, preferred-register: '' }
  - { id: 555, class: gr64, preferred-register: '' }
  - { id: 556, class: gr64, preferred-register: '' }
  - { id: 557, class: gr64, preferred-register: '' }
  - { id: 558, class: gr64, preferred-register: '' }
  - { id: 559, class: gr64, preferred-register: '' }
  - { id: 560, class: gr64, preferred-register: '' }
  - { id: 561, class: gr64, preferred-register: '' }
  - { id: 562, class: gr64, preferred-register: '' }
  - { id: 563, class: gr64, preferred-register: '' }
  - { id: 564, class: gr64, preferred-register: '' }
  - { id: 565, class: gr64, preferred-register: '' }
  - { id: 566, class: gr64, preferred-register: '' }
  - { id: 567, class: gr64, preferred-register: '' }
  - { id: 568, class: gr64, preferred-register: '' }
  - { id: 569, class: gr64, preferred-register: '' }
  - { id: 570, class: gr64, preferred-register: '' }
  - { id: 571, class: gr64, preferred-register: '' }
  - { id: 572, class: gr64, preferred-register: '' }
  - { id: 573, class: gr64, preferred-register: '' }
  - { id: 574, class: gr64, preferred-register: '' }
  - { id: 575, class: gr64, preferred-register: '' }
  - { id: 576, class: gr64, preferred-register: '' }
  - { id: 577, class: gr64, preferred-register: '' }
  - { id: 578, class: gr64, preferred-register: '' }
  - { id: 579, class: gr64, preferred-register: '' }
  - { id: 580, class: gr64, preferred-register: '' }
  - { id: 581, class: gr64, preferred-register: '' }
  - { id: 582, class: gr64, preferred-register: '' }
  - { id: 583, class: gr64, preferred-register: '' }
  - { id: 584, class: gr64, preferred-register: '' }
  - { id: 585, class: gr64, preferred-register: '' }
  - { id: 586, class: gr64, preferred-register: '' }
  - { id: 587, class: gr64, preferred-register: '' }
  - { id: 588, class: gr64, preferred-register: '' }
  - { id: 589, class: gr64, preferred-register: '' }
  - { id: 590, class: gr64, preferred-register: '' }
  - { id: 591, class: gr64, preferred-register: '' }
  - { id: 592, class: gr64, preferred-register: '' }
  - { id: 593, class: gr64, preferred-register: '' }
  - { id: 594, class: gr64, preferred-register: '' }
  - { id: 595, class: gr64, preferred-register: '' }
  - { id: 596, class: gr64, preferred-register: '' }
  - { id: 597, class: gr64, preferred-register: '' }
  - { id: 598, class: gr64, preferred-register: '' }
  - { id: 599, class: gr64, preferred-register: '' }
  - { id: 600, class: gr64, preferred-register: '' }
  - { id: 601, class: gr64, preferred-register: '' }
  - { id: 602, class: gr64, preferred-register: '' }
  - { id: 603, class: gr64, preferred-register: '' }
  - { id: 604, class: gr64, preferred-register: '' }
  - { id: 605, class: gr64, preferred-register: '' }
  - { id: 606, class: gr64, preferred-register: '' }
  - { id: 607, class: gr64, preferred-register: '' }
  - { id: 608, class: gr64, preferred-register: '' }
  - { id: 609, class: gr64, preferred-register: '' }
  - { id: 610, class: gr64, preferred-register: '' }
  - { id: 611, class: gr64, preferred-register: '' }
  - { id: 612, class: gr64, preferred-register: '' }
  - { id: 613, class: gr64, preferred-register: '' }
  - { id: 614, class: gr64, preferred-register: '' }
  - { id: 615, class: gr64, preferred-register: '' }
  - { id: 616, class: gr64, preferred-register: '' }
  - { id: 617, class: gr64, preferred-register: '' }
  - { id: 618, class: gr64, preferred-register: '' }
  - { id: 619, class: gr64, preferred-register: '' }
  - { id: 620, class: gr64, preferred-register: '' }
  - { id: 621, class: gr64, preferred-register: '' }
  - { id: 622, class: gr64, preferred-register: '' }
  - { id: 623, class: gr64, preferred-register: '' }
  - { id: 624, class: gr32, preferred-register: '' }
  - { id: 625, class: gr32, preferred-register: '' }
  - { id: 626, class: gr64, preferred-register: '' }
  - { id: 627, class: gr32, preferred-register: '' }
  - { id: 628, class: gr32, preferred-register: '' }
  - { id: 629, class: gr32, preferred-register: '' }
  - { id: 630, class: gr32, preferred-register: '' }
  - { id: 631, class: gr64, preferred-register: '' }
  - { id: 632, class: gr64, preferred-register: '' }
  - { id: 633, class: gr32, preferred-register: '' }
  - { id: 634, class: gr64, preferred-register: '' }
  - { id: 635, class: gr64, preferred-register: '' }
  - { id: 636, class: gr64, preferred-register: '' }
  - { id: 637, class: gr64, preferred-register: '' }
  - { id: 638, class: gr64, preferred-register: '' }
  - { id: 639, class: gr64, preferred-register: '' }
  - { id: 640, class: gr32, preferred-register: '' }
  - { id: 641, class: gr32, preferred-register: '' }
  - { id: 642, class: gr64, preferred-register: '' }
  - { id: 643, class: gr32, preferred-register: '' }
  - { id: 644, class: gr32, preferred-register: '' }
  - { id: 645, class: gr32, preferred-register: '' }
  - { id: 646, class: gr32, preferred-register: '' }
  - { id: 647, class: gr64, preferred-register: '' }
  - { id: 648, class: gr64, preferred-register: '' }
  - { id: 649, class: gr32, preferred-register: '' }
  - { id: 650, class: gr64, preferred-register: '' }
  - { id: 651, class: gr64, preferred-register: '' }
  - { id: 652, class: gr16, preferred-register: '' }
  - { id: 653, class: gr16, preferred-register: '' }
  - { id: 654, class: gr16, preferred-register: '' }
  - { id: 655, class: gr16, preferred-register: '' }
  - { id: 656, class: gr16, preferred-register: '' }
  - { id: 657, class: gr16, preferred-register: '' }
  - { id: 658, class: gr16, preferred-register: '' }
  - { id: 659, class: gr16, preferred-register: '' }
  - { id: 660, class: gr16, preferred-register: '' }
  - { id: 661, class: gr16, preferred-register: '' }
  - { id: 662, class: gr16, preferred-register: '' }
  - { id: 663, class: gr16, preferred-register: '' }
  - { id: 664, class: gr16, preferred-register: '' }
  - { id: 665, class: gr16, preferred-register: '' }
  - { id: 666, class: gr16, preferred-register: '' }
  - { id: 667, class: gr16, preferred-register: '' }
  - { id: 668, class: gr16, preferred-register: '' }
  - { id: 669, class: gr16, preferred-register: '' }
  - { id: 670, class: gr16, preferred-register: '' }
  - { id: 671, class: gr16, preferred-register: '' }
  - { id: 672, class: gr16, preferred-register: '' }
  - { id: 673, class: gr16, preferred-register: '' }
  - { id: 674, class: gr16, preferred-register: '' }
  - { id: 675, class: gr16, preferred-register: '' }
  - { id: 676, class: gr16, preferred-register: '' }
  - { id: 677, class: gr16, preferred-register: '' }
  - { id: 678, class: gr16, preferred-register: '' }
  - { id: 679, class: gr16, preferred-register: '' }
  - { id: 680, class: gr16, preferred-register: '' }
  - { id: 681, class: gr16, preferred-register: '' }
  - { id: 682, class: gr16, preferred-register: '' }
  - { id: 683, class: gr16, preferred-register: '' }
  - { id: 684, class: gr16, preferred-register: '' }
  - { id: 685, class: gr16, preferred-register: '' }
  - { id: 686, class: gr16, preferred-register: '' }
  - { id: 687, class: gr16, preferred-register: '' }
  - { id: 688, class: gr16, preferred-register: '' }
  - { id: 689, class: gr16, preferred-register: '' }
  - { id: 690, class: gr16, preferred-register: '' }
  - { id: 691, class: gr16, preferred-register: '' }
  - { id: 692, class: gr16, preferred-register: '' }
  - { id: 693, class: gr16, preferred-register: '' }
  - { id: 694, class: gr16, preferred-register: '' }
  - { id: 695, class: gr16, preferred-register: '' }
  - { id: 696, class: gr16, preferred-register: '' }
  - { id: 697, class: gr16, preferred-register: '' }
  - { id: 698, class: gr16, preferred-register: '' }
  - { id: 699, class: gr16, preferred-register: '' }
  - { id: 700, class: gr16, preferred-register: '' }
  - { id: 701, class: gr16, preferred-register: '' }
  - { id: 702, class: gr16, preferred-register: '' }
  - { id: 703, class: gr16, preferred-register: '' }
  - { id: 704, class: gr16, preferred-register: '' }
  - { id: 705, class: gr16, preferred-register: '' }
  - { id: 706, class: gr16, preferred-register: '' }
  - { id: 707, class: gr16, preferred-register: '' }
  - { id: 708, class: gr16, preferred-register: '' }
  - { id: 709, class: gr16, preferred-register: '' }
  - { id: 710, class: gr16, preferred-register: '' }
  - { id: 711, class: gr16, preferred-register: '' }
  - { id: 712, class: gr16, preferred-register: '' }
  - { id: 713, class: gr16, preferred-register: '' }
  - { id: 714, class: gr16, preferred-register: '' }
  - { id: 715, class: gr16, preferred-register: '' }
  - { id: 716, class: gr16, preferred-register: '' }
  - { id: 717, class: gr16, preferred-register: '' }
  - { id: 718, class: gr16, preferred-register: '' }
  - { id: 719, class: gr16, preferred-register: '' }
  - { id: 720, class: gr16, preferred-register: '' }
  - { id: 721, class: gr16, preferred-register: '' }
  - { id: 722, class: gr16, preferred-register: '' }
  - { id: 723, class: gr16, preferred-register: '' }
  - { id: 724, class: gr16, preferred-register: '' }
  - { id: 725, class: gr16, preferred-register: '' }
  - { id: 726, class: gr16, preferred-register: '' }
  - { id: 727, class: gr16, preferred-register: '' }
  - { id: 728, class: gr16, preferred-register: '' }
  - { id: 729, class: gr16, preferred-register: '' }
  - { id: 730, class: gr16, preferred-register: '' }
  - { id: 731, class: gr16, preferred-register: '' }
  - { id: 732, class: gr16, preferred-register: '' }
  - { id: 733, class: gr16, preferred-register: '' }
  - { id: 734, class: gr16, preferred-register: '' }
  - { id: 735, class: gr16, preferred-register: '' }
  - { id: 736, class: gr16, preferred-register: '' }
  - { id: 737, class: gr16, preferred-register: '' }
  - { id: 738, class: gr16, preferred-register: '' }
  - { id: 739, class: gr16, preferred-register: '' }
  - { id: 740, class: gr16, preferred-register: '' }
  - { id: 741, class: gr16, preferred-register: '' }
  - { id: 742, class: gr16, preferred-register: '' }
  - { id: 743, class: gr16, preferred-register: '' }
  - { id: 744, class: gr16, preferred-register: '' }
  - { id: 745, class: gr16, preferred-register: '' }
  - { id: 746, class: gr16, preferred-register: '' }
  - { id: 747, class: gr16, preferred-register: '' }
  - { id: 748, class: gr16, preferred-register: '' }
  - { id: 749, class: gr16, preferred-register: '' }
  - { id: 750, class: gr16, preferred-register: '' }
  - { id: 751, class: gr16, preferred-register: '' }
  - { id: 752, class: gr16, preferred-register: '' }
  - { id: 753, class: gr16, preferred-register: '' }
  - { id: 754, class: gr16, preferred-register: '' }
  - { id: 755, class: gr16, preferred-register: '' }
  - { id: 756, class: gr16, preferred-register: '' }
  - { id: 757, class: gr16, preferred-register: '' }
  - { id: 758, class: gr16, preferred-register: '' }
  - { id: 759, class: gr16, preferred-register: '' }
  - { id: 760, class: gr16, preferred-register: '' }
  - { id: 761, class: gr16, preferred-register: '' }
  - { id: 762, class: gr16, preferred-register: '' }
  - { id: 763, class: gr16, preferred-register: '' }
  - { id: 764, class: gr16, preferred-register: '' }
  - { id: 765, class: gr16, preferred-register: '' }
  - { id: 766, class: gr16, preferred-register: '' }
  - { id: 767, class: gr16, preferred-register: '' }
  - { id: 768, class: gr16, preferred-register: '' }
  - { id: 769, class: gr16, preferred-register: '' }
  - { id: 770, class: gr16, preferred-register: '' }
  - { id: 771, class: gr16, preferred-register: '' }
  - { id: 772, class: gr16, preferred-register: '' }
  - { id: 773, class: gr16, preferred-register: '' }
  - { id: 774, class: gr16, preferred-register: '' }
  - { id: 775, class: gr16, preferred-register: '' }
  - { id: 776, class: gr16, preferred-register: '' }
  - { id: 777, class: gr16, preferred-register: '' }
  - { id: 778, class: gr16, preferred-register: '' }
  - { id: 779, class: gr16, preferred-register: '' }
  - { id: 780, class: gr16, preferred-register: '' }
  - { id: 781, class: gr16, preferred-register: '' }
  - { id: 782, class: gr16, preferred-register: '' }
  - { id: 783, class: gr16, preferred-register: '' }
  - { id: 784, class: gr16, preferred-register: '' }
  - { id: 785, class: gr16, preferred-register: '' }
  - { id: 786, class: gr16, preferred-register: '' }
  - { id: 787, class: gr16, preferred-register: '' }
  - { id: 788, class: gr16, preferred-register: '' }
  - { id: 789, class: gr16, preferred-register: '' }
  - { id: 790, class: gr16, preferred-register: '' }
  - { id: 791, class: gr16, preferred-register: '' }
  - { id: 792, class: gr16, preferred-register: '' }
  - { id: 793, class: gr16, preferred-register: '' }
  - { id: 794, class: gr16, preferred-register: '' }
  - { id: 795, class: gr16, preferred-register: '' }
  - { id: 796, class: gr16, preferred-register: '' }
  - { id: 797, class: gr16, preferred-register: '' }
  - { id: 798, class: gr16, preferred-register: '' }
  - { id: 799, class: gr16, preferred-register: '' }
  - { id: 800, class: gr16, preferred-register: '' }
  - { id: 801, class: gr16, preferred-register: '' }
  - { id: 802, class: gr16, preferred-register: '' }
  - { id: 803, class: gr16, preferred-register: '' }
  - { id: 804, class: gr16, preferred-register: '' }
  - { id: 805, class: gr16, preferred-register: '' }
  - { id: 806, class: gr16, preferred-register: '' }
  - { id: 807, class: gr16, preferred-register: '' }
  - { id: 808, class: gr16, preferred-register: '' }
  - { id: 809, class: gr16, preferred-register: '' }
  - { id: 810, class: gr16, preferred-register: '' }
  - { id: 811, class: gr16, preferred-register: '' }
  - { id: 812, class: gr32, preferred-register: '' }
  - { id: 813, class: gr16, preferred-register: '' }
  - { id: 814, class: gr32, preferred-register: '' }
  - { id: 815, class: gr32, preferred-register: '' }
  - { id: 816, class: gr32, preferred-register: '' }
  - { id: 817, class: gr32, preferred-register: '' }
  - { id: 818, class: gr32, preferred-register: '' }
  - { id: 819, class: gr32, preferred-register: '' }
  - { id: 820, class: gr64, preferred-register: '' }
  - { id: 821, class: gr64, preferred-register: '' }
  - { id: 822, class: gr32, preferred-register: '' }
  - { id: 823, class: gr16, preferred-register: '' }
  - { id: 824, class: gr16, preferred-register: '' }
  - { id: 825, class: gr32, preferred-register: '' }
  - { id: 826, class: gr16, preferred-register: '' }
  - { id: 827, class: gr32, preferred-register: '' }
  - { id: 828, class: gr32, preferred-register: '' }
  - { id: 829, class: gr32, preferred-register: '' }
  - { id: 830, class: gr32, preferred-register: '' }
  - { id: 831, class: gr32, preferred-register: '' }
  - { id: 832, class: gr32, preferred-register: '' }
  - { id: 833, class: gr64, preferred-register: '' }
  - { id: 834, class: gr64, preferred-register: '' }
  - { id: 835, class: gr32, preferred-register: '' }
  - { id: 836, class: gr64, preferred-register: '' }
  - { id: 837, class: gr64, preferred-register: '' }
  - { id: 838, class: gr64, preferred-register: '' }
  - { id: 839, class: gr64, preferred-register: '' }
  - { id: 840, class: gr64, preferred-register: '' }
  - { id: 841, class: gr64, preferred-register: '' }
  - { id: 842, class: gr64, preferred-register: '' }
  - { id: 843, class: gr64, preferred-register: '' }
  - { id: 844, class: gr64, preferred-register: '' }
  - { id: 845, class: gr64, preferred-register: '' }
  - { id: 846, class: gr64, preferred-register: '' }
  - { id: 847, class: gr64, preferred-register: '' }
  - { id: 848, class: gr64, preferred-register: '' }
  - { id: 849, class: gr64, preferred-register: '' }
  - { id: 850, class: gr64, preferred-register: '' }
  - { id: 851, class: gr64, preferred-register: '' }
  - { id: 852, class: gr64, preferred-register: '' }
  - { id: 853, class: gr64, preferred-register: '' }
  - { id: 854, class: gr64, preferred-register: '' }
  - { id: 855, class: gr64, preferred-register: '' }
  - { id: 856, class: gr64, preferred-register: '' }
  - { id: 857, class: gr64, preferred-register: '' }
  - { id: 858, class: gr64, preferred-register: '' }
  - { id: 859, class: gr64, preferred-register: '' }
  - { id: 860, class: gr64, preferred-register: '' }
  - { id: 861, class: gr64, preferred-register: '' }
  - { id: 862, class: gr64, preferred-register: '' }
  - { id: 863, class: gr64, preferred-register: '' }
  - { id: 864, class: gr64, preferred-register: '' }
  - { id: 865, class: gr64, preferred-register: '' }
  - { id: 866, class: gr64, preferred-register: '' }
  - { id: 867, class: gr64, preferred-register: '' }
  - { id: 868, class: gr64, preferred-register: '' }
  - { id: 869, class: gr64, preferred-register: '' }
  - { id: 870, class: gr64, preferred-register: '' }
  - { id: 871, class: gr64, preferred-register: '' }
  - { id: 872, class: gr64, preferred-register: '' }
  - { id: 873, class: gr64, preferred-register: '' }
  - { id: 874, class: gr64, preferred-register: '' }
  - { id: 875, class: gr64, preferred-register: '' }
  - { id: 876, class: gr64, preferred-register: '' }
  - { id: 877, class: gr64, preferred-register: '' }
  - { id: 878, class: gr64, preferred-register: '' }
  - { id: 879, class: gr64, preferred-register: '' }
  - { id: 880, class: gr64, preferred-register: '' }
  - { id: 881, class: gr64, preferred-register: '' }
  - { id: 882, class: gr64, preferred-register: '' }
  - { id: 883, class: gr64, preferred-register: '' }
  - { id: 884, class: gr64, preferred-register: '' }
  - { id: 885, class: gr64, preferred-register: '' }
  - { id: 886, class: gr64, preferred-register: '' }
  - { id: 887, class: gr64, preferred-register: '' }
  - { id: 888, class: gr64, preferred-register: '' }
  - { id: 889, class: gr64, preferred-register: '' }
  - { id: 890, class: gr64, preferred-register: '' }
  - { id: 891, class: gr64, preferred-register: '' }
  - { id: 892, class: gr64, preferred-register: '' }
  - { id: 893, class: gr64, preferred-register: '' }
  - { id: 894, class: gr64, preferred-register: '' }
  - { id: 895, class: gr64, preferred-register: '' }
  - { id: 896, class: gr64, preferred-register: '' }
  - { id: 897, class: gr64, preferred-register: '' }
  - { id: 898, class: gr64, preferred-register: '' }
  - { id: 899, class: gr64, preferred-register: '' }
  - { id: 900, class: gr64, preferred-register: '' }
  - { id: 901, class: gr64, preferred-register: '' }
  - { id: 902, class: gr64, preferred-register: '' }
  - { id: 903, class: gr64, preferred-register: '' }
  - { id: 904, class: gr64, preferred-register: '' }
  - { id: 905, class: gr64, preferred-register: '' }
  - { id: 906, class: gr64, preferred-register: '' }
  - { id: 907, class: gr64, preferred-register: '' }
  - { id: 908, class: gr64, preferred-register: '' }
  - { id: 909, class: gr64, preferred-register: '' }
  - { id: 910, class: gr64, preferred-register: '' }
  - { id: 911, class: gr64, preferred-register: '' }
  - { id: 912, class: gr64, preferred-register: '' }
  - { id: 913, class: gr64, preferred-register: '' }
  - { id: 914, class: gr64, preferred-register: '' }
  - { id: 915, class: gr64, preferred-register: '' }
  - { id: 916, class: gr64, preferred-register: '' }
  - { id: 917, class: gr64, preferred-register: '' }
  - { id: 918, class: gr64, preferred-register: '' }
  - { id: 919, class: gr64, preferred-register: '' }
  - { id: 920, class: gr64, preferred-register: '' }
  - { id: 921, class: gr64, preferred-register: '' }
  - { id: 922, class: gr64, preferred-register: '' }
  - { id: 923, class: gr64, preferred-register: '' }
  - { id: 924, class: gr64, preferred-register: '' }
  - { id: 925, class: gr64, preferred-register: '' }
  - { id: 926, class: gr64, preferred-register: '' }
  - { id: 927, class: gr64, preferred-register: '' }
  - { id: 928, class: gr64, preferred-register: '' }
  - { id: 929, class: gr64, preferred-register: '' }
  - { id: 930, class: gr64, preferred-register: '' }
  - { id: 931, class: gr64, preferred-register: '' }
  - { id: 932, class: gr64, preferred-register: '' }
  - { id: 933, class: gr64, preferred-register: '' }
  - { id: 934, class: gr64, preferred-register: '' }
  - { id: 935, class: gr64, preferred-register: '' }
  - { id: 936, class: gr64, preferred-register: '' }
  - { id: 937, class: gr64, preferred-register: '' }
  - { id: 938, class: gr64, preferred-register: '' }
  - { id: 939, class: gr64, preferred-register: '' }
  - { id: 940, class: gr64, preferred-register: '' }
  - { id: 941, class: gr64, preferred-register: '' }
  - { id: 942, class: gr64, preferred-register: '' }
  - { id: 943, class: gr64, preferred-register: '' }
  - { id: 944, class: gr64, preferred-register: '' }
  - { id: 945, class: gr64, preferred-register: '' }
  - { id: 946, class: gr64, preferred-register: '' }
  - { id: 947, class: gr64, preferred-register: '' }
  - { id: 948, class: gr64, preferred-register: '' }
  - { id: 949, class: gr64, preferred-register: '' }
  - { id: 950, class: gr64, preferred-register: '' }
  - { id: 951, class: gr64, preferred-register: '' }
  - { id: 952, class: gr64, preferred-register: '' }
  - { id: 953, class: gr64, preferred-register: '' }
  - { id: 954, class: gr64, preferred-register: '' }
  - { id: 955, class: gr64, preferred-register: '' }
  - { id: 956, class: gr64, preferred-register: '' }
  - { id: 957, class: gr64, preferred-register: '' }
  - { id: 958, class: gr64, preferred-register: '' }
  - { id: 959, class: gr64, preferred-register: '' }
  - { id: 960, class: gr64, preferred-register: '' }
  - { id: 961, class: gr64, preferred-register: '' }
  - { id: 962, class: gr64, preferred-register: '' }
  - { id: 963, class: gr64, preferred-register: '' }
  - { id: 964, class: gr64, preferred-register: '' }
  - { id: 965, class: gr64, preferred-register: '' }
  - { id: 966, class: gr64, preferred-register: '' }
  - { id: 967, class: gr64, preferred-register: '' }
  - { id: 968, class: gr64, preferred-register: '' }
  - { id: 969, class: gr64, preferred-register: '' }
  - { id: 970, class: gr64, preferred-register: '' }
  - { id: 971, class: gr64, preferred-register: '' }
  - { id: 972, class: gr64, preferred-register: '' }
  - { id: 973, class: gr64, preferred-register: '' }
  - { id: 974, class: gr64, preferred-register: '' }
  - { id: 975, class: gr64, preferred-register: '' }
  - { id: 976, class: gr64, preferred-register: '' }
  - { id: 977, class: gr64, preferred-register: '' }
  - { id: 978, class: gr64, preferred-register: '' }
  - { id: 979, class: gr64, preferred-register: '' }
  - { id: 980, class: gr64, preferred-register: '' }
  - { id: 981, class: gr64, preferred-register: '' }
  - { id: 982, class: gr64, preferred-register: '' }
  - { id: 983, class: gr64, preferred-register: '' }
  - { id: 984, class: gr64, preferred-register: '' }
  - { id: 985, class: gr64, preferred-register: '' }
  - { id: 986, class: gr64, preferred-register: '' }
  - { id: 987, class: gr64, preferred-register: '' }
  - { id: 988, class: gr64, preferred-register: '' }
  - { id: 989, class: gr64, preferred-register: '' }
  - { id: 990, class: gr64, preferred-register: '' }
  - { id: 991, class: gr64, preferred-register: '' }
  - { id: 992, class: gr64, preferred-register: '' }
  - { id: 993, class: gr64, preferred-register: '' }
  - { id: 994, class: gr64, preferred-register: '' }
  - { id: 995, class: gr64, preferred-register: '' }
  - { id: 996, class: gr64, preferred-register: '' }
  - { id: 997, class: gr64, preferred-register: '' }
  - { id: 998, class: gr64, preferred-register: '' }
  - { id: 999, class: gr64, preferred-register: '' }
  - { id: 1000, class: gr64, preferred-register: '' }
  - { id: 1001, class: gr64, preferred-register: '' }
  - { id: 1002, class: gr64, preferred-register: '' }
  - { id: 1003, class: gr64, preferred-register: '' }
  - { id: 1004, class: gr32, preferred-register: '' }
  - { id: 1005, class: gr32, preferred-register: '' }
  - { id: 1006, class: gr64, preferred-register: '' }
  - { id: 1007, class: gr32, preferred-register: '' }
  - { id: 1008, class: gr32, preferred-register: '' }
  - { id: 1009, class: gr32, preferred-register: '' }
  - { id: 1010, class: gr32, preferred-register: '' }
  - { id: 1011, class: gr64, preferred-register: '' }
  - { id: 1012, class: gr64, preferred-register: '' }
  - { id: 1013, class: gr32, preferred-register: '' }
  - { id: 1014, class: gr64, preferred-register: '' }
  - { id: 1015, class: gr64, preferred-register: '' }
  - { id: 1016, class: gr64, preferred-register: '' }
  - { id: 1017, class: gr64, preferred-register: '' }
  - { id: 1018, class: gr64, preferred-register: '' }
  - { id: 1019, class: gr64, preferred-register: '' }
  - { id: 1020, class: gr32, preferred-register: '' }
  - { id: 1021, class: gr32, preferred-register: '' }
  - { id: 1022, class: gr64, preferred-register: '' }
  - { id: 1023, class: gr32, preferred-register: '' }
  - { id: 1024, class: gr32, preferred-register: '' }
  - { id: 1025, class: gr32, preferred-register: '' }
  - { id: 1026, class: gr32, preferred-register: '' }
  - { id: 1027, class: gr64, preferred-register: '' }
  - { id: 1028, class: gr64, preferred-register: '' }
  - { id: 1029, class: gr32, preferred-register: '' }
  - { id: 1030, class: gr64, preferred-register: '' }
  - { id: 1031, class: gr64, preferred-register: '' }
  - { id: 1032, class: gr64, preferred-register: '' }
  - { id: 1033, class: gr64, preferred-register: '' }
  - { id: 1034, class: gr64, preferred-register: '' }
  - { id: 1035, class: gr64, preferred-register: '' }
  - { id: 1036, class: gr32, preferred-register: '' }
  - { id: 1037, class: gr32, preferred-register: '' }
  - { id: 1038, class: gr64, preferred-register: '' }
  - { id: 1039, class: gr32, preferred-register: '' }
  - { id: 1040, class: gr32, preferred-register: '' }
  - { id: 1041, class: gr32, preferred-register: '' }
  - { id: 1042, class: gr32, preferred-register: '' }
  - { id: 1043, class: gr64, preferred-register: '' }
  - { id: 1044, class: gr64, preferred-register: '' }
  - { id: 1045, class: gr32, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 10, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 11, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.0 (%ir-block.0):
    ADJCALLSTACKDOWN64 32, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 &__main, csr_win64, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV32mi %stack.0, 1, $noreg, 0, $noreg, 300 :: (store (s32) into %ir.5, align 8)
    %1044:gr64 = MOV32ri64 2147352576
    %1045:gr32 = MOV32rm %1044, 1, $noreg, 0, $noreg :: (load (s32) from %ir.8)
    %1042:gr32 = SHR32ri %1045, 8, implicit-def $eflags
    %1040:gr32 = AND32ri %1042, 255, implicit-def $eflags
    %1037:gr32 = MOV32rr %1040
    %1038:gr64 = SUBREG_TO_REG 0, %1037, %subreg.sub_32bit
    %1034:gr64 = MOV64ri 4301250715357807179
    %1035:gr64 = ADD64rr %1038, %1034, implicit-def $eflags
    %1030:gr64 = MOV64ri 6597419133114160879
    $rcx = COPY %1035
    $cl = KILL killed $rcx
    %1032:gr64 = SHR64rCL %1030, implicit-def $eflags, implicit $cl
    %1028:gr64 = MOV32ri64 2147352576
    %1029:gr32 = MOV32rm %1028, 1, $noreg, 0, $noreg :: (load (s32) from %ir.15)
    %1026:gr32 = SHR32ri %1029, 8, implicit-def $eflags
    %1024:gr32 = AND32ri %1026, 255, implicit-def $eflags
    %1021:gr32 = MOV32rr %1024
    %1022:gr64 = SUBREG_TO_REG 0, %1021, %subreg.sub_32bit
    %1018:gr64 = MOV64ri -5401555618185310808
    %1019:gr64 = ADD64rr %1022, %1018, implicit-def $eflags
    %1015:gr64 = MOV64ri 3931091994120062661
    %1016:gr64 = IMUL64rr %1019, %1015, implicit-def $eflags
    %1012:gr64 = MOV32ri64 2147352576
    %1013:gr32 = MOV32rm %1012, 1, $noreg, 0, $noreg :: (load (s32) from %ir.22)
    %1010:gr32 = SHR32ri %1013, 8, implicit-def $eflags
    %1008:gr32 = AND32ri %1010, 255, implicit-def $eflags
    %1005:gr32 = MOV32rr %1008
    %1006:gr64 = SUBREG_TO_REG 0, %1005, %subreg.sub_32bit
    %1002:gr64 = MOV64ri -3725718841275263683
    %1003:gr64 = ADD64rr %1006, %1002, implicit-def $eflags
    %999:gr64 = MOV64ri -7868861332125761690
    %1000:gr64 = OR64rr %1003, %999, implicit-def $eflags
    %997:gr64 = XOR64rr %1000, %1016, implicit-def $eflags
    %995:gr64 = IMUL64rr %1032, %1000, implicit-def $eflags
    %992:gr64 = ADD64rr %995, %997, implicit-def $eflags
    %991:gr64 = XOR64rr %995, %997, implicit-def $eflags
    %988:gr64 = ADD64rr %991, %992, implicit-def $eflags
    %987:gr64 = XOR64rr %991, %992, implicit-def $eflags
    %986:gr64 = IMUL64rr %992, %991, implicit-def $eflags
    %983:gr64 = OR64rr %988, %986, implicit-def $eflags
    $rcx = COPY %987
    $cl = KILL killed $rcx
    %982:gr64 = SHL64rCL %986, implicit-def $eflags, implicit $cl
    $rcx = COPY %988
    $cl = KILL killed $rcx
    %980:gr64 = SHR64rCL %986, implicit-def $eflags, implicit $cl
    %977:gr64 = XOR64ri32 %980, -1, implicit-def $eflags
    %975:gr64 = IMUL64rr %983, %982, implicit-def $eflags
    %972:gr64 = ADD64rr %977, %975, implicit-def $eflags
    $rcx = COPY %977
    $cl = KILL killed $rcx
    %971:gr64 = SHL64rCL %975, implicit-def $eflags, implicit $cl
    %968:gr64 = SUB64rr %972, %971, implicit-def $eflags
    $rcx = COPY %971
    $cl = KILL killed $rcx
    %967:gr64 = SHR64rCL %972, implicit-def $eflags, implicit $cl
    %965:gr64 = XOR64ri32 %972, -1, implicit-def $eflags
    $rcx = COPY %965
    $cl = KILL killed $rcx
    %963:gr64 = SHL64rCL %968, implicit-def $eflags, implicit $cl
    %961:gr64 = XOR64rr %967, %965, implicit-def $eflags
    %960:gr64 = IMUL64rr %967, %965, implicit-def $eflags
    %957:gr64 = IMUL64rr %960, %963, implicit-def $eflags
    %956:gr64 = XOR64ri32 %961, -1, implicit-def $eflags
    %954:gr64 = ADD64rr %963, %960, implicit-def $eflags
    %951:gr64 = IMUL64rr %954, %956, implicit-def $eflags
    %950:gr64 = ADD64rr %954, %956, implicit-def $eflags
    %948:gr64 = ADD64rr %957, %956, implicit-def $eflags
    %945:gr64 = IMUL64rr %951, %950, implicit-def $eflags
    %943:gr64 = OR64rr %951, %948, implicit-def $eflags
    %942:gr64 = XOR64rr %948, %951, implicit-def $eflags
    %939:gr64 = XOR64rr %943, %945, implicit-def $eflags
    %937:gr64 = ADD64rr %943, %942, implicit-def $eflags
    %935:gr64 = XOR64ri32 %942, -1, implicit-def $eflags
    %933:gr64 = ADD64rr %939, %937, implicit-def $eflags
    %932:gr64 = OR64rr %937, %939, implicit-def $eflags
    %930:gr64 = OR64rr %939, %935, implicit-def $eflags
    %927:gr64 = OR64rr %932, %930, implicit-def $eflags
    $rcx = COPY %930
    $cl = KILL killed $rcx
    %926:gr64 = SHR64rCL %933, implicit-def $eflags, implicit $cl
    %924:gr64 = SUB64rr %932, %933, implicit-def $eflags
    %921:gr64 = OR64rr %924, %926, implicit-def $eflags
    $rcx = COPY %926
    $cl = KILL killed $rcx
    %920:gr64 = SHR64rCL %924, implicit-def $eflags, implicit $cl
    %918:gr64 = IMUL64rr %926, %927, implicit-def $eflags
    $rcx = COPY %921
    $cl = KILL killed $rcx
    %915:gr64 = SHR64rCL %920, implicit-def $eflags, implicit $cl
    %913:gr64 = ADD64rr %921, %918, implicit-def $eflags
    %911:gr64 = XOR64ri32 %921, -1, implicit-def $eflags
    $rcx = COPY %915
    $cl = KILL killed $rcx
    %909:gr64 = SHR64rCL %913, implicit-def $eflags, implicit $cl
    %908:gr64 = SUB64rr %913, %911, implicit-def $eflags
    %906:gr64 = XOR64rr %915, %911, implicit-def $eflags
    %903:gr64 = SUB64rr %909, %908, implicit-def $eflags
    %902:gr64 = OR64rr %908, %906, implicit-def $eflags
    %900:gr64 = XOR64rr %909, %906, implicit-def $eflags
    %897:gr64 = IMUL64rr %902, %903, implicit-def $eflags
    $rcx = COPY %900
    $cl = KILL killed $rcx
    %896:gr64 = SHL64rCL %902, implicit-def $eflags, implicit $cl
    %894:gr64 = IMUL64rr %902, %903, implicit-def $eflags
    %891:gr64 = IMUL64rr %894, %897, implicit-def $eflags
    $rcx = COPY %896
    $cl = KILL killed $rcx
    %889:gr64 = SHR64rCL %894, implicit-def $eflags, implicit $cl
    %886:gr64 = XOR64ri32 %891, -1, implicit-def $eflags
    %885:gr64 = SUB64rr %891, %889, implicit-def $eflags
    $rcx = COPY %886
    $cl = KILL killed $rcx
    %882:gr64 = SHL64rCL %885, implicit-def $eflags, implicit $cl
    %881:gr64 = XOR64ri32 %885, -1, implicit-def $eflags
    %879:gr64 = XOR64ri32 %886, -1, implicit-def $eflags
    %877:gr64 = SUB64rr %879, %882, implicit-def $eflags
    %875:gr64 = XOR64rr %879, %881, implicit-def $eflags
    %874:gr64 = OR64rr %881, %879, implicit-def $eflags
    %871:gr64 = IMUL64rr %877, %874, implicit-def $eflags
    $rcx = COPY %875
    $cl = KILL killed $rcx
    %870:gr64 = SHR64rCL %877, implicit-def $eflags, implicit $cl
    %868:gr64 = OR64rr %875, %874, implicit-def $eflags
    %865:gr64 = OR64rr %868, %870, implicit-def $eflags
    %863:gr64 = XOR64ri32 %868, -1, implicit-def $eflags
    %862:gr64 = ADD64rr %868, %871, implicit-def $eflags
    %859:gr64 = OR64rr %863, %865, implicit-def $eflags
    %858:gr64 = IMUL64rr %863, %865, implicit-def $eflags
    %856:gr64 = SUB64rr %862, %865, implicit-def $eflags
    $rcx = COPY %858
    $cl = KILL killed $rcx
    %853:gr64 = SHL64rCL %859, implicit-def $eflags, implicit $cl
    $rcx = COPY %858
    $cl = KILL killed $rcx
    %852:gr64 = SHL64rCL %859, implicit-def $eflags, implicit $cl
    %850:gr64 = OR64rr %858, %856, implicit-def $eflags
    %847:gr64 = XOR64rr %852, %850, implicit-def $eflags
    %845:gr64 = SUB64rr %850, %853, implicit-def $eflags
    %842:gr64 = ADD64rr %845, %847, implicit-def $eflags
    %838:gr64 = MOV64ri 8030878517760778615
    %839:gr64 = XOR64rr %842, %838, implicit-def $eflags
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %839 :: (store (s64) into %ir.113)
    %834:gr64 = MOV32ri64 2147352576
    %835:gr32 = MOV32rm %834, 1, $noreg, 0, $noreg :: (load (s32) from %ir.114)
    %832:gr32 = SHR32ri %835, 8, implicit-def $eflags
    %830:gr32 = AND32ri %832, 255, implicit-def $eflags
    %828:gr32 = ADD32ri %830, 27727, implicit-def $eflags
    %826:gr16 = COPY %828.sub_16bit
    %824:gr16 = OR16ri %826, 12264, implicit-def $eflags
    %821:gr64 = MOV32ri64 2147352576
    %822:gr32 = MOV32rm %821, 1, $noreg, 0, $noreg :: (load (s32) from %ir.121)
    %819:gr32 = SHR32ri %822, 8, implicit-def $eflags
    %817:gr32 = AND32ri %819, 255, implicit-def $eflags
    %815:gr32 = ADD32ri %817, 19601, implicit-def $eflags
    %813:gr16 = COPY %815.sub_16bit
    %811:gr16 = XOR16ri %813, 24418, implicit-def $eflags
    %809:gr16 = IMUL16rr %824, %811, implicit-def $eflags
    %807:gr16 = XOR16ri %811, -1, implicit-def $eflags
    %805:gr16 = XOR16ri %807, -1, implicit-def $eflags
    %804:gr16 = ADD16rr %807, %809, implicit-def $eflags
    $cx = COPY %807
    $cl = KILL killed $cx
    %803:gr16 = SHL16rCL %809, implicit-def $eflags, implicit $cl
    %800:gr16 = SUB16rr %804, %805, implicit-def $eflags
    $cx = COPY %804
    $cl = KILL killed $cx
    %799:gr16 = SHL16rCL %803, implicit-def $eflags, implicit $cl
    %797:gr16 = IMUL16rr %805, %803, implicit-def $eflags
    $cx = COPY %799
    $cl = KILL killed $cx
    %794:gr16 = SHR16rCL %800, implicit-def $eflags, implicit $cl
    %792:gr16 = IMUL16rr %799, %797, implicit-def $eflags
    %791:gr16 = SUB16rr %797, %799, implicit-def $eflags
    %788:gr16 = XOR16ri %794, -1, implicit-def $eflags
    %786:gr16 = OR16rr %791, %792, implicit-def $eflags
    %785:gr16 = SUB16rr %792, %791, implicit-def $eflags
    %782:gr16 = SUB16rr %785, %786, implicit-def $eflags
    %781:gr16 = ADD16rr %786, %788, implicit-def $eflags
    %779:gr16 = SUB16rr %785, %788, implicit-def $eflags
    $cx = COPY %779
    $cl = KILL killed $cx
    %776:gr16 = SHL16rCL %782, implicit-def $eflags, implicit $cl
    %775:gr16 = IMUL16rr %782, %779, implicit-def $eflags
    %773:gr16 = IMUL16rr %779, %781, implicit-def $eflags
    %770:gr16 = XOR16rr %776, %775, implicit-def $eflags
    %768:gr16 = OR16rr %773, %776, implicit-def $eflags
    %765:gr16 = ADD16rr %770, %768, implicit-def $eflags
    %764:gr16 = IMUL16rr %770, %768, implicit-def $eflags
    %761:gr16 = XOR16rr %765, %764, implicit-def $eflags
    %760:gr16 = ADD16rr %764, %765, implicit-def $eflags
    %757:gr16 = ADD16rr %761, %760, implicit-def $eflags
    %756:gr16 = XOR16rr %760, %761, implicit-def $eflags
    %755:gr16 = XOR16rr %761, %760, implicit-def $eflags
    $cx = COPY %757
    $cl = KILL killed $cx
    %752:gr16 = SHL16rCL %756, implicit-def $eflags, implicit $cl
    %750:gr16 = ADD16rr %755, %756, implicit-def $eflags
    %747:gr16 = IMUL16rr %750, %752, implicit-def $eflags
    %746:gr16 = SUB16rr %750, %752, implicit-def $eflags
    %743:gr16 = XOR16rr %747, %746, implicit-def $eflags
    %742:gr16 = XOR16ri %746, -1, implicit-def $eflags
    %740:gr16 = XOR16ri %747, -1, implicit-def $eflags
    %738:gr16 = ADD16rr %742, %743, implicit-def $eflags
    %737:gr16 = OR16rr %740, %742, implicit-def $eflags
    %735:gr16 = XOR16rr %740, %743, implicit-def $eflags
    %732:gr16 = SUB16rr %735, %737, implicit-def $eflags
    $cx = COPY %738
    $cl = KILL killed $cx
    %730:gr16 = SHL16rCL %737, implicit-def $eflags, implicit $cl
    %729:gr16 = IMUL16rr %738, %737, implicit-def $eflags
    %726:gr16 = OR16rr %730, %732, implicit-def $eflags
    %724:gr16 = XOR16ri %729, -1, implicit-def $eflags
    $cx = COPY %732
    $cl = KILL killed $cx
    %723:gr16 = SHR16rCL %729, implicit-def $eflags, implicit $cl
    %720:gr16 = XOR16ri %724, -1, implicit-def $eflags
    %719:gr16 = ADD16rr %726, %723, implicit-def $eflags
    $cx = COPY %724
    $cl = KILL killed $cx
    %717:gr16 = SHL16rCL %726, implicit-def $eflags, implicit $cl
    %714:gr16 = XOR16ri %720, -1, implicit-def $eflags
    $cx = COPY %719
    $cl = KILL killed $cx
    %713:gr16 = SHR16rCL %717, implicit-def $eflags, implicit $cl
    %711:gr16 = IMUL16rr %719, %720, implicit-def $eflags
    $cx = COPY %711
    $cl = KILL killed $cx
    %708:gr16 = SHL16rCL %713, implicit-def $eflags, implicit $cl
    %706:gr16 = XOR16rr %714, %713, implicit-def $eflags
    %704:gr16 = XOR16ri %714, -1, implicit-def $eflags
    %702:gr16 = ADD16rr %704, %708, implicit-def $eflags
    %700:gr16 = IMUL16rr %706, %704, implicit-def $eflags
    %699:gr16 = ADD16rr %704, %706, implicit-def $eflags
    %696:gr16 = XOR16rr %699, %700, implicit-def $eflags
    %693:gr16 = XOR16ri %702, -1, implicit-def $eflags
    %691:gr16 = XOR16ri %696, -1, implicit-def $eflags
    %690:gr16 = XOR16ri %696, -1, implicit-def $eflags
    %689:gr16 = ADD16rr %696, %693, implicit-def $eflags
    %686:gr16 = IMUL16rr %690, %689, implicit-def $eflags
    %685:gr16 = XOR16rr %691, %689, implicit-def $eflags
    $cx = COPY %690
    $cl = KILL killed $cx
    %683:gr16 = SHL16rCL %689, implicit-def $eflags, implicit $cl
    $cx = COPY %685
    $cl = KILL killed $cx
    %680:gr16 = SHL16rCL %686, implicit-def $eflags, implicit $cl
    %678:gr16 = XOR16rr %685, %683, implicit-def $eflags
    %677:gr16 = SUB16rr %683, %685, implicit-def $eflags
    %674:gr16 = XOR16rr %677, %680, implicit-def $eflags
    $cx = COPY %680
    $cl = KILL killed $cx
    %673:gr16 = SHR16rCL %678, implicit-def $eflags, implicit $cl
    %671:gr16 = OR16rr %677, %678, implicit-def $eflags
    %668:gr16 = IMUL16rr %671, %673, implicit-def $eflags
    %667:gr16 = ADD16rr %674, %671, implicit-def $eflags
    %665:gr16 = SUB16rr %673, %674, implicit-def $eflags
    %662:gr16 = OR16rr %665, %667, implicit-def $eflags
    $cx = COPY %665
    $cl = KILL killed $cx
    %660:gr16 = SHR16rCL %668, implicit-def $eflags, implicit $cl
    $cx = COPY %662
    $cl = KILL killed $cx
    %657:gr16 = SHR16rCL %660, implicit-def $eflags, implicit $cl
    %654:gr16 = XOR16ri %657, 114, implicit-def $eflags
    MOV16mr %stack.4, 1, $noreg, 8, $noreg, %654 :: (store (s16) into %ir.219)
    %651:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, %651 :: (store (s64) into %ir.6)
    MOV32mi %stack.1, 1, $noreg, 0, $noreg, 90000 :: (store (s32) into %ir.221, align 8)
    %648:gr64 = MOV32ri64 2147352576
    %649:gr32 = MOV32rm %648, 1, $noreg, 0, $noreg :: (load (s32) from %ir.224)
    %646:gr32 = SHR32ri %649, 8, implicit-def $eflags
    %644:gr32 = AND32ri %646, 255, implicit-def $eflags
    %641:gr32 = MOV32rr %644
    %642:gr64 = SUBREG_TO_REG 0, %641, %subreg.sub_32bit
    %638:gr64 = MOV64ri 569506267795969050
    %639:gr64 = ADD64rr %642, %638, implicit-def $eflags
    %635:gr64 = MOV64ri -6721089043960457534
    %636:gr64 = IMUL64rr %639, %635, implicit-def $eflags
    %632:gr64 = MOV32ri64 2147352576
    %633:gr32 = MOV32rm %632, 1, $noreg, 0, $noreg :: (load (s32) from %ir.231)
    %630:gr32 = SHR32ri %633, 8, implicit-def $eflags
    %628:gr32 = AND32ri %630, 255, implicit-def $eflags
    %625:gr32 = MOV32rr %628
    %626:gr64 = SUBREG_TO_REG 0, %625, %subreg.sub_32bit
    %622:gr64 = MOV64ri -2691975893715720134
    %623:gr64 = ADD64rr %626, %622, implicit-def $eflags
    %619:gr64 = MOV64ri 9055538531896245800
    %620:gr64 = XOR64rr %623, %619, implicit-def $eflags
    %617:gr64 = XOR64rr %620, %636, implicit-def $eflags
    %616:gr64 = OR64rr %620, %636, implicit-def $eflags
    %613:gr64 = XOR64ri32 %617, -1, implicit-def $eflags
    %612:gr64 = XOR64rr %616, %617, implicit-def $eflags
    %611:gr64 = XOR64rr %617, %616, implicit-def $eflags
    %608:gr64 = XOR64ri32 %613, -1, implicit-def $eflags
    $rcx = COPY %613
    $cl = KILL killed $rcx
    %607:gr64 = SHL64rCL %611, implicit-def $eflags, implicit $cl
    %605:gr64 = OR64rr %612, %611, implicit-def $eflags
    %602:gr64 = XOR64rr %605, %607, implicit-def $eflags
    %601:gr64 = XOR64rr %605, %607, implicit-def $eflags
    $rcx = COPY %607
    $cl = KILL killed $rcx
    %599:gr64 = SHL64rCL %608, implicit-def $eflags, implicit $cl
    %596:gr64 = ADD64rr %602, %601, implicit-def $eflags
    $rcx = COPY %599
    $cl = KILL killed $rcx
    %595:gr64 = SHR64rCL %601, implicit-def $eflags, implicit $cl
    %593:gr64 = SUB64rr %602, %599, implicit-def $eflags
    %590:gr64 = OR64rr %595, %593, implicit-def $eflags
    %589:gr64 = IMUL64rr %596, %593, implicit-def $eflags
    %586:gr64 = XOR64ri32 %595, -1, implicit-def $eflags
    %584:gr64 = OR64rr %589, %586, implicit-def $eflags
    $rcx = COPY %590
    $cl = KILL killed $rcx
    %582:gr64 = SHL64rCL %586, implicit-def $eflags, implicit $cl
    $rcx = COPY %590
    $cl = KILL killed $rcx
    %581:gr64 = SHL64rCL %586, implicit-def $eflags, implicit $cl
    $rcx = COPY %581
    $cl = KILL killed $rcx
    %578:gr64 = SHL64rCL %584, implicit-def $eflags, implicit $cl
    %577:gr64 = SUB64rr %581, %584, implicit-def $eflags
    %575:gr64 = XOR64rr %582, %584, implicit-def $eflags
    %572:gr64 = XOR64ri32 %575, -1, implicit-def $eflags
    $rcx = COPY %577
    $cl = KILL killed $rcx
    %571:gr64 = SHL64rCL %575, implicit-def $eflags, implicit $cl
    %569:gr64 = SUB64rr %577, %578, implicit-def $eflags
    %566:gr64 = ADD64rr %571, %569, implicit-def $eflags
    %565:gr64 = IMUL64rr %569, %572, implicit-def $eflags
    %563:gr64 = SUB64rr %571, %572, implicit-def $eflags
    %560:gr64 = ADD64rr %563, %565, implicit-def $eflags
    %559:gr64 = IMUL64rr %566, %563, implicit-def $eflags
    $rcx = COPY %565
    $cl = KILL killed $rcx
    %557:gr64 = SHR64rCL %563, implicit-def $eflags, implicit $cl
    %554:gr64 = OR64rr %557, %559, implicit-def $eflags
    $rcx = COPY %557
    $cl = KILL killed $rcx
    %553:gr64 = SHL64rCL %559, implicit-def $eflags, implicit $cl
    %551:gr64 = XOR64rr %560, %557, implicit-def $eflags
    %548:gr64 = IMUL64rr %554, %551, implicit-def $eflags
    %546:gr64 = OR64rr %553, %551, implicit-def $eflags
    %543:gr64 = XOR64ri32 %548, -1, implicit-def $eflags
    %542:gr64 = XOR64rr %546, %548, implicit-def $eflags
    %539:gr64 = XOR64ri32 %543, -1, implicit-def $eflags
    $rcx = COPY %542
    $cl = KILL killed $rcx
    %538:gr64 = SHL64rCL %543, implicit-def $eflags, implicit $cl
    %537:gr64 = XOR64rr %543, %542, implicit-def $eflags
    %534:gr64 = XOR64rr %539, %538, implicit-def $eflags
    $rcx = COPY %538
    $cl = KILL killed $rcx
    %533:gr64 = SHL64rCL %537, implicit-def $eflags, implicit $cl
    %531:gr64 = IMUL64rr %538, %539, implicit-def $eflags
    %528:gr64 = IMUL64rr %531, %534, implicit-def $eflags
    $rcx = COPY %531
    $cl = KILL killed $rcx
    %527:gr64 = SHR64rCL %534, implicit-def $eflags, implicit $cl
    %525:gr64 = SUB64rr %533, %534, implicit-def $eflags
    %522:gr64 = IMUL64rr %527, %528, implicit-def $eflags
    $rcx = COPY %527
    $cl = KILL killed $rcx
    %521:gr64 = SHR64rCL %525, implicit-def $eflags, implicit $cl
    %519:gr64 = SUB64rr %528, %525, implicit-def $eflags
    %516:gr64 = SUB64rr %521, %522, implicit-def $eflags
    %515:gr64 = OR64rr %521, %522, implicit-def $eflags
    %513:gr64 = OR64rr %521, %519, implicit-def $eflags
    $rcx = COPY %516
    $cl = KILL killed $rcx
    %510:gr64 = SHR64rCL %513, implicit-def $eflags, implicit $cl
    %509:gr64 = XOR64rr %513, %516, implicit-def $eflags
    %506:gr64 = XOR64ri32 %515, -1, implicit-def $eflags
    %504:gr64 = SUB64rr %510, %506, implicit-def $eflags
    %503:gr64 = SUB64rr %509, %506, implicit-def $eflags
    %501:gr64 = SUB64rr %506, %510, implicit-def $eflags
    %498:gr64 = OR64rr %501, %503, implicit-def $eflags
    %497:gr64 = IMUL64rr %504, %503, implicit-def $eflags
    %494:gr64 = XOR64ri32 %501, -1, implicit-def $eflags
    $rcx = COPY %498
    $cl = KILL killed $rcx
    %492:gr64 = SHR64rCL %494, implicit-def $eflags, implicit $cl
    $rcx = COPY %497
    $cl = KILL killed $rcx
    %491:gr64 = SHR64rCL %494, implicit-def $eflags, implicit $cl
    %489:gr64 = SUB64rr %497, %498, implicit-def $eflags
    $rcx = COPY %491
    $cl = KILL killed $rcx
    %486:gr64 = SHR64rCL %489, implicit-def $eflags, implicit $cl
    %485:gr64 = ADD64rr %491, %489, implicit-def $eflags
    $rcx = COPY %491
    $cl = KILL killed $rcx
    %483:gr64 = SHL64rCL %492, implicit-def $eflags, implicit $cl
    %480:gr64 = ADD64rr %485, %483, implicit-def $eflags
    %478:gr64 = OR64rr %485, %486, implicit-def $eflags
    %475:gr64 = XOR64ri32 %478, -1, implicit-def $eflags
    %474:gr64 = IMUL64rr %480, %478, implicit-def $eflags
    $rcx = COPY %480
    $cl = KILL killed $rcx
    %473:gr64 = SHR64rCL %478, implicit-def $eflags, implicit $cl
    %470:gr64 = OR64rr %475, %473, implicit-def $eflags
    %468:gr64 = XOR64rr %475, %474, implicit-def $eflags
    $rcx = COPY %475
    $cl = KILL killed $rcx
    %467:gr64 = SHL64rCL %474, implicit-def $eflags, implicit $cl
    $rcx = COPY %470
    $cl = KILL killed $rcx
    %464:gr64 = SHL64rCL %467, implicit-def $eflags, implicit $cl
    $rcx = COPY %467
    $cl = KILL killed $rcx
    %462:gr64 = SHR64rCL %468, implicit-def $eflags, implicit $cl
    $rcx = COPY %464
    $cl = KILL killed $rcx
    %459:gr64 = SHL64rCL %462, implicit-def $eflags, implicit $cl
    %455:gr64 = MOV64ri 7598532953503116444
    %456:gr64 = XOR64rr %459, %455, implicit-def $eflags
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %456 :: (store (s64) into %ir.330)
    %451:gr64 = MOV32ri64 2147352576
    %452:gr32 = MOV32rm %451, 1, $noreg, 0, $noreg :: (load (s32) from %ir.331)
    %449:gr32 = SHR32ri %452, 8, implicit-def $eflags
    %447:gr32 = AND32ri %449, 255, implicit-def $eflags
    %445:gr32 = ADD32ri %447, 8489, implicit-def $eflags
    %443:gr16 = COPY %445.sub_16bit
    %441:gr16 = XOR16ri %443, 5386, implicit-def $eflags
    %438:gr64 = MOV32ri64 2147352576
    %439:gr32 = MOV32rm %438, 1, $noreg, 0, $noreg :: (load (s32) from %ir.338)
    %436:gr32 = SHR32ri %439, 8, implicit-def $eflags
    %434:gr32 = AND32ri %436, 255, implicit-def $eflags
    %432:gr32 = ADD32ri %434, 59879, implicit-def $eflags
    %430:gr16 = COPY %432.sub_16bit
    %426:gr16 = MOV16ri 9050
    %428:gr16 = SUB16rr %426, %430, implicit-def $eflags
    %425:gr16 = SUB16rr %441, %428, implicit-def $eflags
    $cx = COPY %428
    $cl = KILL killed $cx
    %424:gr16 = SHL16rCL %441, implicit-def $eflags, implicit $cl
    $cx = COPY %441
    $cl = KILL killed $cx
    %423:gr16 = SHR16rCL %428, implicit-def $eflags, implicit $cl
    %420:gr16 = OR16rr %424, %425, implicit-def $eflags
    %418:gr16 = XOR16rr %424, %423, implicit-def $eflags
    %415:gr16 = XOR16rr %418, %420, implicit-def $eflags
    $cx = COPY %420
    $cl = KILL killed $cx
    %414:gr16 = SHR16rCL %418, implicit-def $eflags, implicit $cl
    $cx = COPY %415
    $cl = KILL killed $cx
    %411:gr16 = SHL16rCL %414, implicit-def $eflags, implicit $cl
    %409:gr16 = XOR16ri %414, -1, implicit-def $eflags
    %408:gr16 = XOR16ri %414, -1, implicit-def $eflags
    %406:gr16 = XOR16rr %411, %408, implicit-def $eflags
    $cx = COPY %408
    $cl = KILL killed $cx
    %405:gr16 = SHL16rCL %411, implicit-def $eflags, implicit $cl
    $cx = COPY %408
    $cl = KILL killed $cx
    %403:gr16 = SHL16rCL %409, implicit-def $eflags, implicit $cl
    $cx = COPY %405
    $cl = KILL killed $cx
    %400:gr16 = SHR16rCL %403, implicit-def $eflags, implicit $cl
    %399:gr16 = SUB16rr %403, %406, implicit-def $eflags
    %396:gr16 = XOR16ri %405, -1, implicit-def $eflags
    $cx = COPY %400
    $cl = KILL killed $cx
    %394:gr16 = SHL16rCL %399, implicit-def $eflags, implicit $cl
    %392:gr16 = ADD16rr %399, %396, implicit-def $eflags
    %389:gr16 = XOR16rr %394, %392, implicit-def $eflags
    %388:gr16 = XOR16rr %392, %394, implicit-def $eflags
    $cx = COPY %392
    $cl = KILL killed $cx
    %387:gr16 = SHL16rCL %394, implicit-def $eflags, implicit $cl
    %384:gr16 = ADD16rr %387, %389, implicit-def $eflags
    %382:gr16 = XOR16rr %387, %388, implicit-def $eflags
    %379:gr16 = OR16rr %382, %384, implicit-def $eflags
    %378:gr16 = SUB16rr %384, %382, implicit-def $eflags
    %375:gr16 = XOR16ri %379, -1, implicit-def $eflags
    %373:gr16 = XOR16ri %378, -1, implicit-def $eflags
    %371:gr16 = ADD16rr %373, %375, implicit-def $eflags
    %370:gr16 = XOR16rr %373, %375, implicit-def $eflags
    %369:gr16 = IMUL16rr %373, %375, implicit-def $eflags
    %366:gr16 = SUB16rr %369, %371, implicit-def $eflags
    %364:gr16 = SUB16rr %371, %370, implicit-def $eflags
    %362:gr16 = XOR16ri %370, -1, implicit-def $eflags
    %360:gr16 = XOR16rr %364, %362, implicit-def $eflags
    %359:gr16 = XOR16rr %362, %366, implicit-def $eflags
    %357:gr16 = IMUL16rr %362, %364, implicit-def $eflags
    $cx = COPY %359
    $cl = KILL killed $cx
    %354:gr16 = SHR16rCL %357, implicit-def $eflags, implicit $cl
    %353:gr16 = SUB16rr %357, %360, implicit-def $eflags
    %351:gr16 = IMUL16rr %359, %360, implicit-def $eflags
    %348:gr16 = XOR16rr %351, %353, implicit-def $eflags
    %347:gr16 = SUB16rr %353, %351, implicit-def $eflags
    %345:gr16 = ADD16rr %354, %351, implicit-def $eflags
    $cx = COPY %348
    $cl = KILL killed $cx
    %342:gr16 = SHL16rCL %347, implicit-def $eflags, implicit $cl
    %341:gr16 = SUB16rr %345, %348, implicit-def $eflags
    %339:gr16 = SUB16rr %348, %347, implicit-def $eflags
    $cx = COPY %339
    $cl = KILL killed $cx
    %336:gr16 = SHR16rCL %342, implicit-def $eflags, implicit $cl
    %335:gr16 = IMUL16rr %341, %342, implicit-def $eflags
    %333:gr16 = XOR16rr %341, %339, implicit-def $eflags
    $cx = COPY %336
    $cl = KILL killed $cx
    %330:gr16 = SHR16rCL %335, implicit-def $eflags, implicit $cl
    $cx = COPY %333
    $cl = KILL killed $cx
    %328:gr16 = SHL16rCL %335, implicit-def $eflags, implicit $cl
    %325:gr16 = OR16rr %328, %330, implicit-def $eflags
    %323:gr16 = XOR16ri %330, -1, implicit-def $eflags
    %322:gr16 = XOR16ri %330, -1, implicit-def $eflags
    $cx = COPY %322
    $cl = KILL killed $cx
    %320:gr16 = SHL16rCL %323, implicit-def $eflags, implicit $cl
    %318:gr16 = XOR16ri %325, -1, implicit-def $eflags
    %317:gr16 = ADD16rr %325, %323, implicit-def $eflags
    $cx = COPY %320
    $cl = KILL killed $cx
    %314:gr16 = SHL16rCL %317, implicit-def $eflags, implicit $cl
    $cx = COPY %317
    $cl = KILL killed $cx
    %313:gr16 = SHL16rCL %320, implicit-def $eflags, implicit $cl
    %311:gr16 = ADD16rr %318, %317, implicit-def $eflags
    %308:gr16 = IMUL16rr %311, %314, implicit-def $eflags
    $cx = COPY %313
    $cl = KILL killed $cx
    %306:gr16 = SHL16rCL %311, implicit-def $eflags, implicit $cl
    %305:gr16 = XOR16rr %311, %313, implicit-def $eflags
    %302:gr16 = OR16rr %306, %308, implicit-def $eflags
    %301:gr16 = SUB16rr %305, %308, implicit-def $eflags
    %299:gr16 = SUB16rr %306, %305, implicit-def $eflags
    $cx = COPY %302
    $cl = KILL killed $cx
    %296:gr16 = SHR16rCL %299, implicit-def $eflags, implicit $cl
    $cx = COPY %302
    $cl = KILL killed $cx
    %295:gr16 = SHL16rCL %301, implicit-def $eflags, implicit $cl
    %293:gr16 = SUB16rr %299, %301, implicit-def $eflags
    %290:gr16 = XOR16ri %295, -1, implicit-def $eflags
    %289:gr16 = XOR16ri %296, -1, implicit-def $eflags
    %287:gr16 = IMUL16rr %293, %295, implicit-def $eflags
    $cx = COPY %290
    $cl = KILL killed $cx
    %284:gr16 = SHL16rCL %287, implicit-def $eflags, implicit $cl
    $cx = COPY %290
    $cl = KILL killed $cx
    %283:gr16 = SHR16rCL %289, implicit-def $eflags, implicit $cl
    $cx = COPY %289
    $cl = KILL killed $cx
    %281:gr16 = SHR16rCL %287, implicit-def $eflags, implicit $cl
    %278:gr16 = SUB16rr %284, %281, implicit-def $eflags
    %276:gr16 = XOR16rr %283, %281, implicit-def $eflags
    %273:gr16 = IMUL16rr %278, %276, implicit-def $eflags
    %270:gr16 = XOR16ri %273, 26478, implicit-def $eflags
    MOV16mr %stack.5, 1, $noreg, 8, $noreg, %270 :: (store (s16) into %ir.428)
    %266:gr64 = MOV32ri64 2147352576
    %267:gr32 = MOV32rm %266, 1, $noreg, 0, $noreg :: (load (s32) from %ir.429)
    %264:gr32 = SHR32ri %267, 8, implicit-def $eflags
    %262:gr32 = AND32ri %264, 255, implicit-def $eflags
    %260:gr32 = ADD32ri %262, 89, implicit-def $eflags
    %258:gr8 = COPY %260.sub_8bit
    %256:gr8 = XOR8ri %258, 52, implicit-def $eflags
    %253:gr64 = MOV32ri64 2147352576
    %254:gr32 = MOV32rm %253, 1, $noreg, 0, $noreg :: (load (s32) from %ir.436)
    %251:gr32 = SHR32ri %254, 8, implicit-def $eflags
    %249:gr32 = AND32ri %251, 255, implicit-def $eflags
    %247:gr32 = ADD32ri %249, 220, implicit-def $eflags
    %245:gr8 = COPY %247.sub_8bit
    %241:gr8 = MOV8ri 222
    $cl = COPY %245
    %243:gr8 = SHR8rCL %241, implicit-def $eflags, implicit $cl
    %239:gr64 = MOV32ri64 2147352576
    %240:gr32 = MOV32rm %239, 1, $noreg, 0, $noreg :: (load (s32) from %ir.443)
    %237:gr32 = SHR32ri %240, 8, implicit-def $eflags
    %235:gr32 = AND32ri %237, 255, implicit-def $eflags
    %233:gr32 = ADD32ri %235, 196, implicit-def $eflags
    %231:gr8 = COPY %233.sub_8bit
    %228:gr8 = MOV8ri 192
    $al = COPY %231
    MUL8r %228, implicit-def $al, implicit-def $eflags, implicit-def $ax, implicit $al
    %229:gr8 = COPY $al
    %226:gr8 = XOR8ri %229, -1, implicit-def $eflags
    $al = COPY %243
    MUL8r %229, implicit-def $al, implicit-def $eflags, implicit-def $ax, implicit $al
    %225:gr8 = COPY $al
    $cl = COPY %229
    %223:gr8 = SHR8rCL %256, implicit-def $eflags, implicit $cl
    %220:gr8 = XOR8rr %225, %226, implicit-def $eflags
    %219:gr8 = OR8rr %226, %223, implicit-def $eflags
    $cl = COPY %225
    %217:gr8 = SHR8rCL %223, implicit-def $eflags, implicit $cl
    %214:gr8 = ADD8rr %217, %219, implicit-def $eflags
    $cl = COPY %219
    %213:gr8 = SHL8rCL %220, implicit-def $eflags, implicit $cl
    %211:gr8 = ADD8rr %217, %219, implicit-def $eflags
    $cl = COPY %211
    %208:gr8 = SHL8rCL %213, implicit-def $eflags, implicit $cl
    %206:gr8 = OR8rr %213, %214, implicit-def $eflags
    %203:gr8 = SUB8rr %206, %208, implicit-def $eflags
    %202:gr8 = XOR8rr %206, %208, implicit-def $eflags
    $cl = COPY %203
    %199:gr8 = SHL8rCL %202, implicit-def $eflags, implicit $cl
    %198:gr8 = OR8rr %202, %203, implicit-def $eflags
    %195:gr8 = OR8rr %198, %199, implicit-def $eflags
    %193:gr8 = XOR8ri %199, -1, implicit-def $eflags
    %191:gr8 = XOR8ri %193, -1, implicit-def $eflags
    $al = COPY %195
    MUL8r %193, implicit-def $al, implicit-def $eflags, implicit-def $ax, implicit $al
    %190:gr8 = COPY $al
    $cl = COPY %195
    %189:gr8 = SHL8rCL %193, implicit-def $eflags, implicit $cl
    $cl = COPY %189
    %186:gr8 = SHR8rCL %190, implicit-def $eflags, implicit $cl
    $cl = COPY %190
    %184:gr8 = SHR8rCL %191, implicit-def $eflags, implicit $cl
    $cl = COPY %186
    %181:gr8 = SHR8rCL %184, implicit-def $eflags, implicit $cl
    %180:gr8 = XOR8rr %186, %184, implicit-def $eflags
    $al = COPY %184
    MUL8r %186, implicit-def $al, implicit-def $eflags, implicit-def $ax, implicit $al
    %179:gr8 = COPY $al
    %176:gr8 = XOR8ri %181, -1, implicit-def $eflags
    $cl = COPY %180
    %174:gr8 = SHR8rCL %179, implicit-def $eflags, implicit $cl
    %172:gr8 = XOR8ri %179, -1, implicit-def $eflags
    $al = COPY %172
    MUL8r %176, implicit-def $al, implicit-def $eflags, implicit-def $ax, implicit $al
    %170:gr8 = COPY $al
    $cl = COPY %174
    %169:gr8 = SHR8rCL %172, implicit-def $eflags, implicit $cl
    $al = COPY %176
    MUL8r %174, implicit-def $al, implicit-def $eflags, implicit-def $ax, implicit $al
    %167:gr8 = COPY $al
    %164:gr8 = XOR8ri %167, -1, implicit-def $eflags
    %163:gr8 = OR8rr %167, %170, implicit-def $eflags
    %161:gr8 = OR8rr %169, %170, implicit-def $eflags
    %158:gr8 = OR8rr %164, %161, implicit-def $eflags
    $al = COPY %163
    MUL8r %161, implicit-def $al, implicit-def $eflags, implicit-def $ax, implicit $al
    %157:gr8 = COPY $al
    %155:gr8 = XOR8rr %164, %163, implicit-def $eflags
    %152:gr8 = XOR8rr %157, %158, implicit-def $eflags
    %151:gr8 = OR8rr %155, %157, implicit-def $eflags
    %149:gr8 = SUB8rr %157, %158, implicit-def $eflags
    %146:gr8 = XOR8rr %151, %149, implicit-def $eflags
    %144:gr8 = XOR8ri %152, -1, implicit-def $eflags
    %143:gr8 = XOR8rr %152, %149, implicit-def $eflags
    %140:gr8 = SUB8rr %144, %143, implicit-def $eflags
    %138:gr8 = ADD8rr %143, %146, implicit-def $eflags
    %137:gr8 = OR8rr %143, %146, implicit-def $eflags
    %134:gr8 = XOR8rr %137, %140, implicit-def $eflags
    %133:gr8 = XOR8rr %138, %140, implicit-def $eflags
    %131:gr8 = ADD8rr %140, %137, implicit-def $eflags
    $cl = COPY %131
    %128:gr8 = SHL8rCL %134, implicit-def $eflags, implicit $cl
    %127:gr8 = OR8rr %133, %131, implicit-def $eflags
    $al = COPY %134
    MUL8r %133, implicit-def $al, implicit-def $eflags, implicit-def $ax, implicit $al
    %125:gr8 = COPY $al
    %122:gr8 = XOR8ri %125, -1, implicit-def $eflags
    %121:gr8 = XOR8rr %128, %127, implicit-def $eflags
    $al = COPY %128
    MUL8r %125, implicit-def $al, implicit-def $eflags, implicit-def $ax, implicit $al
    %119:gr8 = COPY $al
    %116:gr8 = OR8rr %121, %122, implicit-def $eflags
    %115:gr8 = XOR8rr %119, %122, implicit-def $eflags
    %113:gr8 = SUB8rr %119, %121, implicit-def $eflags
    %110:gr8 = ADD8rr %115, %113, implicit-def $eflags
    %109:gr8 = XOR8rr %115, %113, implicit-def $eflags
    %107:gr8 = SUB8rr %116, %113, implicit-def $eflags
    %104:gr8 = ADD8rr %110, %107, implicit-def $eflags
    $cl = COPY %110
    %102:gr8 = SHL8rCL %109, implicit-def $eflags, implicit $cl
    %101:gr8 = ADD8rr %109, %110, implicit-def $eflags
    %98:gr8 = OR8rr %104, %101, implicit-def $eflags
    $al = COPY %104
    MUL8r %101, implicit-def $al, implicit-def $eflags, implicit-def $ax, implicit $al
    %97:gr8 = COPY $al
    %95:gr8 = OR8rr %102, %104, implicit-def $eflags
    $cl = COPY %95
    %92:gr8 = SHL8rCL %98, implicit-def $eflags, implicit $cl
    $cl = COPY %98
    %91:gr8 = SHL8rCL %95, implicit-def $eflags, implicit $cl
    $cl = COPY %98
    %89:gr8 = SHR8rCL %97, implicit-def $eflags, implicit $cl
    $cl = COPY %89
    %86:gr8 = SHR8rCL %91, implicit-def $eflags, implicit $cl
    $cl = COPY %92
    %84:gr8 = SHL8rCL %91, implicit-def $eflags, implicit $cl
    %81:gr8 = OR8rr %84, %86, implicit-def $eflags
    $cl = COPY %84
    %80:gr8 = SHL8rCL %86, implicit-def $eflags, implicit $cl
    %77:gr8 = XOR8rr %80, %81, implicit-def $eflags
    $al = COPY %80
    MUL8r %81, implicit-def $al, implicit-def $eflags, implicit-def $ax, implicit $al
    %76:gr8 = COPY $al
    %73:gr8 = SUB8rr %77, %76, implicit-def $eflags
    %70:gr8 = XOR8ri %73, 0, implicit-def $eflags
    MOV8mr %stack.5, 1, $noreg, 10, $noreg, %70 :: (store (s8) into %ir.535)
    %67:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, %67 :: (store (s64) into %ir.222)
    %65:gr64 = MOV64rm %stack.0, 1, $noreg, 8, $noreg :: (load (s64) from %ir.537)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %65 :: (store (s64) into %ir.3)
    %63:gr64 = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (load (s64) from %ir.539)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %63 :: (store (s64) into %ir.4)
    %61:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 32, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %59:gr64 = LEA64r $rip, 1, $noreg, @.str.4, $noreg
    $rcx = COPY %59
    $rdx = COPY %61
    CALL64pcrel32 @printf, csr_win64, implicit $rsp, implicit $ssp, implicit $rcx, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %60:gr32 = COPY $eax
    %57:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 32, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %55:gr64 = LEA64r $rip, 1, $noreg, @.str.4, $noreg
    $rcx = COPY %55
    $rdx = COPY %57
    CALL64pcrel32 @printf, csr_win64, implicit $rsp, implicit $ssp, implicit $rcx, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %56:gr32 = COPY $eax
    ADJCALLSTACKDOWN64 32, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 @_Z11str_printerv, csr_win64, implicit $rsp, implicit $ssp, implicit-def $rax
    ADJCALLSTACKUP64 32, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %53:gr64 = COPY $rax
    %51:gr64 = LEA64r $rip, 1, $noreg, @.str.4, $noreg
    %52:gr64 = ADD64ri32 %51, 1193046, implicit-def $eflags
    %49:gr64 = MOV32ri64 2147352576
    %50:gr32 = MOV32rm %49, 1, $noreg, 0, $noreg :: (load (s32) from %ir.547)
    %47:gr32 = SHR32ri %50, 8, implicit-def $eflags
    %45:gr32 = AND32ri %47, 255, implicit-def $eflags
    %43:gr32 = ADD32ri %45, 1048576, implicit-def $eflags
    %41:gr32 = ADD32ri %43, 2492686209, implicit-def $eflags
    %38:gr64 = MOV32ri64 2147352576
    %39:gr32 = MOV32rm %38, 1, $noreg, 0, $noreg :: (load (s32) from %ir.553)
    %36:gr32 = SHR32ri %39, 8, implicit-def $eflags
    %34:gr32 = AND32ri %36, 255, implicit-def $eflags
    %32:gr32 = ADD32ri %34, 16777215, implicit-def $eflags
    %30:gr32 = IMUL32rri %32, 1189901775, implicit-def $eflags
    %28:gr32 = XOR32rr %41, %30, implicit-def $eflags
    %27:gr32 = XOR32rr %30, %41, implicit-def $eflags
    %24:gr32 = XOR32ri %27, -1, implicit-def $eflags
    $ecx = COPY %28
    $cl = KILL killed $ecx
    %23:gr32 = SHR32rCL %27, implicit-def $eflags, implicit $cl
    $ecx = COPY %23
    $cl = KILL killed $ecx
    %20:gr32 = SHL32rCL %24, implicit-def $eflags, implicit $cl
    %19:gr32 = IMUL32rr %24, %23, implicit-def $eflags
    %16:gr32 = XOR32rr %19, %20, implicit-def $eflags
    %13:gr32 = ADD32ri %16, 482544135, implicit-def $eflags
    %9:gr32 = MOV32rr %13
    %10:gr64 = SUBREG_TO_REG 0, %9, %subreg.sub_32bit
    %7:gr64 = SUB64rr %52, %10, implicit-def $eflags
    ADJCALLSTACKDOWN64 32, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rcx = COPY %7
    $rdx = COPY %53
    CALL64pcrel32 @printf, csr_win64, implicit $rsp, implicit $ssp, implicit $rcx, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
    ADJCALLSTACKUP64 32, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %3:gr32 = COPY $eax
    %0:gr32 = MOV32r0 implicit-def $eflags
    $eax = COPY %0
    RET64 implicit $eax

...
