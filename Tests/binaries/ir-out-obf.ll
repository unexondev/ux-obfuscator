; ModuleID = './binaries/ir-output.ll'
source_filename = "./src/main.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.StringContainer = type { i32, ptr }

@.str = private unnamed_addr constant [29 x i8] c"Gonna let str_printer talk!\0A\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"str_printer: hello world!\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"warevisor\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"warevising\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: mustprogress noinline optnone uwtable
define dso_local noundef ptr @_Z11str_printerv() #0 {
  %1 = getelementptr i8, ptr @.str, i32 1193046
  %2 = inttoptr i64 2147352576 to ptr
  %3 = load i32, ptr %2, align 4
  %4 = lshr i32 %3, 8
  %5 = and i32 %4, 255
  %6 = add i32 %5, 1048576
  %7 = lshr i32 -231665364, %6
  %8 = inttoptr i64 2147352576 to ptr
  %9 = load i32, ptr %8, align 4
  %10 = lshr i32 %9, 8
  %11 = and i32 %10, 255
  %12 = add i32 %11, 16777215
  %13 = shl i32 1406385782, %12
  %14 = sub i32 %13, %7
  %15 = or i32 %7, %13
  %16 = or i32 %14, %15
  %17 = xor i32 %15, -1
  %18 = or i32 %16, %17
  %19 = xor i32 %17, %16
  %20 = xor i32 %18, -1
  %21 = add i32 %20, 1193046
  %22 = ptrtoint ptr %1 to i64
  %23 = zext i32 %21 to i64
  %24 = sub i64 %22, %23
  %25 = inttoptr i64 %24 to ptr
  %26 = call i32 (ptr, ...) @printf(ptr noundef %25)
  %27 = alloca i8, i8 26, align 1
  %28 = inttoptr i64 2147352576 to ptr
  %29 = load i32, ptr %28, align 4
  %30 = lshr i32 %29, 8
  %31 = and i32 %30, 255
  %32 = zext i32 %31 to i64
  %33 = add i64 %32, -1288958184662653062
  %34 = or i64 3959429083128403742, %33
  %35 = inttoptr i64 2147352576 to ptr
  %36 = load i32, ptr %35, align 4
  %37 = lshr i32 %36, 8
  %38 = and i32 %37, 255
  %39 = zext i32 %38 to i64
  %40 = add i64 %39, 5785446154621917108
  %41 = or i64 -3161205032076032484, %40
  %42 = inttoptr i64 2147352576 to ptr
  %43 = load i32, ptr %42, align 4
  %44 = lshr i32 %43, 8
  %45 = and i32 %44, 255
  %46 = zext i32 %45 to i64
  %47 = add i64 %46, -1262470880704717725
  %48 = or i64 6377754600354052782, %47
  %49 = or i64 %48, %41
  %50 = mul i64 %48, %41
  %51 = xor i64 %34, %48
  %52 = shl i64 %51, %49
  %53 = xor i64 %50, -1
  %54 = xor i64 %50, -1
  %55 = or i64 %52, %54
  %56 = add i64 %53, %52
  %57 = xor i64 %54, -1
  %58 = xor i64 %56, -1
  %59 = shl i64 %56, %55
  %60 = sub i64 %55, %56
  %61 = sub i64 %59, %60
  %62 = lshr i64 %58, %60
  %63 = lshr i64 %60, %59
  %64 = sub i64 %62, %61
  %65 = xor i64 %63, %62
  %66 = xor i64 %61, %63
  %67 = xor i64 %64, -1
  %68 = sub i64 %66, %64
  %69 = add i64 %66, %64
  %70 = sub i64 %67, %69
  %71 = xor i64 %68, -1
  %72 = lshr i64 %68, %67
  %73 = lshr i64 %72, %71
  %74 = xor i64 %70, %72
  %75 = xor i64 %72, %70
  %76 = shl i64 %74, %73
  %77 = or i64 %74, %73
  %78 = lshr i64 %76, %77
  %79 = sub i64 %77, %76
  %80 = shl i64 %77, %76
  %81 = shl i64 %78, %79
  %82 = shl i64 %79, %80
  %83 = shl i64 %81, %82
  %84 = mul i64 %82, %81
  %85 = sub i64 %82, %81
  %86 = or i64 %84, %85
  %87 = add i64 %84, %85
  %88 = add i64 %85, %83
  %89 = sub i64 %88, %86
  %90 = add i64 %87, %88
  %91 = mul i64 %88, %87
  %92 = lshr i64 %89, %90
  %93 = xor i64 %89, %90
  %94 = lshr i64 %89, %91
  %95 = lshr i64 %93, %92
  %96 = xor i64 %94, %93
  %97 = mul i64 %93, %94
  %98 = or i64 %96, %97
  %99 = xor i64 %95, %96
  %100 = lshr i64 %97, %95
  %101 = add i64 %98, %99
  %102 = shl i64 %98, %100
  %103 = shl i64 %99, %100
  %104 = add i64 %102, %103
  %105 = or i64 %103, %102
  %106 = sub i64 %102, %101
  %107 = xor i64 %105, %106
  %108 = mul i64 %104, %106
  %109 = mul i64 %105, %106
  %110 = sub i64 %109, %108
  %111 = mul i64 %107, %109
  %112 = lshr i64 %107, %108
  %113 = mul i64 %110, %111
  %114 = xor i64 %110, %112
  %115 = mul i64 %112, %110
  %116 = shl i64 %114, %113
  %117 = mul i64 %113, %114
  %118 = add i64 %115, %114
  %119 = mul i64 %117, %116
  %120 = shl i64 %117, %116
  %121 = or i64 %116, %118
  %122 = shl i64 %121, %119
  %123 = xor i64 %121, %120
  %124 = add i64 %119, %121
  %125 = sub i64 %124, %122
  %126 = shl i64 %122, %123
  %127 = mul i64 %122, %124
  %128 = add i64 %127, %126
  %129 = lshr i64 %125, %127
  %130 = xor i64 %129, -1
  %131 = xor i64 %130, -7956016043689931892
  %132 = ptrtoint ptr %27 to i64
  %133 = add i64 %132, 0
  %134 = inttoptr i64 %133 to ptr
  store i64 %131, ptr %134, align 8
  %135 = inttoptr i64 2147352576 to ptr
  %136 = load i32, ptr %135, align 4
  %137 = lshr i32 %136, 8
  %138 = and i32 %137, 255
  %139 = zext i32 %138 to i64
  %140 = add i64 %139, 7703606700412223361
  %141 = sub i64 3940572955842441772, %140
  %142 = inttoptr i64 2147352576 to ptr
  %143 = load i32, ptr %142, align 4
  %144 = lshr i32 %143, 8
  %145 = and i32 %144, 255
  %146 = zext i32 %145 to i64
  %147 = add i64 %146, 9048023201941383394
  %148 = or i64 -4966207109041725527, %147
  %149 = inttoptr i64 2147352576 to ptr
  %150 = load i32, ptr %149, align 4
  %151 = lshr i32 %150, 8
  %152 = and i32 %151, 255
  %153 = zext i32 %152 to i64
  %154 = add i64 %153, 2536176631521572
  %155 = shl i64 1875561959214453977, %154
  %156 = sub i64 %148, %155
  %157 = shl i64 %148, %141
  %158 = lshr i64 %155, %148
  %159 = xor i64 %158, %156
  %160 = sub i64 %158, %156
  %161 = mul i64 %157, %156
  %162 = or i64 %159, %160
  %163 = mul i64 %160, %159
  %164 = lshr i64 %160, %161
  %165 = mul i64 %162, %164
  %166 = shl i64 %162, %163
  %167 = xor i64 %166, -1
  %168 = xor i64 %165, -1
  %169 = or i64 %167, %168
  %170 = lshr i64 %168, %167
  %171 = xor i64 %168, %167
  %172 = shl i64 %170, %169
  %173 = xor i64 %169, %171
  %174 = or i64 %171, %169
  %175 = xor i64 %172, -1
  %176 = xor i64 %173, -1
  %177 = or i64 %175, %176
  %178 = or i64 %176, %175
  %179 = sub i64 %176, %175
  %180 = or i64 %179, %178
  %181 = shl i64 %178, %177
  %182 = xor i64 %179, -1
  %183 = mul i64 %180, %182
  %184 = add i64 %180, %182
  %185 = sub i64 %182, %181
  %186 = xor i64 %185, -1
  %187 = mul i64 %183, %185
  %188 = add i64 %183, %184
  %189 = shl i64 %188, %186
  %190 = lshr i64 %186, %187
  %191 = mul i64 %188, %187
  %192 = add i64 %189, %191
  %193 = xor i64 %190, -1
  %194 = xor i64 %190, %189
  %195 = mul i64 %194, %193
  %196 = shl i64 %192, %194
  %197 = sub i64 %192, %193
  %198 = lshr i64 %197, %196
  %199 = or i64 %196, %197
  %200 = mul i64 %196, %195
  %201 = sub i64 %198, %200
  %202 = xor i64 %200, %198
  %203 = shl i64 %199, %200
  %204 = mul i64 %203, %202
  %205 = add i64 %203, %202
  %206 = mul i64 %201, %203
  %207 = add i64 %204, %205
  %208 = sub i64 %206, %204
  %209 = lshr i64 %204, %205
  %210 = or i64 %208, %209
  %211 = lshr i64 %209, %208
  %212 = sub i64 %207, %208
  %213 = sub i64 %210, %212
  %214 = shl i64 %211, %210
  %215 = mul i64 %212, %211
  %216 = mul i64 %214, %215
  %217 = xor i64 %213, %215
  %218 = or i64 %213, %214
  %219 = xor i64 %217, -1
  %220 = xor i64 %216, -1
  %221 = shl i64 %218, %216
  %222 = xor i64 %219, -1
  %223 = xor i64 %220, -1
  %224 = sub i64 %221, %220
  %225 = lshr i64 %222, %223
  %226 = mul i64 %224, %223
  %227 = mul i64 %224, %222
  %228 = shl i64 %227, %226
  %229 = sub i64 %227, %226
  %230 = or i64 %226, %225
  %231 = lshr i64 %228, %229
  %232 = or i64 %228, %230
  %233 = add i64 %228, %230
  %234 = lshr i64 %231, %232
  %235 = sub i64 %232, %231
  %236 = or i64 %234, %235
  %237 = xor i64 %236, -7270333715964718335
  %238 = ptrtoint ptr %27 to i64
  %239 = add i64 %238, 8
  %240 = inttoptr i64 %239 to ptr
  store i64 %237, ptr %240, align 8
  %241 = inttoptr i64 2147352576 to ptr
  %242 = load i32, ptr %241, align 4
  %243 = lshr i32 %242, 8
  %244 = and i32 %243, 255
  %245 = zext i32 %244 to i64
  %246 = add i64 %245, 1586285847599493623
  %247 = sub i64 1570876885142199969, %246
  %248 = inttoptr i64 2147352576 to ptr
  %249 = load i32, ptr %248, align 4
  %250 = lshr i32 %249, 8
  %251 = and i32 %250, 255
  %252 = zext i32 %251 to i64
  %253 = add i64 %252, 5829888363439544276
  %254 = or i64 -5040772579249701795, %253
  %255 = inttoptr i64 2147352576 to ptr
  %256 = load i32, ptr %255, align 4
  %257 = lshr i32 %256, 8
  %258 = and i32 %257, 255
  %259 = zext i32 %258 to i64
  %260 = add i64 %259, 8241507127025442056
  %261 = mul i64 -2014018483399884541, %260
  %262 = xor i64 %261, %247
  %263 = xor i64 %254, %261
  %264 = add i64 %254, %261
  %265 = mul i64 %262, %264
  %266 = lshr i64 %262, %264
  %267 = lshr i64 %262, %263
  %268 = shl i64 %267, %265
  %269 = xor i64 %265, -1
  %270 = lshr i64 %266, %265
  %271 = xor i64 %268, %269
  %272 = or i64 %269, %270
  %273 = or i64 %269, %268
  %274 = or i64 %272, %271
  %275 = or i64 %271, %272
  %276 = lshr i64 %275, %274
  %277 = sub i64 %275, %274
  %278 = xor i64 %275, %274
  %279 = mul i64 %278, %277
  %280 = xor i64 %277, -1
  %281 = shl i64 %276, %278
  %282 = mul i64 %281, %279
  %283 = mul i64 %280, %281
  %284 = xor i64 %281, %280
  %285 = sub i64 %282, %283
  %286 = xor i64 %282, -1
  %287 = or i64 %284, %282
  %288 = xor i64 %285, %286
  %289 = lshr i64 %286, %287
  %290 = sub i64 %287, %286
  %291 = add i64 %289, %288
  %292 = sub i64 %289, %290
  %293 = lshr i64 %290, %289
  %294 = lshr i64 %293, %292
  %295 = xor i64 %291, -1
  %296 = mul i64 %291, %292
  %297 = or i64 %296, %295
  %298 = shl i64 %296, %294
  %299 = or i64 %298, %297
  %300 = or i64 %297, %298
  %301 = shl i64 %297, %298
  %302 = add i64 %299, %300
  %303 = add i64 %301, %300
  %304 = sub i64 %300, %299
  %305 = sub i64 %302, %304
  %306 = add i64 %304, %303
  %307 = shl i64 %306, %305
  %308 = or i64 %305, %306
  %309 = add i64 %306, %305
  %310 = sub i64 %308, %307
  %311 = sub i64 %307, %308
  %312 = or i64 %309, %307
  %313 = sub i64 %311, %312
  %314 = add i64 %310, %312
  %315 = add i64 %312, %310
  %316 = or i64 %314, %315
  %317 = sub i64 %314, %315
  %318 = xor i64 %314, %313
  %319 = add i64 %318, %317
  %320 = xor i64 %317, -1
  %321 = mul i64 %318, %316
  %322 = xor i64 %321, -1
  %323 = or i64 %320, %319
  %324 = lshr i64 %319, %320
  %325 = add i64 %323, %324
  %326 = mul i64 %323, %324
  %327 = lshr i64 %322, %323
  %328 = xor i64 %325, -1
  %329 = lshr i64 %325, %327
  %330 = shl i64 %325, %326
  %331 = lshr i64 %330, %329
  %332 = or i64 %330, %329
  %333 = xor i64 %329, -1
  %334 = xor i64 %333, %332
  %335 = sub i64 %333, %332
  %336 = add i64 %332, %331
  %337 = shl i64 %336, %334
  %338 = or i64 %335, %336
  %339 = xor i64 %335, -1
  %340 = lshr i64 %339, %337
  %341 = xor i64 %338, -1
  %342 = or i64 %341, %340
  %343 = xor i64 %342, 7236284524343095148
  %344 = ptrtoint ptr %27 to i64
  %345 = add i64 %344, 16
  %346 = inttoptr i64 %345 to ptr
  store i64 %343, ptr %346, align 8
  %347 = inttoptr i64 2147352576 to ptr
  %348 = load i32, ptr %347, align 4
  %349 = lshr i32 %348, 8
  %350 = and i32 %349, 255
  %351 = add i32 %350, 29690
  %352 = trunc i32 %351 to i16
  %353 = mul i16 -4665, %352
  %354 = inttoptr i64 2147352576 to ptr
  %355 = load i32, ptr %354, align 4
  %356 = lshr i32 %355, 8
  %357 = and i32 %356, 255
  %358 = add i32 %357, 8385
  %359 = trunc i32 %358 to i16
  %360 = or i16 -7024, %359
  %361 = inttoptr i64 2147352576 to ptr
  %362 = load i32, ptr %361, align 4
  %363 = lshr i32 %362, 8
  %364 = and i32 %363, 255
  %365 = add i32 %364, 34795
  %366 = trunc i32 %365 to i16
  %367 = mul i16 9417, %366
  %368 = xor i16 %367, %360
  %369 = shl i16 %353, %367
  %370 = xor i16 %360, %353
  %371 = xor i16 %370, %369
  %372 = shl i16 %369, %368
  %373 = shl i16 %368, %369
  %374 = mul i16 %373, %371
  %375 = sub i16 %372, %371
  %376 = mul i16 %371, %373
  %377 = sub i16 %374, %375
  %378 = xor i16 %375, %376
  %379 = shl i16 %374, %375
  %380 = add i16 %378, %377
  %381 = sub i16 %378, %379
  %382 = sub i16 %378, %377
  %383 = lshr i16 %382, %380
  %384 = or i16 %381, %382
  %385 = or i16 %380, %382
  %386 = xor i16 %384, %385
  %387 = xor i16 %384, %383
  %388 = add i16 %385, %384
  %389 = sub i16 %387, %386
  %390 = shl i16 %388, %387
  %391 = xor i16 %390, %389
  %392 = xor i16 %389, -1
  %393 = xor i16 %389, %390
  %394 = sub i16 %393, %391
  %395 = xor i16 %392, -1
  %396 = shl i16 %391, %392
  %397 = shl i16 %394, %396
  %398 = sub i16 %394, %395
  %399 = mul i16 %394, %396
  %400 = shl i16 %397, %399
  %401 = lshr i16 %398, %397
  %402 = lshr i16 %399, %398
  %403 = sub i16 %400, %401
  %404 = sub i16 %401, %402
  %405 = sub i16 %401, %400
  %406 = xor i16 %404, %405
  %407 = shl i16 %404, %403
  %408 = lshr i16 %404, %403
  %409 = mul i16 %406, %408
  %410 = sub i16 %406, %407
  %411 = add i16 %406, %408
  %412 = xor i16 %411, -1
  %413 = sub i16 %409, %410
  %414 = xor i16 %409, %411
  %415 = sub i16 %414, %412
  %416 = mul i16 %412, %413
  %417 = shl i16 %414, %413
  %418 = shl i16 %415, %417
  %419 = sub i16 %416, %415
  %420 = xor i16 %417, %415
  %421 = lshr i16 %418, %419
  %422 = xor i16 %419, -1
  %423 = xor i16 %419, -1
  %424 = sub i16 %421, %423
  %425 = mul i16 %422, %423
  %426 = shl i16 %422, %423
  %427 = xor i16 %424, -1
  %428 = mul i16 %424, %426
  %429 = sub i16 %424, %426
  %430 = xor i16 %428, %427
  %431 = sub i16 %429, %427
  %432 = shl i16 %427, %428
  %433 = mul i16 %430, %431
  %434 = add i16 %432, %430
  %435 = shl i16 %430, %431
  %436 = sub i16 %434, %433
  %437 = mul i16 %434, %435
  %438 = mul i16 %435, %434
  %439 = xor i16 %437, %436
  %440 = xor i16 %436, %437
  %441 = xor i16 %438, -1
  %442 = xor i16 %441, %439
  %443 = xor i16 %440, %439
  %444 = or i16 %440, %439
  %445 = xor i16 %444, -1
  %446 = mul i16 %444, %442
  %447 = shl i16 %443, %444
  %448 = or i16 %445, %447
  %449 = xor i16 %446, %445
  %450 = mul i16 %448, %449
  %451 = xor i16 %450, 49
  %452 = ptrtoint ptr %27 to i64
  %453 = add i64 %452, 24
  %454 = inttoptr i64 %453 to ptr
  store i16 %451, ptr %454, align 2
  %455 = bitcast ptr %27 to ptr
  ret ptr %455
}

declare i32 @printf(ptr noundef, ...) #1

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define internal noundef ptr @_ZL8_obf_strPKc(ptr noundef %0) #2 section "._obf_str" {
  %2 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #3 {
  %1 = alloca %struct.StringContainer, align 8
  %2 = alloca %struct.StringContainer, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = getelementptr inbounds %struct.StringContainer, ptr %1, i32 0, i32 0
  store i32 300, ptr %5, align 8
  %6 = getelementptr inbounds %struct.StringContainer, ptr %1, i32 0, i32 1
  %7 = alloca i8, i8 10, align 1
  %8 = inttoptr i64 2147352576 to ptr
  %9 = load i32, ptr %8, align 4
  %10 = lshr i32 %9, 8
  %11 = and i32 %10, 255
  %12 = zext i32 %11 to i64
  %13 = add i64 %12, 3502478908507712376
  %14 = xor i64 -6601101038243067188, %13
  %15 = inttoptr i64 2147352576 to ptr
  %16 = load i32, ptr %15, align 4
  %17 = lshr i32 %16, 8
  %18 = and i32 %17, 255
  %19 = zext i32 %18 to i64
  %20 = add i64 %19, -5035074395543793745
  %21 = sub i64 -6810315824892612104, %20
  %22 = inttoptr i64 2147352576 to ptr
  %23 = load i32, ptr %22, align 4
  %24 = lshr i32 %23, 8
  %25 = and i32 %24, 255
  %26 = zext i32 %25 to i64
  %27 = add i64 %26, -4770771725940816578
  %28 = or i64 -4139818246910699714, %27
  %29 = shl i64 %28, %21
  %30 = xor i64 %21, -1
  %31 = xor i64 %21, -1
  %32 = shl i64 %29, %30
  %33 = mul i64 %31, %29
  %34 = or i64 %29, %30
  %35 = add i64 %33, %34
  %36 = or i64 %33, %34
  %37 = shl i64 %36, %35
  %38 = sub i64 %36, %35
  %39 = or i64 %35, %36
  %40 = shl i64 %37, %38
  %41 = xor i64 %37, -1
  %42 = add i64 %37, %39
  %43 = mul i64 %40, %42
  %44 = xor i64 %42, %41
  %45 = lshr i64 %40, %41
  %46 = mul i64 %44, %45
  %47 = mul i64 %45, %44
  %48 = lshr i64 %43, %45
  %49 = add i64 %46, %47
  %50 = or i64 %46, %48
  %51 = or i64 %48, %47
  %52 = or i64 %50, %51
  %53 = sub i64 %51, %50
  %54 = xor i64 %49, -1
  %55 = add i64 %54, %52
  %56 = xor i64 %53, -1
  %57 = sub i64 %52, %54
  %58 = lshr i64 %56, %57
  %59 = sub i64 %55, %56
  %60 = xor i64 %59, -1
  %61 = xor i64 %59, -1
  %62 = shl i64 %58, %59
  %63 = shl i64 %61, %60
  %64 = xor i64 %60, %62
  %65 = shl i64 %62, %60
  %66 = or i64 %65, %63
  %67 = lshr i64 %64, %63
  %68 = add i64 %64, %65
  %69 = xor i64 %68, %67
  %70 = or i64 %67, %66
  %71 = add i64 %66, %68
  %72 = xor i64 %71, -1
  %73 = or i64 %69, %71
  %74 = or i64 %69, %70
  %75 = shl i64 %73, %74
  %76 = sub i64 %73, %72
  %77 = xor i64 %74, -1
  %78 = sub i64 %76, %75
  %79 = xor i64 %75, -1
  %80 = sub i64 %75, %76
  %81 = add i64 %80, %79
  %82 = xor i64 %78, -1
  %83 = or i64 %80, %79
  %84 = shl i64 %81, %82
  %85 = xor i64 %81, -1
  %86 = xor i64 %85, -1
  %87 = mul i64 %84, %85
  %88 = xor i64 %84, -1
  %89 = shl i64 %88, %87
  %90 = sub i64 %86, %88
  %91 = xor i64 %86, %88
  %92 = xor i64 %91, -1
  %93 = xor i64 %89, -1
  %94 = sub i64 %90, %91
  %95 = sub i64 %94, %92
  %96 = xor i64 %93, -1
  %97 = lshr i64 %92, %93
  %98 = xor i64 %96, -1
  %99 = shl i64 %95, %96
  %100 = mul i64 %95, %96
  %101 = sub i64 %99, %98
  %102 = xor i64 %99, -1
  %103 = xor i64 %101, %102
  %104 = mul i64 %101, %102
  %105 = sub i64 %101, %102
  %106 = xor i64 %104, -1
  %107 = shl i64 %105, %103
  %108 = xor i64 %106, -1
  %109 = xor i64 %108, -1192493519093997193
  %110 = ptrtoint ptr %7 to i64
  %111 = add i64 %110, 0
  %112 = inttoptr i64 %111 to ptr
  store i64 %109, ptr %112, align 8
  %113 = inttoptr i64 2147352576 to ptr
  %114 = load i32, ptr %113, align 4
  %115 = lshr i32 %114, 8
  %116 = and i32 %115, 255
  %117 = add i32 %116, 4850
  %118 = trunc i32 %117 to i16
  %119 = lshr i16 18775, %118
  %120 = inttoptr i64 2147352576 to ptr
  %121 = load i32, ptr %120, align 4
  %122 = lshr i32 %121, 8
  %123 = and i32 %122, 255
  %124 = add i32 %123, 54523
  %125 = trunc i32 %124 to i16
  %126 = add i16 25102, %125
  %127 = inttoptr i64 2147352576 to ptr
  %128 = load i32, ptr %127, align 4
  %129 = lshr i32 %128, 8
  %130 = and i32 %129, 255
  %131 = add i32 %130, 57572
  %132 = trunc i32 %131 to i16
  %133 = xor i16 -26085, %132
  %134 = xor i16 %126, %133
  %135 = xor i16 %119, %133
  %136 = xor i16 %133, -1
  %137 = mul i16 %135, %134
  %138 = or i16 %135, %136
  %139 = add i16 %137, %138
  %140 = or i16 %138, %137
  %141 = or i16 %138, %137
  %142 = add i16 %140, %141
  %143 = xor i16 %140, %139
  %144 = lshr i16 %143, %142
  %145 = shl i16 %143, %142
  %146 = xor i16 %143, %142
  %147 = xor i16 %144, %146
  %148 = lshr i16 %146, %145
  %149 = xor i16 %144, -1
  %150 = add i16 %148, %149
  %151 = xor i16 %147, %148
  %152 = or i16 %147, %148
  %153 = shl i16 %152, %150
  %154 = add i16 %150, %151
  %155 = lshr i16 %151, %152
  %156 = mul i16 %155, %154
  %157 = or i16 %154, %153
  %158 = shl i16 %155, %153
  %159 = shl i16 %157, %156
  %160 = or i16 %158, %156
  %161 = sub i16 %156, %157
  %162 = shl i16 %160, %161
  %163 = lshr i16 %160, %161
  %164 = xor i16 %160, -1
  %165 = shl i16 %163, %162
  %166 = add i16 %164, %162
  %167 = or i16 %165, %166
  %168 = sub i16 %165, %166
  %169 = xor i16 %166, -1
  %170 = lshr i16 %169, %167
  %171 = xor i16 %167, -1
  %172 = shl i16 %168, %167
  %173 = mul i16 %170, %171
  %174 = add i16 %170, %172
  %175 = shl i16 %171, %170
  %176 = or i16 %175, %173
  %177 = shl i16 %173, %174
  %178 = add i16 %174, %173
  %179 = add i16 %176, %178
  %180 = add i16 %177, %176
  %181 = lshr i16 %176, %177
  %182 = xor i16 %179, -1
  %183 = mul i16 %179, %180
  %184 = xor i16 %180, %181
  %185 = lshr i16 %184, %183
  %186 = xor i16 %184, %183
  %187 = xor i16 %182, -1
  %188 = sub i16 %187, %186
  %189 = mul i16 %185, %186
  %190 = sub i16 %186, %187
  %191 = mul i16 %190, %189
  %192 = xor i16 %189, %188
  %193 = or i16 %192, %191
  %194 = xor i16 %191, -1
  %195 = mul i16 %192, %191
  %196 = or i16 %194, %195
  %197 = sub i16 %193, %195
  %198 = or i16 %194, %195
  %199 = sub i16 %196, %197
  %200 = shl i16 %197, %198
  %201 = xor i16 %198, -1
  %202 = or i16 %199, %201
  %203 = sub i16 %201, %200
  %204 = lshr i16 %199, %201
  %205 = add i16 %203, %202
  %206 = shl i16 %202, %204
  %207 = sub i16 %204, %203
  %208 = or i16 %207, %205
  %209 = xor i16 %207, -1
  %210 = lshr i16 %206, %207
  %211 = lshr i16 %210, %209
  %212 = sub i16 %210, %209
  %213 = xor i16 %211, %212
  %214 = xor i16 %213, 114
  %215 = ptrtoint ptr %7 to i64
  %216 = add i64 %215, 8
  %217 = inttoptr i64 %216 to ptr
  store i16 %214, ptr %217, align 2
  %218 = bitcast ptr %7 to ptr
  store ptr %218, ptr %6, align 8
  %219 = getelementptr inbounds %struct.StringContainer, ptr %2, i32 0, i32 0
  store i32 90000, ptr %219, align 8
  %220 = getelementptr inbounds %struct.StringContainer, ptr %2, i32 0, i32 1
  %221 = alloca i8, i8 11, align 1
  %222 = inttoptr i64 2147352576 to ptr
  %223 = load i32, ptr %222, align 4
  %224 = lshr i32 %223, 8
  %225 = and i32 %224, 255
  %226 = zext i32 %225 to i64
  %227 = add i64 %226, -7226999883214658383
  %228 = shl i64 -8884075458846370432, %227
  %229 = inttoptr i64 2147352576 to ptr
  %230 = load i32, ptr %229, align 4
  %231 = lshr i32 %230, 8
  %232 = and i32 %231, 255
  %233 = zext i32 %232 to i64
  %234 = add i64 %233, -1365208588731618485
  %235 = xor i64 -8512756389365650169, %234
  %236 = add i64 %228, %235
  %237 = or i64 %235, %228
  %238 = mul i64 %235, %228
  %239 = add i64 %236, %237
  %240 = mul i64 %236, %237
  %241 = shl i64 %236, %238
  %242 = shl i64 %241, %239
  %243 = mul i64 %241, %239
  %244 = or i64 %239, %240
  %245 = mul i64 %243, %242
  %246 = xor i64 %244, %243
  %247 = lshr i64 %243, %242
  %248 = lshr i64 %246, %245
  %249 = xor i64 %246, -1
  %250 = xor i64 %248, %249
  %251 = xor i64 %249, %248
  %252 = lshr i64 %248, %249
  %253 = shl i64 %251, %252
  %254 = xor i64 %251, -1
  %255 = sub i64 %250, %251
  %256 = add i64 %255, %253
  %257 = xor i64 %254, -1
  %258 = sub i64 %254, %253
  %259 = lshr i64 %256, %258
  %260 = mul i64 %257, %258
  %261 = sub i64 %258, %256
  %262 = shl i64 %260, %261
  %263 = lshr i64 %260, %261
  %264 = lshr i64 %259, %261
  %265 = shl i64 %263, %262
  %266 = mul i64 %264, %263
  %267 = xor i64 %262, %263
  %268 = xor i64 %266, -1
  %269 = lshr i64 %267, %265
  %270 = xor i64 %269, %268
  %271 = or i64 %268, %269
  %272 = or i64 %268, %269
  %273 = mul i64 %271, %272
  %274 = shl i64 %270, %272
  %275 = add i64 %272, %271
  %276 = add i64 %273, %275
  %277 = add i64 %274, %275
  %278 = mul i64 %274, %275
  %279 = or i64 %276, %277
  %280 = xor i64 %278, %277
  %281 = xor i64 %278, -1
  %282 = add i64 %281, %279
  %283 = mul i64 %279, %280
  %284 = xor i64 %279, %280
  %285 = or i64 %282, %284
  %286 = xor i64 %282, %284
  %287 = sub i64 %283, %282
  %288 = mul i64 %285, %286
  %289 = xor i64 %287, -1
  %290 = add i64 %286, %287
  %291 = add i64 %288, %289
  %292 = xor i64 %290, -1
  %293 = add i64 %289, %288
  %294 = sub i64 %293, %292
  %295 = xor i64 %293, %291
  %296 = mul i64 %294, %295
  %297 = mul i64 %294, %295
  %298 = or i64 %295, %294
  %299 = shl i64 %296, %297
  %300 = or i64 %298, %297
  %301 = sub i64 %297, %296
  %302 = shl i64 %301, %300
  %303 = xor i64 %299, -1
  %304 = mul i64 %299, %301
  %305 = sub i64 %303, %302
  %306 = or i64 %303, %304
  %307 = mul i64 %305, %306
  %308 = shl i64 %306, %305
  %309 = xor i64 %306, -1
  %310 = sub i64 %309, %307
  %311 = xor i64 %308, -1
  %312 = mul i64 %309, %307
  %313 = sub i64 %311, %310
  %314 = lshr i64 %312, %311
  %315 = xor i64 %313, -1
  %316 = xor i64 %315, 1624839083321564808
  %317 = ptrtoint ptr %221 to i64
  %318 = add i64 %317, 0
  %319 = inttoptr i64 %318 to ptr
  store i64 %316, ptr %319, align 8
  %320 = inttoptr i64 2147352576 to ptr
  %321 = load i32, ptr %320, align 4
  %322 = lshr i32 %321, 8
  %323 = and i32 %322, 255
  %324 = add i32 %323, 36840
  %325 = trunc i32 %324 to i16
  %326 = lshr i16 7979, %325
  %327 = inttoptr i64 2147352576 to ptr
  %328 = load i32, ptr %327, align 4
  %329 = lshr i32 %328, 8
  %330 = and i32 %329, 255
  %331 = add i32 %330, 40330
  %332 = trunc i32 %331 to i16
  %333 = or i16 26670, %332
  %334 = inttoptr i64 2147352576 to ptr
  %335 = load i32, ptr %334, align 4
  %336 = lshr i32 %335, 8
  %337 = and i32 %336, 255
  %338 = add i32 %337, 6515
  %339 = trunc i32 %338 to i16
  %340 = xor i16 10943, %339
  %341 = add i16 %326, %333
  %342 = add i16 %326, %333
  %343 = or i16 %340, %333
  %344 = xor i16 %341, -1
  %345 = xor i16 %342, %343
  %346 = lshr i16 %342, %341
  %347 = add i16 %344, %345
  %348 = lshr i16 %345, %344
  %349 = xor i16 %345, -1
  %350 = shl i16 %349, %347
  %351 = sub i16 %347, %349
  %352 = lshr i16 %347, %348
  %353 = lshr i16 %351, %352
  %354 = or i16 %352, %350
  %355 = shl i16 %352, %351
  %356 = mul i16 %353, %355
  %357 = xor i16 %355, %353
  %358 = shl i16 %354, %355
  %359 = xor i16 %358, -1
  %360 = xor i16 %358, %356
  %361 = add i16 %356, %357
  %362 = shl i16 %359, %361
  %363 = sub i16 %361, %360
  %364 = add i16 %361, %360
  %365 = sub i16 %364, %362
  %366 = shl i16 %362, %363
  %367 = add i16 %365, %366
  %368 = add i16 %366, %365
  %369 = mul i16 %366, %365
  %370 = add i16 %368, %369
  %371 = sub i16 %368, %367
  %372 = or i16 %371, %370
  %373 = mul i16 %370, %371
  %374 = lshr i16 %370, %371
  %375 = lshr i16 %372, %373
  %376 = xor i16 %373, -1
  %377 = add i16 %372, %373
  %378 = xor i16 %377, %376
  %379 = xor i16 %375, -1
  %380 = sub i16 %375, %377
  %381 = xor i16 %380, -1
  %382 = sub i16 %379, %380
  %383 = mul i16 %382, %381
  %384 = xor i16 %381, -1
  %385 = or i16 %382, %381
  %386 = mul i16 %384, %383
  %387 = xor i16 %385, -1
  %388 = xor i16 %384, %383
  %389 = lshr i16 %387, %388
  %390 = xor i16 %388, %387
  %391 = lshr i16 %390, %389
  %392 = or i16 %389, %390
  %393 = add i16 %390, %389
  %394 = or i16 %392, %393
  %395 = sub i16 %392, %391
  %396 = shl i16 %393, %391
  %397 = xor i16 %396, -1
  %398 = mul i16 %396, %395
  %399 = lshr i16 %396, %395
  %400 = add i16 %398, %399
  %401 = xor i16 %397, -1
  %402 = xor i16 %397, %399
  %403 = xor i16 %400, %402
  %404 = add i16 %401, %402
  %405 = xor i16 %400, %401
  %406 = sub i16 %404, %405
  %407 = xor i16 %404, %405
  %408 = xor i16 %403, %404
  %409 = add i16 %407, %408
  %410 = sub i16 %407, %406
  %411 = or i16 %408, %406
  %412 = lshr i16 %411, %409
  %413 = xor i16 %410, %411
  %414 = shl i16 %410, %411
  %415 = shl i16 %412, %413
  %416 = lshr i16 %412, %414
  %417 = or i16 %413, %414
  %418 = xor i16 %416, -1
  %419 = or i16 %417, %415
  %420 = sub i16 %419, %418
  %421 = xor i16 %420, 26478
  %422 = ptrtoint ptr %221 to i64
  %423 = add i64 %422, 8
  %424 = inttoptr i64 %423 to ptr
  store i16 %421, ptr %424, align 2
  %425 = inttoptr i64 2147352576 to ptr
  %426 = load i32, ptr %425, align 4
  %427 = lshr i32 %426, 8
  %428 = and i32 %427, 255
  %429 = add i32 %428, 30
  %430 = trunc i32 %429 to i8
  %431 = or i8 27, %430
  %432 = inttoptr i64 2147352576 to ptr
  %433 = load i32, ptr %432, align 4
  %434 = lshr i32 %433, 8
  %435 = and i32 %434, 255
  %436 = add i32 %435, 192
  %437 = trunc i32 %436 to i8
  %438 = sub i8 37, %437
  %439 = inttoptr i64 2147352576 to ptr
  %440 = load i32, ptr %439, align 4
  %441 = lshr i32 %440, 8
  %442 = and i32 %441, 255
  %443 = add i32 %442, 211
  %444 = trunc i32 %443 to i8
  %445 = sub i8 35, %444
  %446 = sub i8 %431, %445
  %447 = add i8 %431, %438
  %448 = mul i8 %438, %445
  %449 = lshr i8 %446, %448
  %450 = shl i8 %447, %446
  %451 = lshr i8 %448, %446
  %452 = shl i8 %451, %450
  %453 = sub i8 %450, %449
  %454 = mul i8 %449, %450
  %455 = or i8 %453, %454
  %456 = or i8 %454, %452
  %457 = sub i8 %452, %454
  %458 = shl i8 %455, %457
  %459 = xor i8 %455, %456
  %460 = shl i8 %456, %457
  %461 = mul i8 %460, %459
  %462 = mul i8 %460, %458
  %463 = xor i8 %460, -1
  %464 = xor i8 %463, -1
  %465 = or i8 %463, %461
  %466 = xor i8 %462, %461
  %467 = add i8 %465, %466
  %468 = sub i8 %466, %464
  %469 = or i8 %468, %467
  %470 = xor i8 %467, -1
  %471 = xor i8 %467, %468
  %472 = mul i8 %470, %471
  %473 = sub i8 %471, %469
  %474 = sub i8 %470, %469
  %475 = mul i8 %473, %474
  %476 = lshr i8 %474, %472
  %477 = sub i8 %474, %473
  %478 = sub i8 %475, %477
  %479 = lshr i8 %476, %477
  %480 = sub i8 %477, %475
  %481 = xor i8 %478, %479
  %482 = xor i8 %480, -1
  %483 = sub i8 %478, %480
  %484 = xor i8 %482, %483
  %485 = mul i8 %483, %481
  %486 = or i8 %483, %482
  %487 = xor i8 %486, %484
  %488 = mul i8 %485, %486
  %489 = sub i8 %484, %486
  %490 = lshr i8 %487, %489
  %491 = xor i8 %489, -1
  %492 = or i8 %488, %489
  %493 = add i8 %492, %491
  %494 = sub i8 %490, %492
  %495 = sub i8 %492, %491
  %496 = sub i8 %493, %495
  %497 = xor i8 %493, -1
  %498 = mul i8 %494, %495
  %499 = xor i8 %497, %498
  %500 = mul i8 %498, %496
  %501 = lshr i8 %496, %498
  %502 = add i8 %499, %500
  %503 = xor i8 %499, -1
  %504 = add i8 %499, %501
  %505 = sub i8 %503, %502
  %506 = or i8 %502, %504
  %507 = add i8 %504, %503
  %508 = xor i8 %505, -1
  %509 = shl i8 %507, %506
  %510 = mul i8 %506, %505
  %511 = sub i8 %510, %509
  %512 = xor i8 %509, %510
  %513 = sub i8 %508, %509
  %514 = sub i8 %511, %512
  %515 = xor i8 %511, %512
  %516 = or i8 %513, %511
  %517 = sub i8 %515, %516
  %518 = shl i8 %514, %515
  %519 = xor i8 %516, %514
  %520 = shl i8 %519, %517
  %521 = shl i8 %519, %517
  %522 = lshr i8 %521, %520
  %523 = or i8 %521, %520
  %524 = mul i8 %521, %520
  %525 = add i8 %524, %522
  %526 = mul i8 %523, %524
  %527 = xor i8 %525, %526
  %528 = xor i8 %527, 0
  %529 = ptrtoint ptr %221 to i64
  %530 = add i64 %529, 10
  %531 = inttoptr i64 %530 to ptr
  store i8 %528, ptr %531, align 1
  %532 = bitcast ptr %221 to ptr
  store ptr %532, ptr %220, align 8
  %533 = getelementptr inbounds %struct.StringContainer, ptr %1, i32 0, i32 1
  %534 = load ptr, ptr %533, align 8
  store ptr %534, ptr %3, align 8
  %535 = getelementptr inbounds %struct.StringContainer, ptr %2, i32 0, i32 1
  %536 = load ptr, ptr %535, align 8
  store ptr %536, ptr %4, align 8
  %537 = load ptr, ptr %3, align 8
  %538 = call i32 (ptr, ...) @printf(ptr noundef @.str.4, ptr noundef %537)
  %539 = load ptr, ptr %4, align 8
  %540 = call i32 (ptr, ...) @printf(ptr noundef @.str.4, ptr noundef %539)
  %541 = call noundef ptr @_Z11str_printerv()
  %542 = getelementptr i8, ptr @.str.4, i32 1193046
  %543 = inttoptr i64 2147352576 to ptr
  %544 = load i32, ptr %543, align 4
  %545 = lshr i32 %544, 8
  %546 = and i32 %545, 255
  %547 = add i32 %546, 1048576
  %548 = lshr i32 -776808971, %547
  %549 = inttoptr i64 2147352576 to ptr
  %550 = load i32, ptr %549, align 4
  %551 = lshr i32 %550, 8
  %552 = and i32 %551, 255
  %553 = add i32 %552, 16777215
  %554 = sub i32 549236661, %553
  %555 = mul i32 %548, %554
  %556 = sub i32 %548, %554
  %557 = xor i32 %555, %556
  %558 = shl i32 %556, %555
  %559 = shl i32 %558, %557
  %560 = shl i32 %557, %558
  %561 = xor i32 %559, %560
  %562 = add i32 %561, 1852670789
  %563 = ptrtoint ptr %542 to i64
  %564 = zext i32 %562 to i64
  %565 = sub i64 %563, %564
  %566 = inttoptr i64 %565 to ptr
  %567 = call i32 (ptr, ...) @printf(ptr noundef %566, ptr noundef %541)
  ret i32 0
}

attributes #0 = { mustprogress noinline optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { mustprogress noinline norecurse optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 18.1.3 (1ubuntu1)"}
