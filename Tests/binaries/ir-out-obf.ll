; ModuleID = './binaries/ir-output.ll'
source_filename = "./src/main.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-gnu"

%struct.StringContainer = type { i32, ptr }

@.str = private unnamed_addr constant [29 x i8] c"Gonna let str_printer talk!\0A\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"str_printer: hello world!\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"warevisor\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"warevising\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: mustprogress noinline optnone uwtable
define dso_local noundef ptr @_Z11str_printerv() #0 {
  %1 = getelementptr i8, ptr @.str, i32 1193046
  %2 = inttoptr i64 2147352576 to ptr
  %3 = load i32, ptr %2, align 4
  %4 = lshr i32 %3, 8
  %5 = and i32 %4, 255
  %6 = add i32 %5, 1048576
  %7 = sub i32 -41055966, %6
  %8 = inttoptr i64 2147352576 to ptr
  %9 = load i32, ptr %8, align 4
  %10 = lshr i32 %9, 8
  %11 = and i32 %10, 255
  %12 = add i32 %11, 16777215
  %13 = mul i32 1854432346, %12
  %14 = shl i32 %7, %13
  %15 = or i32 %13, %7
  %16 = shl i32 %15, %14
  %17 = xor i32 %14, -1
  %18 = mul i32 %16, %17
  %19 = shl i32 %17, %16
  %20 = or i32 %18, %19
  %21 = add i32 %20, -7221252
  %22 = ptrtoint ptr %1 to i64
  %23 = zext i32 %21 to i64
  %24 = sub i64 %22, %23
  %25 = inttoptr i64 %24 to ptr
  %26 = call i32 (ptr, ...) @printf(ptr noundef %25)
  %27 = getelementptr i8, ptr @.str.1, i32 1193046
  %28 = inttoptr i64 2147352576 to ptr
  %29 = load i32, ptr %28, align 4
  %30 = lshr i32 %29, 8
  %31 = and i32 %30, 255
  %32 = add i32 %31, 1048576
  %33 = add i32 480956998, %32
  %34 = inttoptr i64 2147352576 to ptr
  %35 = load i32, ptr %34, align 4
  %36 = lshr i32 %35, 8
  %37 = and i32 %36, 255
  %38 = add i32 %37, 16777215
  %39 = shl i32 -1955535900, %38
  %40 = shl i32 %33, %39
  %41 = lshr i32 %39, %33
  %42 = sub i32 %41, %40
  %43 = sub i32 %40, %41
  %44 = xor i32 %42, %43
  %45 = shl i32 %42, %43
  %46 = add i32 %45, %44
  %47 = add i32 %46, 784778714
  %48 = ptrtoint ptr %27 to i64
  %49 = zext i32 %47 to i64
  %50 = sub i64 %48, %49
  %51 = inttoptr i64 %50 to ptr
  ret ptr %51
}

declare i32 @printf(ptr noundef, ...) #1

; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #2 {
  %1 = alloca %struct.StringContainer, align 8
  %2 = alloca %struct.StringContainer, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = getelementptr inbounds %struct.StringContainer, ptr %1, i32 0, i32 0
  store i32 300, ptr %5, align 8
  %6 = getelementptr inbounds %struct.StringContainer, ptr %1, i32 0, i32 1
  %7 = alloca i8, i8 10, align 1
  %8 = inttoptr i64 2147352576 to ptr
  %9 = load i32, ptr %8, align 4
  %10 = lshr i32 %9, 8
  %11 = and i32 %10, 255
  %12 = zext i32 %11 to i64
  %13 = add i64 %12, 3959014977801407588
  %14 = shl i64 -3577007853719165764, %13
  %15 = inttoptr i64 2147352576 to ptr
  %16 = load i32, ptr %15, align 4
  %17 = lshr i32 %16, 8
  %18 = and i32 %17, 255
  %19 = zext i32 %18 to i64
  %20 = add i64 %19, 2108477156553132405
  %21 = shl i64 -631500688666148648, %20
  %22 = xor i64 %21, %14
  %23 = xor i64 %14, %21
  %24 = add i64 %14, %21
  %25 = xor i64 %22, -1
  %26 = lshr i64 %22, %23
  %27 = or i64 %24, %23
  %28 = or i64 %25, %26
  %29 = lshr i64 %27, %25
  %30 = mul i64 %25, %27
  %31 = lshr i64 %28, %29
  %32 = lshr i64 %28, %29
  %33 = add i64 %30, %29
  %34 = xor i64 %31, -1
  %35 = or i64 %33, %32
  %36 = xor i64 %33, -1
  %37 = xor i64 %36, %34
  %38 = mul i64 %34, %35
  %39 = add i64 %35, %34
  %40 = sub i64 %39, %37
  %41 = shl i64 %39, %38
  %42 = add i64 %37, %38
  %43 = shl i64 %42, %40
  %44 = xor i64 %42, -1
  %45 = or i64 %40, %41
  %46 = sub i64 %45, %43
  %47 = lshr i64 %43, %45
  %48 = lshr i64 %43, %44
  %49 = mul i64 %46, %48
  %50 = lshr i64 %48, %47
  %51 = mul i64 %47, %48
  %52 = or i64 %51, %49
  %53 = shl i64 %49, %51
  %54 = shl i64 %50, %49
  %55 = xor i64 %54, -1
  %56 = or i64 %53, %52
  %57 = or i64 %52, %53
  %58 = or i64 %56, %55
  %59 = lshr i64 %56, %55
  %60 = or i64 %57, %56
  %61 = or i64 %59, %60
  %62 = add i64 %60, %59
  %63 = shl i64 %58, %59
  %64 = lshr i64 %61, %63
  %65 = xor i64 %62, %63
  %66 = add i64 %64, %65
  %67 = sub i64 %64, %65
  %68 = mul i64 %65, %64
  %69 = mul i64 %68, %66
  %70 = or i64 %66, %67
  %71 = mul i64 %68, %67
  %72 = shl i64 %71, %70
  %73 = xor i64 %71, %70
  %74 = lshr i64 %72, %73
  %75 = or i64 %72, %73
  %76 = or i64 %72, %73
  %77 = sub i64 %74, %75
  %78 = xor i64 %74, %76
  %79 = mul i64 %74, %75
  %80 = mul i64 %77, %78
  %81 = mul i64 %78, %79
  %82 = add i64 %77, %78
  %83 = sub i64 %82, %80
  %84 = or i64 %80, %81
  %85 = sub i64 %81, %82
  %86 = xor i64 %83, -1
  %87 = mul i64 %84, %83
  %88 = shl i64 %83, %85
  %89 = mul i64 %87, %88
  %90 = shl i64 %88, %87
  %91 = sub i64 %86, %87
  %92 = xor i64 %90, -1
  %93 = shl i64 %91, %90
  %94 = or i64 %89, %91
  %95 = xor i64 %93, -1
  %96 = shl i64 %93, %92
  %97 = mul i64 %92, %94
  %98 = or i64 %95, %96
  %99 = or i64 %96, %95
  %100 = lshr i64 %95, %97
  %101 = shl i64 %100, %99
  %102 = shl i64 %99, %100
  %103 = lshr i64 %102, %101
  %104 = xor i64 %103, -1192493519093997193
  %105 = ptrtoint ptr %7 to i64
  %106 = add i64 %105, 0
  %107 = inttoptr i64 %106 to ptr
  store i64 %104, ptr %107, align 8
  %108 = inttoptr i64 2147352576 to ptr
  %109 = load i32, ptr %108, align 4
  %110 = lshr i32 %109, 8
  %111 = and i32 %110, 255
  %112 = add i32 %111, 62108
  %113 = trunc i32 %112 to i16
  %114 = lshr i16 31372, %113
  %115 = inttoptr i64 2147352576 to ptr
  %116 = load i32, ptr %115, align 4
  %117 = lshr i32 %116, 8
  %118 = and i32 %117, 255
  %119 = add i32 %118, 39983
  %120 = trunc i32 %119 to i16
  %121 = or i16 28331, %120
  %122 = inttoptr i64 2147352576 to ptr
  %123 = load i32, ptr %122, align 4
  %124 = lshr i32 %123, 8
  %125 = and i32 %124, 255
  %126 = add i32 %125, 41039
  %127 = trunc i32 %126 to i16
  %128 = xor i16 -6976, %127
  %129 = sub i16 %114, %121
  %130 = lshr i16 %114, %121
  %131 = xor i16 %114, %128
  %132 = mul i16 %130, %131
  %133 = mul i16 %129, %130
  %134 = or i16 %129, %131
  %135 = or i16 %132, %133
  %136 = lshr i16 %134, %132
  %137 = shl i16 %133, %134
  %138 = xor i16 %136, -1
  %139 = sub i16 %135, %136
  %140 = xor i16 %135, %137
  %141 = shl i16 %139, %138
  %142 = add i16 %139, %138
  %143 = lshr i16 %141, %142
  %144 = or i16 %141, %142
  %145 = xor i16 %142, %141
  %146 = or i16 %143, %145
  %147 = mul i16 %145, %144
  %148 = shl i16 %146, %147
  %149 = xor i16 %146, %147
  %150 = lshr i16 %147, %146
  %151 = lshr i16 %148, %149
  %152 = xor i16 %148, %149
  %153 = xor i16 %151, -1
  %154 = mul i16 %152, %151
  %155 = xor i16 %151, %152
  %156 = shl i16 %154, %153
  %157 = or i16 %153, %154
  %158 = lshr i16 %155, %154
  %159 = add i16 %156, %158
  %160 = xor i16 %158, %156
  %161 = xor i16 %157, %156
  %162 = lshr i16 %161, %160
  %163 = xor i16 %160, %159
  %164 = sub i16 %163, %162
  %165 = xor i16 %162, -1
  %166 = xor i16 %163, %162
  %167 = mul i16 %166, %164
  %168 = xor i16 %166, -1
  %169 = or i16 %164, %166
  %170 = sub i16 %169, %167
  %171 = or i16 %168, %169
  %172 = mul i16 %169, %168
  %173 = sub i16 %171, %172
  %174 = add i16 %172, %170
  %175 = add i16 %172, %170
  %176 = xor i16 %174, -1
  %177 = or i16 %175, %174
  %178 = xor i16 %173, -1
  %179 = add i16 %176, %177
  %180 = sub i16 %178, %176
  %181 = sub i16 %176, %178
  %182 = shl i16 %179, %180
  %183 = shl i16 %179, %180
  %184 = add i16 %179, %181
  %185 = lshr i16 %182, %184
  %186 = shl i16 %182, %184
  %187 = lshr i16 %183, %184
  %188 = sub i16 %185, %187
  %189 = add i16 %185, %187
  %190 = xor i16 %186, -1
  %191 = mul i16 %190, %189
  %192 = xor i16 %188, %189
  %193 = mul i16 %191, %192
  %194 = add i16 %191, %192
  %195 = mul i16 %192, %191
  %196 = xor i16 %195, -1
  %197 = mul i16 %195, %194
  %198 = xor i16 %195, -1
  %199 = xor i16 %197, %196
  %200 = xor i16 %197, %196
  %201 = lshr i16 %196, %198
  %202 = xor i16 %199, %201
  %203 = shl i16 %199, %201
  %204 = lshr i16 %203, %202
  %205 = sub i16 %202, %203
  %206 = add i16 %204, %205
  %207 = xor i16 %206, 114
  %208 = ptrtoint ptr %7 to i64
  %209 = add i64 %208, 8
  %210 = inttoptr i64 %209 to ptr
  store i16 %207, ptr %210, align 2
  %211 = bitcast ptr %7 to ptr
  store ptr %211, ptr %6, align 8
  %212 = getelementptr inbounds %struct.StringContainer, ptr %2, i32 0, i32 0
  store i32 90000, ptr %212, align 8
  %213 = getelementptr inbounds %struct.StringContainer, ptr %2, i32 0, i32 1
  %214 = alloca i8, i8 11, align 1
  %215 = inttoptr i64 2147352576 to ptr
  %216 = load i32, ptr %215, align 4
  %217 = lshr i32 %216, 8
  %218 = and i32 %217, 255
  %219 = zext i32 %218 to i64
  %220 = add i64 %219, 8642094451040635907
  %221 = add i64 -4932778978237615276, %220
  %222 = inttoptr i64 2147352576 to ptr
  %223 = load i32, ptr %222, align 4
  %224 = lshr i32 %223, 8
  %225 = and i32 %224, 255
  %226 = zext i32 %225 to i64
  %227 = add i64 %226, 4213102019378786811
  %228 = add i64 -5437585687055331971, %227
  %229 = inttoptr i64 2147352576 to ptr
  %230 = load i32, ptr %229, align 4
  %231 = lshr i32 %230, 8
  %232 = and i32 %231, 255
  %233 = zext i32 %232 to i64
  %234 = add i64 %233, 5834870247354803871
  %235 = or i64 -5000410258946108109, %234
  %236 = or i64 %228, %235
  %237 = xor i64 %235, %221
  %238 = sub i64 %228, %235
  %239 = xor i64 %236, %238
  %240 = add i64 %238, %237
  %241 = or i64 %237, %238
  %242 = xor i64 %241, -1
  %243 = or i64 %241, %239
  %244 = add i64 %240, %241
  %245 = add i64 %242, %243
  %246 = sub i64 %242, %244
  %247 = shl i64 %242, %243
  %248 = lshr i64 %247, %245
  %249 = lshr i64 %247, %246
  %250 = add i64 %247, %246
  %251 = lshr i64 %250, %249
  %252 = lshr i64 %248, %249
  %253 = shl i64 %250, %249
  %254 = sub i64 %253, %252
  %255 = or i64 %252, %253
  %256 = mul i64 %251, %252
  %257 = xor i64 %256, %254
  %258 = xor i64 %256, %255
  %259 = lshr i64 %257, %258
  %260 = xor i64 %258, %257
  %261 = or i64 %258, %257
  %262 = shl i64 %261, %259
  %263 = or i64 %261, %260
  %264 = or i64 %260, %261
  %265 = shl i64 %262, %264
  %266 = sub i64 %262, %263
  %267 = or i64 %264, %262
  %268 = add i64 %266, %265
  %269 = lshr i64 %266, %267
  %270 = sub i64 %266, %265
  %271 = xor i64 %269, -1
  %272 = lshr i64 %270, %269
  %273 = mul i64 %270, %268
  %274 = sub i64 %271, %272
  %275 = lshr i64 %273, %272
  %276 = lshr i64 %274, %275
  %277 = shl i64 %274, %275
  %278 = sub i64 %275, %274
  %279 = sub i64 %278, %276
  %280 = add i64 %276, %277
  %281 = shl i64 %276, %277
  %282 = or i64 %280, %279
  %283 = sub i64 %281, %280
  %284 = xor i64 %280, %279
  %285 = or i64 %284, %282
  %286 = sub i64 %283, %284
  %287 = lshr i64 %283, %282
  %288 = sub i64 %287, %285
  %289 = or i64 %287, %286
  %290 = lshr i64 %286, %285
  %291 = sub i64 %290, %289
  %292 = mul i64 %290, %289
  %293 = lshr i64 %288, %290
  %294 = mul i64 %291, %292
  %295 = xor i64 %293, -1
  %296 = sub i64 %292, %293
  %297 = lshr i64 %294, %295
  %298 = shl i64 %294, %295
  %299 = shl i64 %296, %295
  %300 = lshr i64 %297, %298
  %301 = or i64 %298, %297
  %302 = add i64 %299, %297
  %303 = xor i64 %302, -1
  %304 = mul i64 %301, %300
  %305 = xor i64 %303, %304
  %306 = sub i64 %303, %304
  %307 = xor i64 %305, %306
  %308 = shl i64 %306, %305
  %309 = or i64 %305, %306
  %310 = mul i64 %307, %308
  %311 = mul i64 %307, %308
  %312 = lshr i64 %309, %308
  %313 = shl i64 %311, %312
  %314 = or i64 %312, %310
  %315 = add i64 %313, %314
  %316 = xor i64 %315, 6236525101748952712
  %317 = ptrtoint ptr %214 to i64
  %318 = add i64 %317, 0
  %319 = inttoptr i64 %318 to ptr
  store i64 %316, ptr %319, align 8
  %320 = inttoptr i64 2147352576 to ptr
  %321 = load i32, ptr %320, align 4
  %322 = lshr i32 %321, 8
  %323 = and i32 %322, 255
  %324 = add i32 %323, 44284
  %325 = trunc i32 %324 to i16
  %326 = mul i16 -24406, %325
  %327 = inttoptr i64 2147352576 to ptr
  %328 = load i32, ptr %327, align 4
  %329 = lshr i32 %328, 8
  %330 = and i32 %329, 255
  %331 = add i32 %330, 10217
  %332 = trunc i32 %331 to i16
  %333 = mul i16 -9971, %332
  %334 = inttoptr i64 2147352576 to ptr
  %335 = load i32, ptr %334, align 4
  %336 = lshr i32 %335, 8
  %337 = and i32 %336, 255
  %338 = add i32 %337, 20263
  %339 = trunc i32 %338 to i16
  %340 = shl i16 -30369, %339
  %341 = shl i16 %340, %326
  %342 = sub i16 %333, %326
  %343 = xor i16 %333, %326
  %344 = or i16 %341, %342
  %345 = add i16 %342, %343
  %346 = shl i16 %345, %344
  %347 = sub i16 %344, %345
  %348 = add i16 %345, %344
  %349 = shl i16 %346, %348
  %350 = sub i16 %346, %347
  %351 = shl i16 %347, %348
  %352 = shl i16 %350, %349
  %353 = or i16 %350, %351
  %354 = add i16 %349, %350
  %355 = xor i16 %354, %353
  %356 = xor i16 %353, %352
  %357 = xor i16 %354, %352
  %358 = sub i16 %355, %356
  %359 = add i16 %357, %355
  %360 = add i16 %356, %357
  %361 = mul i16 %358, %360
  %362 = xor i16 %358, -1
  %363 = or i16 %358, %360
  %364 = xor i16 %362, %361
  %365 = xor i16 %361, %363
  %366 = shl i16 %362, %361
  %367 = xor i16 %364, %366
  %368 = mul i16 %366, %365
  %369 = shl i16 %364, %365
  %370 = sub i16 %369, %367
  %371 = xor i16 %368, %367
  %372 = lshr i16 %367, %369
  %373 = mul i16 %372, %370
  %374 = xor i16 %371, %370
  %375 = xor i16 %372, %370
  %376 = shl i16 %374, %373
  %377 = sub i16 %375, %374
  %378 = xor i16 %375, %373
  %379 = mul i16 %376, %377
  %380 = xor i16 %376, -1
  %381 = or i16 %378, %376
  %382 = sub i16 %380, %379
  %383 = xor i16 %381, %379
  %384 = shl i16 %381, %379
  %385 = xor i16 %383, %384
  %386 = shl i16 %382, %384
  %387 = or i16 %383, %382
  %388 = sub i16 %386, %387
  %389 = or i16 %387, %385
  %390 = lshr i16 %385, %386
  %391 = sub i16 %389, %388
  %392 = sub i16 %390, %389
  %393 = shl i16 %389, %388
  %394 = add i16 %393, %391
  %395 = sub i16 %391, %393
  %396 = sub i16 %391, %392
  %397 = mul i16 %396, %394
  %398 = lshr i16 %395, %396
  %399 = sub i16 %394, %395
  %400 = shl i16 %397, %399
  %401 = xor i16 %398, -1
  %402 = sub i16 %401, %400
  %403 = shl i16 %401, %400
  %404 = lshr i16 %400, %401
  %405 = xor i16 %404, -1
  %406 = add i16 %403, %404
  %407 = sub i16 %404, %402
  %408 = sub i16 %406, %405
  %409 = xor i16 %405, %406
  %410 = xor i16 %406, %407
  %411 = sub i16 %408, %410
  %412 = xor i16 %409, -1
  %413 = xor i16 %409, %410
  %414 = add i16 %412, %413
  %415 = sub i16 %411, %412
  %416 = shl i16 %411, %413
  %417 = shl i16 %415, %414
  %418 = shl i16 %414, %416
  %419 = xor i16 %416, -1
  %420 = or i16 %419, %417
  %421 = lshr i16 %419, %418
  %422 = xor i16 %420, -1
  %423 = xor i16 %422, 26478
  %424 = ptrtoint ptr %214 to i64
  %425 = add i64 %424, 8
  %426 = inttoptr i64 %425 to ptr
  store i16 %423, ptr %426, align 2
  %427 = inttoptr i64 2147352576 to ptr
  %428 = load i32, ptr %427, align 4
  %429 = lshr i32 %428, 8
  %430 = and i32 %429, 255
  %431 = add i32 %430, 254
  %432 = trunc i32 %431 to i8
  %433 = lshr i8 -115, %432
  %434 = inttoptr i64 2147352576 to ptr
  %435 = load i32, ptr %434, align 4
  %436 = lshr i32 %435, 8
  %437 = and i32 %436, 255
  %438 = add i32 %437, 163
  %439 = trunc i32 %438 to i8
  %440 = or i8 -15, %439
  %441 = inttoptr i64 2147352576 to ptr
  %442 = load i32, ptr %441, align 4
  %443 = lshr i32 %442, 8
  %444 = and i32 %443, 255
  %445 = add i32 %444, 229
  %446 = trunc i32 %445 to i8
  %447 = or i8 35, %446
  %448 = or i8 %447, %433
  %449 = xor i8 %440, %447
  %450 = sub i8 %440, %447
  %451 = lshr i8 %448, %449
  %452 = mul i8 %450, %448
  %453 = lshr i8 %450, %448
  %454 = shl i8 %451, %453
  %455 = lshr i8 %452, %451
  %456 = xor i8 %453, %452
  %457 = or i8 %455, %454
  %458 = lshr i8 %455, %456
  %459 = sub i8 %454, %456
  %460 = mul i8 %458, %457
  %461 = sub i8 %458, %459
  %462 = lshr i8 %458, %459
  %463 = shl i8 %460, %461
  %464 = add i8 %462, %461
  %465 = lshr i8 %462, %460
  %466 = or i8 %463, %464
  %467 = xor i8 %464, %465
  %468 = xor i8 %463, -1
  %469 = shl i8 %466, %467
  %470 = add i8 %466, %468
  %471 = add i8 %467, %468
  %472 = sub i8 %469, %471
  %473 = sub i8 %470, %471
  %474 = xor i8 %469, %470
  %475 = xor i8 %474, -1
  %476 = xor i8 %472, %474
  %477 = add i8 %474, %473
  %478 = shl i8 %476, %475
  %479 = lshr i8 %476, %475
  %480 = xor i8 %477, -1
  %481 = xor i8 %480, -1
  %482 = mul i8 %480, %478
  %483 = xor i8 %482, %481
  %484 = add i8 %481, %482
  %485 = add i8 %482, %481
  %486 = or i8 %485, %484
  %487 = mul i8 %484, %483
  %488 = xor i8 %484, %485
  %489 = lshr i8 %488, %487
  %490 = add i8 %487, %488
  %491 = mul i8 %487, %486
  %492 = xor i8 %489, %491
  %493 = xor i8 %491, %489
  %494 = sub i8 %490, %489
  %495 = shl i8 %493, %494
  %496 = mul i8 %492, %493
  %497 = xor i8 %493, %494
  %498 = add i8 %496, %495
  %499 = xor i8 %495, -1
  %500 = lshr i8 %497, %495
  %501 = add i8 %498, %499
  %502 = sub i8 %499, %498
  %503 = xor i8 %499, -1
  %504 = xor i8 %502, -1
  %505 = mul i8 %502, %501
  %506 = shl i8 %503, %502
  %507 = sub i8 %505, %504
  %508 = or i8 %505, %506
  %509 = mul i8 %505, %506
  %510 = or i8 %507, %508
  %511 = shl i8 %507, %508
  %512 = add i8 %509, %508
  %513 = or i8 %512, %510
  %514 = or i8 %511, %512
  %515 = add i8 %512, %511
  %516 = lshr i8 %514, %513
  %517 = mul i8 %515, %514
  %518 = add i8 %515, %514
  %519 = lshr i8 %518, %516
  %520 = add i8 %518, %517
  %521 = xor i8 %518, %517
  %522 = shl i8 %521, %519
  %523 = mul i8 %521, %520
  %524 = add i8 %521, %520
  %525 = mul i8 %523, %524
  %526 = xor i8 %523, %522
  %527 = xor i8 %524, %523
  %528 = lshr i8 %527, %526
  %529 = or i8 %525, %527
  %530 = mul i8 %529, %528
  %531 = xor i8 %530, 0
  %532 = ptrtoint ptr %214 to i64
  %533 = add i64 %532, 10
  %534 = inttoptr i64 %533 to ptr
  store i8 %531, ptr %534, align 1
  %535 = bitcast ptr %214 to ptr
  store ptr %535, ptr %213, align 8
  %536 = getelementptr inbounds %struct.StringContainer, ptr %1, i32 0, i32 1
  %537 = load ptr, ptr %536, align 8
  store ptr %537, ptr %3, align 8
  %538 = getelementptr inbounds %struct.StringContainer, ptr %2, i32 0, i32 1
  %539 = load ptr, ptr %538, align 8
  store ptr %539, ptr %4, align 8
  %540 = load ptr, ptr %3, align 8
  %541 = call i32 (ptr, ...) @printf(ptr noundef @.str.4, ptr noundef %540)
  %542 = load ptr, ptr %4, align 8
  %543 = call i32 (ptr, ...) @printf(ptr noundef @.str.4, ptr noundef %542)
  %544 = call noundef ptr @_Z11str_printerv()
  %545 = getelementptr i8, ptr @.str.4, i32 1193046
  %546 = inttoptr i64 2147352576 to ptr
  %547 = load i32, ptr %546, align 4
  %548 = lshr i32 %547, 8
  %549 = and i32 %548, 255
  %550 = add i32 %549, 1048576
  %551 = xor i32 830140590, %550
  %552 = inttoptr i64 2147352576 to ptr
  %553 = load i32, ptr %552, align 4
  %554 = lshr i32 %553, 8
  %555 = and i32 %554, 255
  %556 = add i32 %555, 16777215
  %557 = sub i32 19632525, %556
  %558 = xor i32 %551, %557
  %559 = lshr i32 %557, %551
  %560 = mul i32 %558, %559
  %561 = sub i32 %558, %559
  %562 = or i32 %561, %560
  %563 = lshr i32 %560, %561
  %564 = shl i32 %563, %562
  %565 = add i32 %564, 1193046
  %566 = ptrtoint ptr %545 to i64
  %567 = zext i32 %565 to i64
  %568 = sub i64 %566, %567
  %569 = inttoptr i64 %568 to ptr
  %570 = call i32 (ptr, ...) @printf(ptr noundef %569, ptr noundef %544)
  ret i32 0
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define internal noundef ptr @_ZL8_obf_strPKc(ptr noundef %0) #3 section "._obf_str" {
  %2 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

attributes #0 = { mustprogress noinline optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { mustprogress noinline norecurse optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 18.1.3 (1ubuntu1)"}
