; ModuleID = './binaries/ir-output.ll'
source_filename = "./src/main.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.StringContainer = type { i32, ptr }

@.str = private unnamed_addr constant [29 x i8] c"Gonna let str_printer talk!\0A\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"str_printer: hello world!\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"warevisor\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"warevising\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: mustprogress noinline optnone uwtable
define dso_local noundef ptr @_Z11str_printerv() #0 {
  %1 = getelementptr i8, ptr @.str, i32 1193046
  %2 = inttoptr i64 2147352576 to ptr
  %3 = load i32, ptr %2, align 4
  %4 = lshr i32 %3, 8
  %5 = and i32 %4, 255
  %6 = add i32 %5, 1048576
  %7 = mul i32 -310323074, %6
  %8 = inttoptr i64 2147352576 to ptr
  %9 = load i32, ptr %8, align 4
  %10 = lshr i32 %9, 8
  %11 = and i32 %10, 255
  %12 = add i32 %11, 16777215
  %13 = shl i32 -782102522, %12
  %14 = mul i32 %13, %7
  %15 = mul i32 %7, %13
  %16 = or i32 %15, %14
  %17 = xor i32 %15, %14
  %18 = mul i32 %17, %16
  %19 = add i32 %17, %16
  %20 = mul i32 %19, %18
  %21 = add i32 %20, 1193046
  %22 = ptrtoint ptr %1 to i64
  %23 = zext i32 %21 to i64
  %24 = sub i64 %22, %23
  %25 = inttoptr i64 %24 to ptr
  %26 = call i32 (ptr, ...) @printf(ptr noundef %25)
  %27 = alloca i8, i8 26, align 1
  %28 = inttoptr i64 2147352576 to ptr
  %29 = load i32, ptr %28, align 4
  %30 = lshr i32 %29, 8
  %31 = and i32 %30, 255
  %32 = zext i32 %31 to i64
  %33 = add i64 %32, 8288249558864263834
  %34 = sub i64 -5946784057107526366, %33
  %35 = inttoptr i64 2147352576 to ptr
  %36 = load i32, ptr %35, align 4
  %37 = lshr i32 %36, 8
  %38 = and i32 %37, 255
  %39 = zext i32 %38 to i64
  %40 = add i64 %39, 6607870016291804059
  %41 = sub i64 1989243118387872835, %40
  %42 = inttoptr i64 2147352576 to ptr
  %43 = load i32, ptr %42, align 4
  %44 = lshr i32 %43, 8
  %45 = and i32 %44, 255
  %46 = zext i32 %45 to i64
  %47 = add i64 %46, -3584890062199842076
  %48 = shl i64 3247702691107958268, %47
  %49 = xor i64 %48, -1
  %50 = add i64 %48, %41
  %51 = xor i64 %41, -1
  %52 = lshr i64 %50, %49
  %53 = mul i64 %50, %51
  %54 = lshr i64 %51, %49
  %55 = xor i64 %54, -1
  %56 = sub i64 %52, %53
  %57 = xor i64 %54, -1
  %58 = xor i64 %55, -1
  %59 = add i64 %57, %56
  %60 = lshr i64 %58, %59
  %61 = lshr i64 %59, %58
  %62 = xor i64 %58, -1
  %63 = or i64 %62, %60
  %64 = shl i64 %62, %60
  %65 = mul i64 %60, %61
  %66 = or i64 %63, %64
  %67 = or i64 %63, %65
  %68 = shl i64 %64, %65
  %69 = sub i64 %68, %66
  %70 = lshr i64 %67, %66
  %71 = lshr i64 %69, %70
  %72 = sub i64 %70, %69
  %73 = or i64 %71, %72
  %74 = sub i64 %71, %72
  %75 = sub i64 %72, %71
  %76 = or i64 %75, %73
  %77 = lshr i64 %73, %75
  %78 = xor i64 %73, -1
  %79 = xor i64 %78, %77
  %80 = mul i64 %78, %77
  %81 = add i64 %78, %76
  %82 = mul i64 %79, %80
  %83 = lshr i64 %81, %79
  %84 = lshr i64 %81, %79
  %85 = or i64 %84, %83
  %86 = sub i64 %84, %82
  %87 = xor i64 %82, -1
  %88 = xor i64 %85, %86
  %89 = lshr i64 %86, %87
  %90 = xor i64 %85, %87
  %91 = or i64 %90, %88
  %92 = shl i64 %90, %89
  %93 = add i64 %91, %92
  %94 = sub i64 %92, %91
  %95 = lshr i64 %93, %94
  %96 = xor i64 %93, %94
  %97 = or i64 %93, %94
  %98 = mul i64 %96, %95
  %99 = shl i64 %97, %96
  %100 = add i64 %97, %96
  %101 = mul i64 %99, %98
  %102 = add i64 %98, %99
  %103 = lshr i64 %98, %100
  %104 = add i64 %101, %102
  %105 = shl i64 %102, %101
  %106 = shl i64 %105, %104
  %107 = sub i64 %104, %105
  %108 = mul i64 %104, %105
  %109 = add i64 %108, %106
  %110 = lshr i64 %107, %108
  %111 = add i64 %109, %110
  %112 = lshr i64 %110, %109
  %113 = shl i64 %109, %110
  %114 = sub i64 %112, %113
  %115 = sub i64 %111, %113
  %116 = add i64 %112, %111
  %117 = xor i64 %116, %114
  %118 = xor i64 %116, -1
  %119 = add i64 %115, %114
  %120 = xor i64 %118, %117
  %121 = or i64 %118, %119
  %122 = xor i64 %118, %119
  %123 = or i64 %120, %121
  %124 = xor i64 %122, -1
  %125 = shl i64 %123, %124
  %126 = xor i64 %125, -7956016043689931892
  %127 = ptrtoint ptr %27 to i64
  %128 = add i64 %127, 0
  %129 = inttoptr i64 %128 to ptr
  store i64 %126, ptr %129, align 8
  %130 = inttoptr i64 2147352576 to ptr
  %131 = load i32, ptr %130, align 4
  %132 = lshr i32 %131, 8
  %133 = and i32 %132, 255
  %134 = zext i32 %133 to i64
  %135 = add i64 %134, -3839250753194139507
  %136 = shl i64 5262334155435938502, %135
  %137 = inttoptr i64 2147352576 to ptr
  %138 = load i32, ptr %137, align 4
  %139 = lshr i32 %138, 8
  %140 = and i32 %139, 255
  %141 = zext i32 %140 to i64
  %142 = add i64 %141, -2786066528538475506
  %143 = xor i64 -6914162340842475582, %142
  %144 = inttoptr i64 2147352576 to ptr
  %145 = load i32, ptr %144, align 4
  %146 = lshr i32 %145, 8
  %147 = and i32 %146, 255
  %148 = zext i32 %147 to i64
  %149 = add i64 %148, 9141901671883109322
  %150 = xor i64 7185728663751831686, %149
  %151 = add i64 %136, %143
  %152 = or i64 %136, %150
  %153 = add i64 %143, %150
  %154 = xor i64 %153, -1
  %155 = or i64 %152, %153
  %156 = or i64 %151, %152
  %157 = mul i64 %156, %155
  %158 = add i64 %156, %155
  %159 = or i64 %154, %156
  %160 = xor i64 %158, -1
  %161 = add i64 %158, %157
  %162 = shl i64 %158, %159
  %163 = add i64 %162, %160
  %164 = lshr i64 %161, %160
  %165 = or i64 %161, %162
  %166 = xor i64 %164, -1
  %167 = sub i64 %165, %164
  %168 = shl i64 %163, %165
  %169 = mul i64 %167, %168
  %170 = add i64 %168, %166
  %171 = shl i64 %166, %168
  %172 = or i64 %169, %170
  %173 = mul i64 %169, %171
  %174 = xor i64 %169, %170
  %175 = add i64 %174, %172
  %176 = or i64 %173, %172
  %177 = xor i64 %172, -1
  %178 = or i64 %176, %177
  %179 = mul i64 %177, %176
  %180 = lshr i64 %175, %177
  %181 = lshr i64 %179, %178
  %182 = or i64 %178, %180
  %183 = add i64 %181, %182
  %184 = add i64 %182, %181
  %185 = shl i64 %181, %182
  %186 = add i64 %185, %184
  %187 = shl i64 %183, %184
  %188 = sub i64 %187, %186
  %189 = mul i64 %186, %187
  %190 = sub i64 %186, %187
  %191 = xor i64 %188, -1
  %192 = xor i64 %188, -1
  %193 = xor i64 %189, %188
  %194 = xor i64 %192, %191
  %195 = or i64 %191, %192
  %196 = add i64 %193, %191
  %197 = lshr i64 %196, %194
  %198 = xor i64 %196, %194
  %199 = mul i64 %196, %195
  %200 = shl i64 %197, %198
  %201 = xor i64 %198, -1
  %202 = add i64 %197, %199
  %203 = xor i64 %202, %200
  %204 = sub i64 %200, %201
  %205 = xor i64 %201, -1
  %206 = xor i64 %205, -1
  %207 = lshr i64 %204, %203
  %208 = xor i64 %203, -1
  %209 = mul i64 %206, %207
  %210 = xor i64 %208, %206
  %211 = shl i64 %208, %207
  %212 = xor i64 %209, -1
  %213 = shl i64 %209, %211
  %214 = or i64 %209, %211
  %215 = shl i64 %213, %212
  %216 = xor i64 %213, %214
  %217 = or i64 %212, %213
  %218 = xor i64 %217, -1
  %219 = shl i64 %217, %216
  %220 = shl i64 %215, %217
  %221 = xor i64 %220, %219
  %222 = lshr i64 %218, %219
  %223 = sub i64 %219, %218
  %224 = sub i64 %221, %223
  %225 = lshr i64 %223, %222
  %226 = add i64 %221, %222
  %227 = lshr i64 %225, %226
  %228 = xor i64 %224, -1
  %229 = xor i64 %225, -1
  %230 = lshr i64 %229, %227
  %231 = sub i64 %228, %227
  %232 = xor i64 %230, -1
  %233 = xor i64 %232, -1412608420481964684
  %234 = ptrtoint ptr %27 to i64
  %235 = add i64 %234, 8
  %236 = inttoptr i64 %235 to ptr
  store i64 %233, ptr %236, align 8
  %237 = inttoptr i64 2147352576 to ptr
  %238 = load i32, ptr %237, align 4
  %239 = lshr i32 %238, 8
  %240 = and i32 %239, 255
  %241 = zext i32 %240 to i64
  %242 = add i64 %241, -7148059725910420608
  %243 = or i64 -8683244575073280178, %242
  %244 = inttoptr i64 2147352576 to ptr
  %245 = load i32, ptr %244, align 4
  %246 = lshr i32 %245, 8
  %247 = and i32 %246, 255
  %248 = zext i32 %247 to i64
  %249 = add i64 %248, 1244980582329829786
  %250 = xor i64 6483140857148821400, %249
  %251 = inttoptr i64 2147352576 to ptr
  %252 = load i32, ptr %251, align 4
  %253 = lshr i32 %252, 8
  %254 = and i32 %253, 255
  %255 = zext i32 %254 to i64
  %256 = add i64 %255, -8190515476989150261
  %257 = sub i64 3232377974712179288, %256
  %258 = mul i64 %257, %250
  %259 = sub i64 %250, %257
  %260 = add i64 %250, %243
  %261 = shl i64 %260, %258
  %262 = or i64 %259, %258
  %263 = lshr i64 %260, %258
  %264 = or i64 %262, %263
  %265 = xor i64 %261, %263
  %266 = shl i64 %265, %264
  %267 = add i64 %265, %264
  %268 = xor i64 %264, -1
  %269 = mul i64 %268, %266
  %270 = shl i64 %267, %266
  %271 = xor i64 %268, -1
  %272 = xor i64 %271, -1
  %273 = add i64 %271, %269
  %274 = or i64 %270, %271
  %275 = xor i64 %273, -1
  %276 = mul i64 %273, %272
  %277 = add i64 %273, %274
  %278 = shl i64 %275, %276
  %279 = sub i64 %276, %277
  %280 = sub i64 %277, %276
  %281 = shl i64 %279, %278
  %282 = sub i64 %279, %280
  %283 = xor i64 %279, %280
  %284 = xor i64 %283, %282
  %285 = xor i64 %281, %282
  %286 = add i64 %282, %283
  %287 = or i64 %285, %286
  %288 = mul i64 %286, %284
  %289 = or i64 %285, %284
  %290 = shl i64 %288, %287
  %291 = sub i64 %287, %289
  %292 = lshr i64 %288, %287
  %293 = sub i64 %290, %292
  %294 = mul i64 %290, %291
  %295 = lshr i64 %292, %290
  %296 = mul i64 %294, %293
  %297 = mul i64 %294, %293
  %298 = lshr i64 %295, %294
  %299 = lshr i64 %298, %297
  %300 = or i64 %296, %298
  %301 = mul i64 %296, %298
  %302 = xor i64 %299, -1
  %303 = or i64 %300, %301
  %304 = lshr i64 %303, %302
  %305 = xor i64 %303, -1
  %306 = sub i64 %302, %303
  %307 = xor i64 %305, %304
  %308 = or i64 %306, %305
  %309 = add i64 %305, %304
  %310 = sub i64 %309, %307
  %311 = shl i64 %309, %307
  %312 = or i64 %307, %308
  %313 = sub i64 %311, %310
  %314 = mul i64 %312, %311
  %315 = xor i64 %312, -1
  %316 = sub i64 %315, %314
  %317 = lshr i64 %313, %315
  %318 = xor i64 %315, %314
  %319 = sub i64 %317, %316
  %320 = shl i64 %316, %318
  %321 = or i64 %316, %318
  %322 = or i64 %319, %321
  %323 = xor i64 %321, %319
  %324 = xor i64 %319, %320
  %325 = or i64 %322, %323
  %326 = xor i64 %323, %322
  %327 = mul i64 %322, %324
  %328 = add i64 %325, %326
  %329 = add i64 %326, %327
  %330 = or i64 %325, %327
  %331 = xor i64 %330, %328
  %332 = xor i64 %330, -1
  %333 = xor i64 %329, -1
  %334 = shl i64 %331, %332
  %335 = or i64 %333, %331
  %336 = sub i64 %333, %332
  %337 = sub i64 %334, %335
  %338 = xor i64 %336, -1
  %339 = lshr i64 %337, %338
  %340 = xor i64 %339, 7236284524343095148
  %341 = ptrtoint ptr %27 to i64
  %342 = add i64 %341, 16
  %343 = inttoptr i64 %342 to ptr
  store i64 %340, ptr %343, align 8
  %344 = inttoptr i64 2147352576 to ptr
  %345 = load i32, ptr %344, align 4
  %346 = lshr i32 %345, 8
  %347 = and i32 %346, 255
  %348 = add i32 %347, 52450
  %349 = trunc i32 %348 to i16
  %350 = mul i16 10994, %349
  %351 = inttoptr i64 2147352576 to ptr
  %352 = load i32, ptr %351, align 4
  %353 = lshr i32 %352, 8
  %354 = and i32 %353, 255
  %355 = add i32 %354, 7265
  %356 = trunc i32 %355 to i16
  %357 = xor i16 -32018, %356
  %358 = inttoptr i64 2147352576 to ptr
  %359 = load i32, ptr %358, align 4
  %360 = lshr i32 %359, 8
  %361 = and i32 %360, 255
  %362 = add i32 %361, 32358
  %363 = trunc i32 %362 to i16
  %364 = add i16 -19444, %363
  %365 = lshr i16 %350, %357
  %366 = mul i16 %357, %364
  %367 = mul i16 %357, %364
  %368 = or i16 %367, %366
  %369 = or i16 %366, %365
  %370 = lshr i16 %365, %367
  %371 = xor i16 %368, -1
  %372 = mul i16 %369, %370
  %373 = sub i16 %369, %370
  %374 = sub i16 %372, %371
  %375 = xor i16 %371, -1
  %376 = sub i16 %372, %373
  %377 = or i16 %375, %374
  %378 = lshr i16 %374, %376
  %379 = xor i16 %378, %377
  %380 = mul i16 %378, %377
  %381 = or i16 %377, %378
  %382 = mul i16 %379, %381
  %383 = xor i16 %381, %379
  %384 = shl i16 %381, %380
  %385 = lshr i16 %384, %383
  %386 = xor i16 %383, %382
  %387 = mul i16 %384, %383
  %388 = shl i16 %385, %386
  %389 = shl i16 %386, %387
  %390 = add i16 %385, %386
  %391 = xor i16 %390, %388
  %392 = sub i16 %390, %388
  %393 = mul i16 %390, %389
  %394 = sub i16 %393, %391
  %395 = sub i16 %392, %391
  %396 = xor i16 %392, -1
  %397 = shl i16 %394, %395
  %398 = xor i16 %396, -1
  %399 = xor i16 %395, -1
  %400 = xor i16 %398, -1
  %401 = shl i16 %399, %398
  %402 = mul i16 %399, %397
  %403 = mul i16 %402, %401
  %404 = xor i16 %400, %402
  %405 = mul i16 %401, %400
  %406 = sub i16 %403, %405
  %407 = xor i16 %405, -1
  %408 = shl i16 %403, %404
  %409 = lshr i16 %408, %407
  %410 = xor i16 %408, %406
  %411 = add i16 %407, %406
  %412 = xor i16 %410, -1
  %413 = shl i16 %409, %411
  %414 = or i16 %411, %410
  %415 = or i16 %414, %413
  %416 = mul i16 %413, %412
  %417 = sub i16 %412, %414
  %418 = sub i16 %416, %417
  %419 = add i16 %417, %416
  %420 = or i16 %417, %415
  %421 = or i16 %420, %419
  %422 = sub i16 %418, %419
  %423 = sub i16 %422, %421
  %424 = xor i16 %422, %421
  %425 = xor i16 %422, -1
  %426 = xor i16 %423, %424
  %427 = sub i16 %425, %424
  %428 = or i16 %423, %425
  %429 = lshr i16 %427, %426
  %430 = xor i16 %426, %428
  %431 = xor i16 %429, %430
  %432 = xor i16 %430, %429
  %433 = add i16 %430, %429
  %434 = mul i16 %431, %433
  %435 = or i16 %433, %432
  %436 = mul i16 %433, %431
  %437 = shl i16 %434, %436
  %438 = lshr i16 %436, %434
  %439 = or i16 %438, %437
  %440 = add i16 %437, %438
  %441 = sub i16 %437, %438
  %442 = lshr i16 %440, %441
  %443 = xor i16 %441, %439
  %444 = lshr i16 %443, %442
  %445 = xor i16 %444, 33
  %446 = ptrtoint ptr %27 to i64
  %447 = add i64 %446, 24
  %448 = inttoptr i64 %447 to ptr
  store i16 %445, ptr %448, align 2
  %449 = bitcast ptr %27 to ptr
  ret ptr %449
}

declare i32 @printf(ptr noundef, ...) #1

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define internal noundef ptr @_ZL8_obf_strPKc(ptr noundef %0) #2 section "._obf_str" {
  %2 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #3 {
  %1 = alloca %struct.StringContainer, align 8
  %2 = alloca %struct.StringContainer, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = getelementptr inbounds %struct.StringContainer, ptr %1, i32 0, i32 0
  store i32 300, ptr %5, align 8
  %6 = getelementptr inbounds %struct.StringContainer, ptr %1, i32 0, i32 1
  %7 = alloca i8, i8 10, align 1
  %8 = inttoptr i64 2147352576 to ptr
  %9 = load i32, ptr %8, align 4
  %10 = lshr i32 %9, 8
  %11 = and i32 %10, 255
  %12 = zext i32 %11 to i64
  %13 = add i64 %12, 4301250715357807179
  %14 = lshr i64 6597419133114160879, %13
  %15 = inttoptr i64 2147352576 to ptr
  %16 = load i32, ptr %15, align 4
  %17 = lshr i32 %16, 8
  %18 = and i32 %17, 255
  %19 = zext i32 %18 to i64
  %20 = add i64 %19, -5401555618185310808
  %21 = mul i64 3931091994120062661, %20
  %22 = inttoptr i64 2147352576 to ptr
  %23 = load i32, ptr %22, align 4
  %24 = lshr i32 %23, 8
  %25 = and i32 %24, 255
  %26 = zext i32 %25 to i64
  %27 = add i64 %26, -3725718841275263683
  %28 = or i64 -7868861332125761690, %27
  %29 = xor i64 %28, %21
  %30 = mul i64 %14, %28
  %31 = xor i64 %21, -1
  %32 = add i64 %30, %29
  %33 = xor i64 %30, %29
  %34 = add i64 %33, %32
  %35 = xor i64 %33, %32
  %36 = mul i64 %32, %33
  %37 = or i64 %34, %36
  %38 = shl i64 %36, %35
  %39 = lshr i64 %36, %34
  %40 = add i64 %37, %38
  %41 = xor i64 %39, -1
  %42 = mul i64 %37, %38
  %43 = add i64 %41, %42
  %44 = shl i64 %42, %41
  %45 = sub i64 %43, %44
  %46 = lshr i64 %43, %44
  %47 = xor i64 %43, -1
  %48 = shl i64 %45, %47
  %49 = xor i64 %46, %47
  %50 = mul i64 %46, %47
  %51 = mul i64 %50, %48
  %52 = xor i64 %49, -1
  %53 = add i64 %48, %50
  %54 = mul i64 %53, %52
  %55 = add i64 %53, %52
  %56 = add i64 %51, %52
  %57 = mul i64 %54, %55
  %58 = or i64 %54, %56
  %59 = xor i64 %56, %54
  %60 = xor i64 %58, %57
  %61 = add i64 %58, %59
  %62 = xor i64 %59, -1
  %63 = add i64 %60, %61
  %64 = or i64 %61, %60
  %65 = or i64 %60, %62
  %66 = or i64 %64, %65
  %67 = lshr i64 %63, %65
  %68 = sub i64 %64, %63
  %69 = or i64 %68, %67
  %70 = lshr i64 %68, %67
  %71 = mul i64 %67, %66
  %72 = lshr i64 %70, %69
  %73 = add i64 %69, %71
  %74 = xor i64 %69, -1
  %75 = lshr i64 %73, %72
  %76 = sub i64 %73, %74
  %77 = xor i64 %72, %74
  %78 = sub i64 %75, %76
  %79 = or i64 %76, %77
  %80 = xor i64 %75, %77
  %81 = mul i64 %79, %78
  %82 = shl i64 %79, %80
  %83 = mul i64 %79, %78
  %84 = mul i64 %83, %81
  %85 = xor i64 %81, -1
  %86 = lshr i64 %83, %82
  %87 = xor i64 %84, -1
  %88 = sub i64 %84, %86
  %89 = shl i64 %88, %87
  %90 = xor i64 %88, -1
  %91 = xor i64 %87, -1
  %92 = sub i64 %91, %89
  %93 = xor i64 %91, %90
  %94 = or i64 %90, %91
  %95 = mul i64 %92, %94
  %96 = lshr i64 %92, %93
  %97 = or i64 %93, %94
  %98 = or i64 %97, %96
  %99 = xor i64 %97, -1
  %100 = add i64 %97, %95
  %101 = or i64 %99, %98
  %102 = mul i64 %99, %98
  %103 = sub i64 %100, %98
  %104 = shl i64 %101, %102
  %105 = shl i64 %101, %102
  %106 = or i64 %102, %103
  %107 = xor i64 %105, %106
  %108 = sub i64 %106, %104
  %109 = add i64 %108, %107
  %110 = xor i64 %109, 8030878517760778615
  %111 = ptrtoint ptr %7 to i64
  %112 = add i64 %111, 0
  %113 = inttoptr i64 %112 to ptr
  store i64 %110, ptr %113, align 8
  %114 = inttoptr i64 2147352576 to ptr
  %115 = load i32, ptr %114, align 4
  %116 = lshr i32 %115, 8
  %117 = and i32 %116, 255
  %118 = add i32 %117, 27727
  %119 = trunc i32 %118 to i16
  %120 = or i16 12264, %119
  %121 = inttoptr i64 2147352576 to ptr
  %122 = load i32, ptr %121, align 4
  %123 = lshr i32 %122, 8
  %124 = and i32 %123, 255
  %125 = add i32 %124, 19601
  %126 = trunc i32 %125 to i16
  %127 = xor i16 24418, %126
  %128 = inttoptr i64 2147352576 to ptr
  %129 = load i32, ptr %128, align 4
  %130 = lshr i32 %129, 8
  %131 = and i32 %130, 255
  %132 = add i32 %131, 49209
  %133 = trunc i32 %132 to i16
  %134 = xor i16 -4805, %133
  %135 = mul i16 %120, %127
  %136 = shl i16 %127, %134
  %137 = xor i16 %127, -1
  %138 = xor i16 %137, -1
  %139 = add i16 %137, %135
  %140 = shl i16 %135, %137
  %141 = sub i16 %139, %138
  %142 = shl i16 %140, %139
  %143 = mul i16 %138, %140
  %144 = lshr i16 %141, %142
  %145 = mul i16 %142, %143
  %146 = sub i16 %143, %142
  %147 = xor i16 %144, -1
  %148 = or i16 %146, %145
  %149 = sub i16 %145, %146
  %150 = sub i16 %149, %148
  %151 = add i16 %148, %147
  %152 = sub i16 %149, %147
  %153 = shl i16 %150, %152
  %154 = mul i16 %150, %152
  %155 = mul i16 %152, %151
  %156 = xor i16 %153, %154
  %157 = or i16 %155, %153
  %158 = add i16 %156, %157
  %159 = mul i16 %156, %157
  %160 = mul i16 %156, %157
  %161 = xor i16 %158, %160
  %162 = add i16 %160, %158
  %163 = add i16 %161, %162
  %164 = xor i16 %162, %161
  %165 = xor i16 %161, %162
  %166 = shl i16 %164, %163
  %167 = add i16 %165, %164
  %168 = add i16 %165, %164
  %169 = mul i16 %168, %167
  %170 = mul i16 %167, %166
  %171 = sub i16 %167, %166
  %172 = xor i16 %170, %171
  %173 = xor i16 %171, -1
  %174 = xor i16 %170, -1
  %175 = add i16 %173, %172
  %176 = or i16 %174, %173
  %177 = xor i16 %174, %172
  %178 = sub i16 %177, %176
  %179 = shl i16 %176, %175
  %180 = mul i16 %175, %176
  %181 = or i16 %179, %178
  %182 = xor i16 %180, -1
  %183 = lshr i16 %180, %178
  %184 = xor i16 %182, -1
  %185 = add i16 %181, %183
  %186 = shl i16 %181, %182
  %187 = xor i16 %184, -1
  %188 = lshr i16 %186, %185
  %189 = mul i16 %185, %184
  %190 = shl i16 %188, %189
  %191 = xor i16 %187, %188
  %192 = xor i16 %187, -1
  %193 = add i16 %192, %190
  %194 = mul i16 %191, %192
  %195 = add i16 %192, %191
  %196 = xor i16 %195, %194
  %197 = xor i16 %193, -1
  %198 = xor i16 %196, -1
  %199 = xor i16 %196, -1
  %200 = add i16 %196, %197
  %201 = mul i16 %199, %200
  %202 = xor i16 %198, %200
  %203 = shl i16 %200, %199
  %204 = shl i16 %201, %202
  %205 = xor i16 %202, %203
  %206 = sub i16 %203, %202
  %207 = xor i16 %206, %204
  %208 = lshr i16 %205, %204
  %209 = or i16 %206, %205
  %210 = mul i16 %209, %208
  %211 = add i16 %207, %209
  %212 = sub i16 %208, %207
  %213 = or i16 %212, %211
  %214 = lshr i16 %210, %212
  %215 = lshr i16 %214, %213
  %216 = xor i16 %215, 114
  %217 = ptrtoint ptr %7 to i64
  %218 = add i64 %217, 8
  %219 = inttoptr i64 %218 to ptr
  store i16 %216, ptr %219, align 2
  %220 = bitcast ptr %7 to ptr
  store ptr %220, ptr %6, align 8
  %221 = getelementptr inbounds %struct.StringContainer, ptr %2, i32 0, i32 0
  store i32 90000, ptr %221, align 8
  %222 = getelementptr inbounds %struct.StringContainer, ptr %2, i32 0, i32 1
  %223 = alloca i8, i8 11, align 1
  %224 = inttoptr i64 2147352576 to ptr
  %225 = load i32, ptr %224, align 4
  %226 = lshr i32 %225, 8
  %227 = and i32 %226, 255
  %228 = zext i32 %227 to i64
  %229 = add i64 %228, 569506267795969050
  %230 = mul i64 -6721089043960457534, %229
  %231 = inttoptr i64 2147352576 to ptr
  %232 = load i32, ptr %231, align 4
  %233 = lshr i32 %232, 8
  %234 = and i32 %233, 255
  %235 = zext i32 %234 to i64
  %236 = add i64 %235, -2691975893715720134
  %237 = xor i64 9055538531896245800, %236
  %238 = inttoptr i64 2147352576 to ptr
  %239 = load i32, ptr %238, align 4
  %240 = lshr i32 %239, 8
  %241 = and i32 %240, 255
  %242 = zext i32 %241 to i64
  %243 = add i64 %242, 6524466296865750129
  %244 = sub i64 -3285592596558189406, %243
  %245 = xor i64 %237, %230
  %246 = or i64 %237, %230
  %247 = xor i64 %245, -1
  %248 = xor i64 %246, %245
  %249 = xor i64 %245, %246
  %250 = xor i64 %247, -1
  %251 = shl i64 %249, %247
  %252 = or i64 %248, %249
  %253 = xor i64 %252, %251
  %254 = xor i64 %252, %251
  %255 = shl i64 %250, %251
  %256 = add i64 %253, %254
  %257 = lshr i64 %254, %255
  %258 = sub i64 %253, %255
  %259 = or i64 %257, %258
  %260 = mul i64 %256, %258
  %261 = xor i64 %257, -1
  %262 = or i64 %260, %261
  %263 = shl i64 %261, %259
  %264 = shl i64 %261, %259
  %265 = shl i64 %262, %264
  %266 = sub i64 %264, %262
  %267 = xor i64 %263, %262
  %268 = xor i64 %267, -1
  %269 = shl i64 %267, %266
  %270 = sub i64 %266, %265
  %271 = add i64 %269, %270
  %272 = mul i64 %270, %268
  %273 = sub i64 %269, %268
  %274 = add i64 %273, %272
  %275 = mul i64 %271, %273
  %276 = lshr i64 %273, %272
  %277 = or i64 %276, %275
  %278 = shl i64 %275, %276
  %279 = xor i64 %274, %276
  %280 = mul i64 %277, %279
  %281 = or i64 %278, %279
  %282 = shl i64 %278, %277
  %283 = xor i64 %280, -1
  %284 = xor i64 %281, %280
  %285 = mul i64 %281, %280
  %286 = xor i64 %283, -1
  %287 = shl i64 %283, %284
  %288 = xor i64 %283, %284
  %289 = xor i64 %286, %287
  %290 = shl i64 %288, %287
  %291 = mul i64 %287, %286
  %292 = mul i64 %291, %289
  %293 = lshr i64 %289, %291
  %294 = sub i64 %290, %289
  %295 = mul i64 %293, %292
  %296 = lshr i64 %294, %293
  %297 = sub i64 %292, %294
  %298 = sub i64 %296, %295
  %299 = or i64 %296, %295
  %300 = or i64 %296, %297
  %301 = lshr i64 %300, %298
  %302 = xor i64 %300, %298
  %303 = xor i64 %299, -1
  %304 = sub i64 %301, %303
  %305 = sub i64 %302, %303
  %306 = sub i64 %303, %301
  %307 = or i64 %306, %305
  %308 = mul i64 %304, %305
  %309 = xor i64 %306, -1
  %310 = lshr i64 %309, %307
  %311 = lshr i64 %309, %308
  %312 = sub i64 %308, %307
  %313 = lshr i64 %312, %311
  %314 = add i64 %311, %312
  %315 = shl i64 %310, %311
  %316 = add i64 %314, %315
  %317 = or i64 %314, %313
  %318 = xor i64 %317, -1
  %319 = mul i64 %316, %317
  %320 = lshr i64 %317, %316
  %321 = or i64 %318, %320
  %322 = xor i64 %318, %319
  %323 = shl i64 %319, %318
  %324 = shl i64 %323, %321
  %325 = lshr i64 %322, %323
  %326 = shl i64 %325, %324
  %327 = xor i64 %326, 7598532953503116444
  %328 = ptrtoint ptr %223 to i64
  %329 = add i64 %328, 0
  %330 = inttoptr i64 %329 to ptr
  store i64 %327, ptr %330, align 8
  %331 = inttoptr i64 2147352576 to ptr
  %332 = load i32, ptr %331, align 4
  %333 = lshr i32 %332, 8
  %334 = and i32 %333, 255
  %335 = add i32 %334, 8489
  %336 = trunc i32 %335 to i16
  %337 = xor i16 5386, %336
  %338 = inttoptr i64 2147352576 to ptr
  %339 = load i32, ptr %338, align 4
  %340 = lshr i32 %339, 8
  %341 = and i32 %340, 255
  %342 = add i32 %341, 59879
  %343 = trunc i32 %342 to i16
  %344 = sub i16 9050, %343
  %345 = sub i16 %337, %344
  %346 = shl i16 %337, %344
  %347 = lshr i16 %344, %337
  %348 = xor i16 %347, -1
  %349 = or i16 %346, %345
  %350 = xor i16 %346, %347
  %351 = xor i16 %350, %349
  %352 = lshr i16 %350, %349
  %353 = shl i16 %352, %351
  %354 = xor i16 %352, -1
  %355 = xor i16 %352, -1
  %356 = xor i16 %353, %355
  %357 = shl i16 %353, %355
  %358 = shl i16 %354, %355
  %359 = lshr i16 %358, %357
  %360 = sub i16 %358, %356
  %361 = xor i16 %357, -1
  %362 = shl i16 %360, %359
  %363 = add i16 %360, %361
  %364 = xor i16 %362, %363
  %365 = xor i16 %363, %362
  %366 = shl i16 %362, %363
  %367 = add i16 %366, %364
  %368 = xor i16 %366, %365
  %369 = add i16 %368, %367
  %370 = or i16 %368, %367
  %371 = sub i16 %367, %368
  %372 = xor i16 %370, -1
  %373 = xor i16 %371, -1
  %374 = add i16 %373, %372
  %375 = xor i16 %373, %372
  %376 = mul i16 %373, %372
  %377 = sub i16 %376, %374
  %378 = sub i16 %374, %375
  %379 = xor i16 %375, -1
  %380 = xor i16 %378, %379
  %381 = xor i16 %379, %377
  %382 = mul i16 %379, %378
  %383 = lshr i16 %382, %381
  %384 = sub i16 %382, %380
  %385 = mul i16 %381, %380
  %386 = xor i16 %385, %384
  %387 = sub i16 %384, %385
  %388 = add i16 %383, %385
  %389 = shl i16 %387, %386
  %390 = sub i16 %388, %386
  %391 = sub i16 %386, %387
  %392 = lshr i16 %389, %391
  %393 = mul i16 %390, %389
  %394 = xor i16 %390, %391
  %395 = lshr i16 %393, %392
  %396 = shl i16 %393, %394
  %397 = shl i16 %393, %392
  %398 = or i16 %396, %395
  %399 = xor i16 %395, -1
  %400 = xor i16 %395, -1
  %401 = shl i16 %399, %400
  %402 = xor i16 %398, -1
  %403 = add i16 %398, %399
  %404 = shl i16 %403, %401
  %405 = shl i16 %401, %403
  %406 = add i16 %402, %403
  %407 = mul i16 %406, %404
  %408 = shl i16 %406, %405
  %409 = xor i16 %406, %405
  %410 = or i16 %408, %407
  %411 = sub i16 %409, %407
  %412 = sub i16 %408, %409
  %413 = lshr i16 %412, %410
  %414 = shl i16 %411, %410
  %415 = sub i16 %412, %411
  %416 = xor i16 %414, -1
  %417 = xor i16 %413, -1
  %418 = mul i16 %415, %414
  %419 = shl i16 %418, %416
  %420 = lshr i16 %417, %416
  %421 = lshr i16 %418, %417
  %422 = sub i16 %419, %421
  %423 = xor i16 %420, %421
  %424 = mul i16 %422, %423
  %425 = xor i16 %424, 26478
  %426 = ptrtoint ptr %223 to i64
  %427 = add i64 %426, 8
  %428 = inttoptr i64 %427 to ptr
  store i16 %425, ptr %428, align 2
  %429 = inttoptr i64 2147352576 to ptr
  %430 = load i32, ptr %429, align 4
  %431 = lshr i32 %430, 8
  %432 = and i32 %431, 255
  %433 = add i32 %432, 89
  %434 = trunc i32 %433 to i8
  %435 = xor i8 52, %434
  %436 = inttoptr i64 2147352576 to ptr
  %437 = load i32, ptr %436, align 4
  %438 = lshr i32 %437, 8
  %439 = and i32 %438, 255
  %440 = add i32 %439, 220
  %441 = trunc i32 %440 to i8
  %442 = lshr i8 -34, %441
  %443 = inttoptr i64 2147352576 to ptr
  %444 = load i32, ptr %443, align 4
  %445 = lshr i32 %444, 8
  %446 = and i32 %445, 255
  %447 = add i32 %446, 196
  %448 = trunc i32 %447 to i8
  %449 = mul i8 -64, %448
  %450 = xor i8 %449, -1
  %451 = mul i8 %442, %449
  %452 = lshr i8 %435, %449
  %453 = xor i8 %451, %450
  %454 = or i8 %450, %452
  %455 = lshr i8 %452, %451
  %456 = add i8 %455, %454
  %457 = shl i8 %453, %454
  %458 = add i8 %455, %454
  %459 = shl i8 %457, %458
  %460 = or i8 %457, %456
  %461 = sub i8 %460, %459
  %462 = xor i8 %460, %459
  %463 = shl i8 %459, %460
  %464 = xor i8 %463, %462
  %465 = shl i8 %462, %461
  %466 = or i8 %462, %461
  %467 = mul i8 %465, %464
  %468 = or i8 %466, %465
  %469 = xor i8 %465, -1
  %470 = xor i8 %469, -1
  %471 = mul i8 %468, %469
  %472 = shl i8 %469, %468
  %473 = lshr i8 %471, %472
  %474 = lshr i8 %470, %471
  %475 = lshr i8 %474, %473
  %476 = xor i8 %473, %474
  %477 = mul i8 %474, %473
  %478 = xor i8 %475, -1
  %479 = lshr i8 %477, %476
  %480 = xor i8 %477, -1
  %481 = mul i8 %480, %478
  %482 = lshr i8 %480, %479
  %483 = mul i8 %478, %479
  %484 = xor i8 %483, -1
  %485 = or i8 %483, %481
  %486 = or i8 %482, %481
  %487 = or i8 %484, %486
  %488 = mul i8 %485, %486
  %489 = xor i8 %484, %485
  %490 = xor i8 %488, %487
  %491 = or i8 %489, %488
  %492 = sub i8 %488, %487
  %493 = xor i8 %491, %492
  %494 = xor i8 %490, -1
  %495 = xor i8 %490, %492
  %496 = sub i8 %494, %495
  %497 = add i8 %495, %493
  %498 = or i8 %495, %493
  %499 = xor i8 %498, %496
  %500 = xor i8 %497, %496
  %501 = add i8 %496, %498
  %502 = shl i8 %499, %501
  %503 = or i8 %500, %501
  %504 = mul i8 %499, %500
  %505 = xor i8 %504, -1
  %506 = xor i8 %502, %503
  %507 = mul i8 %502, %504
  %508 = or i8 %506, %505
  %509 = xor i8 %507, %505
  %510 = sub i8 %507, %506
  %511 = add i8 %509, %510
  %512 = xor i8 %509, %510
  %513 = sub i8 %508, %510
  %514 = add i8 %511, %513
  %515 = shl i8 %512, %511
  %516 = add i8 %512, %511
  %517 = or i8 %514, %516
  %518 = mul i8 %514, %516
  %519 = or i8 %515, %514
  %520 = shl i8 %517, %519
  %521 = shl i8 %519, %517
  %522 = lshr i8 %518, %517
  %523 = xor i8 %521, -1
  %524 = lshr i8 %521, %522
  %525 = shl i8 %521, %520
  %526 = or i8 %525, %524
  %527 = lshr i8 %524, %523
  %528 = shl i8 %524, %525
  %529 = xor i8 %528, %526
  %530 = mul i8 %528, %526
  %531 = sub i8 %529, %530
  %532 = xor i8 %531, 0
  %533 = ptrtoint ptr %223 to i64
  %534 = add i64 %533, 10
  %535 = inttoptr i64 %534 to ptr
  store i8 %532, ptr %535, align 1
  %536 = bitcast ptr %223 to ptr
  store ptr %536, ptr %222, align 8
  %537 = getelementptr inbounds %struct.StringContainer, ptr %1, i32 0, i32 1
  %538 = load ptr, ptr %537, align 8
  store ptr %538, ptr %3, align 8
  %539 = getelementptr inbounds %struct.StringContainer, ptr %2, i32 0, i32 1
  %540 = load ptr, ptr %539, align 8
  store ptr %540, ptr %4, align 8
  %541 = load ptr, ptr %3, align 8
  %542 = call i32 (ptr, ...) @printf(ptr noundef @.str.4, ptr noundef %541)
  %543 = load ptr, ptr %4, align 8
  %544 = call i32 (ptr, ...) @printf(ptr noundef @.str.4, ptr noundef %543)
  %545 = call noundef ptr @_Z11str_printerv()
  %546 = getelementptr i8, ptr @.str.4, i32 1193046
  %547 = inttoptr i64 2147352576 to ptr
  %548 = load i32, ptr %547, align 4
  %549 = lshr i32 %548, 8
  %550 = and i32 %549, 255
  %551 = add i32 %550, 1048576
  %552 = add i32 -1802281087, %551
  %553 = inttoptr i64 2147352576 to ptr
  %554 = load i32, ptr %553, align 4
  %555 = lshr i32 %554, 8
  %556 = and i32 %555, 255
  %557 = add i32 %556, 16777215
  %558 = mul i32 1189901775, %557
  %559 = xor i32 %552, %558
  %560 = xor i32 %558, %552
  %561 = xor i32 %560, -1
  %562 = lshr i32 %560, %559
  %563 = shl i32 %561, %562
  %564 = mul i32 %561, %562
  %565 = xor i32 %564, %563
  %566 = add i32 %565, 482544135
  %567 = ptrtoint ptr %546 to i64
  %568 = zext i32 %566 to i64
  %569 = sub i64 %567, %568
  %570 = inttoptr i64 %569 to ptr
  %571 = call i32 (ptr, ...) @printf(ptr noundef %570, ptr noundef %545)
  ret i32 0
}

attributes #0 = { mustprogress noinline optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { mustprogress noinline norecurse optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 18.1.3 (1ubuntu1)"}
