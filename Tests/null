--- |
  ; ModuleID = './binaries/mir-out-obf.mir'
  source_filename = "./src/main.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
  target triple = "x86_64"
  
  %struct.StringContainer = type { i32, ptr }
  
  @.str = private unnamed_addr constant [29 x i8] c"Gonna let str_printer talk!\0A\00", align 1
  @.str.1 = private unnamed_addr constant [26 x i8] c"str_printer: hello world!\00", align 1
  @.str.2 = private unnamed_addr constant [10 x i8] c"warevisor\00", align 1
  @.str.3 = private unnamed_addr constant [11 x i8] c"warevising\00", align 1
  @.str.4 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define dso_local noundef ptr @_Z11str_printerv() #0 {
    %1 = getelementptr i8, ptr @.str, i32 1193046
    %2 = inttoptr i64 2147352576 to ptr
    %3 = load i32, ptr %2, align 4
    %4 = lshr i32 %3, 8
    %5 = and i32 %4, 255
    %6 = add i32 %5, 1048576
    %7 = xor i32 1506423304, %6
    %8 = inttoptr i64 2147352576 to ptr
    %9 = load i32, ptr %8, align 4
    %10 = lshr i32 %9, 8
    %11 = and i32 %10, 255
    %12 = add i32 %11, 16777215
    %13 = mul i32 -61552715, %12
    %14 = add i32 %13, %7
    %15 = xor i32 %7, %13
    %16 = xor i32 %14, -1
    %17 = xor i32 %15, -1
    %18 = shl i32 %17, %16
    %19 = lshr i32 %17, %16
    %20 = shl i32 %18, %19
    %21 = add i32 %20, 1193046
    %22 = ptrtoint ptr %1 to i64
    %23 = zext i32 %21 to i64
    %24 = sub i64 %22, %23
    %25 = inttoptr i64 %24 to ptr
    %26 = call i32 (ptr, ...) @printf(ptr noundef %25)
    %27 = getelementptr i8, ptr @.str.1, i32 1193046
    %28 = inttoptr i64 2147352576 to ptr
    %29 = load i32, ptr %28, align 4
    %30 = lshr i32 %29, 8
    %31 = and i32 %30, 255
    %32 = add i32 %31, 1048576
    %33 = xor i32 -2015651662, %32
    %34 = inttoptr i64 2147352576 to ptr
    %35 = load i32, ptr %34, align 4
    %36 = lshr i32 %35, 8
    %37 = and i32 %36, 255
    %38 = add i32 %37, 16777215
    %39 = xor i32 291822093, %38
    %40 = xor i32 %39, %33
    %41 = shl i32 %39, %33
    %42 = or i32 %41, %40
    %43 = xor i32 %41, -1
    %44 = mul i32 %42, %43
    %45 = or i32 %43, %42
    %46 = xor i32 %44, -1
    %47 = add i32 %46, 1774286615
    %48 = ptrtoint ptr %27 to i64
    %49 = zext i32 %47 to i64
    %50 = sub i64 %48, %49
    %51 = inttoptr i64 %50 to ptr
    %52 = call noundef ptr @_ZL8_obf_strPKc(ptr noundef %51)
    ret ptr %52
  }
  
  declare i32 @printf(ptr noundef, ...) #1
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define internal noundef ptr @_ZL8_obf_strPKc(ptr noundef %0) #2 section "._obf_str" {
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress noinline norecurse optnone uwtable
  define dso_local noundef i32 @main() #3 {
    %1 = alloca %struct.StringContainer, align 8
    %2 = alloca %struct.StringContainer, align 8
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = getelementptr inbounds %struct.StringContainer, ptr %1, i32 0, i32 0
    store i32 300, ptr %5, align 8
    %6 = getelementptr inbounds %struct.StringContainer, ptr %1, i32 0, i32 1
    %7 = getelementptr i8, ptr @.str.2, i32 1193046
    %8 = inttoptr i64 2147352576 to ptr
    %9 = load i32, ptr %8, align 4
    %10 = lshr i32 %9, 8
    %11 = and i32 %10, 255
    %12 = add i32 %11, 1048576
    %13 = xor i32 1842511386, %12
    %14 = inttoptr i64 2147352576 to ptr
    %15 = load i32, ptr %14, align 4
    %16 = lshr i32 %15, 8
    %17 = and i32 %16, 255
    %18 = add i32 %17, 16777215
    %19 = sub i32 1385456888, %18
    %20 = lshr i32 %13, %19
    %21 = add i32 %19, %13
    %22 = sub i32 %21, %20
    %23 = add i32 %20, %21
    %24 = xor i32 %22, -1
    %25 = sub i32 %23, %22
    %26 = xor i32 %24, -1
    %27 = add i32 %26, 1086017859
    %28 = ptrtoint ptr %7 to i64
    %29 = zext i32 %27 to i64
    %30 = sub i64 %28, %29
    %31 = inttoptr i64 %30 to ptr
    %32 = call noundef ptr @_ZL8_obf_strPKc(ptr noundef %31)
    store ptr %32, ptr %6, align 8
    %33 = getelementptr inbounds %struct.StringContainer, ptr %2, i32 0, i32 0
    store i32 90000, ptr %33, align 8
    %34 = getelementptr inbounds %struct.StringContainer, ptr %2, i32 0, i32 1
    %35 = getelementptr i8, ptr @.str.3, i32 1193046
    %36 = inttoptr i64 2147352576 to ptr
    %37 = load i32, ptr %36, align 4
    %38 = lshr i32 %37, 8
    %39 = and i32 %38, 255
    %40 = add i32 %39, 1048576
    %41 = shl i32 -701215102, %40
    %42 = inttoptr i64 2147352576 to ptr
    %43 = load i32, ptr %42, align 4
    %44 = lshr i32 %43, 8
    %45 = and i32 %44, 255
    %46 = add i32 %45, 16777215
    %47 = or i32 1946248088, %46
    %48 = add i32 %41, %47
    %49 = mul i32 %47, %41
    %50 = lshr i32 %49, %48
    %51 = or i32 %48, %49
    %52 = mul i32 %51, %50
    %53 = sub i32 %51, %50
    %54 = lshr i32 %53, %52
    %55 = add i32 %54, -1224400714
    %56 = ptrtoint ptr %35 to i64
    %57 = zext i32 %55 to i64
    %58 = sub i64 %56, %57
    %59 = inttoptr i64 %58 to ptr
    %60 = call noundef ptr @_ZL8_obf_strPKc(ptr noundef %59)
    store ptr %60, ptr %34, align 8
    %61 = getelementptr inbounds %struct.StringContainer, ptr %1, i32 0, i32 1
    %62 = load ptr, ptr %61, align 8
    store ptr %62, ptr %3, align 8
    %63 = getelementptr inbounds %struct.StringContainer, ptr %2, i32 0, i32 1
    %64 = load ptr, ptr %63, align 8
    store ptr %64, ptr %4, align 8
    %65 = load ptr, ptr %3, align 8
    %66 = call i32 (ptr, ...) @printf(ptr noundef @.str.4, ptr noundef %65)
    %67 = load ptr, ptr %4, align 8
    %68 = call i32 (ptr, ...) @printf(ptr noundef @.str.4, ptr noundef %67)
    %69 = call noundef ptr @_Z11str_printerv()
    %70 = getelementptr i8, ptr @.str.4, i32 1193046
    %71 = inttoptr i64 2147352576 to ptr
    %72 = load i32, ptr %71, align 4
    %73 = lshr i32 %72, 8
    %74 = and i32 %73, 255
    %75 = add i32 %74, 1048576
    %76 = lshr i32 1931065683, %75
    %77 = inttoptr i64 2147352576 to ptr
    %78 = load i32, ptr %77, align 4
    %79 = lshr i32 %78, 8
    %80 = and i32 %79, 255
    %81 = add i32 %80, 16777215
    %82 = lshr i32 -1615402121, %81
    %83 = shl i32 %76, %82
    %84 = sub i32 %82, %76
    %85 = shl i32 %83, %84
    %86 = or i32 %83, %84
    %87 = mul i32 %86, %85
    %88 = xor i32 %86, -1
    %89 = sub i32 %88, %87
    %90 = add i32 %89, 1193046
    %91 = ptrtoint ptr %70 to i64
    %92 = zext i32 %90 to i64
    %93 = sub i64 %91, %92
    %94 = inttoptr i64 %93 to ptr
    %95 = call i32 (ptr, ...) @printf(ptr noundef %94, ptr noundef %69)
    ret i32 0
  }
  
  attributes #0 = { mustprogress noinline optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #2 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #3 = { mustprogress noinline norecurse optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 2}
  !5 = !{!"clang version 18.0.0 (https://github.com/llvm/llvm-project.git e8f3ccd2737c638fafae7c5bf13cd2e913ef0f86)"}

...
---
name:            _Z11str_printerv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr32, preferred-register: '' }
  - { id: 16, class: gr32, preferred-register: '' }
  - { id: 17, class: gr32, preferred-register: '' }
  - { id: 18, class: gr32, preferred-register: '' }
  - { id: 19, class: gr32, preferred-register: '' }
  - { id: 20, class: gr32, preferred-register: '' }
  - { id: 21, class: gr32, preferred-register: '' }
  - { id: 22, class: gr32, preferred-register: '' }
  - { id: 23, class: gr32, preferred-register: '' }
  - { id: 24, class: gr32, preferred-register: '' }
  - { id: 25, class: gr32, preferred-register: '' }
  - { id: 26, class: gr32, preferred-register: '' }
  - { id: 27, class: gr32, preferred-register: '' }
  - { id: 28, class: gr32, preferred-register: '' }
  - { id: 29, class: gr32, preferred-register: '' }
  - { id: 30, class: gr32, preferred-register: '' }
  - { id: 31, class: gr32, preferred-register: '' }
  - { id: 32, class: gr32, preferred-register: '' }
  - { id: 33, class: gr32, preferred-register: '' }
  - { id: 34, class: gr64, preferred-register: '' }
  - { id: 35, class: gr64, preferred-register: '' }
  - { id: 36, class: gr32, preferred-register: '' }
  - { id: 37, class: gr32, preferred-register: '' }
  - { id: 38, class: gr32, preferred-register: '' }
  - { id: 39, class: gr32, preferred-register: '' }
  - { id: 40, class: gr32, preferred-register: '' }
  - { id: 41, class: gr32, preferred-register: '' }
  - { id: 42, class: gr32, preferred-register: '' }
  - { id: 43, class: gr32, preferred-register: '' }
  - { id: 44, class: gr32, preferred-register: '' }
  - { id: 45, class: gr64, preferred-register: '' }
  - { id: 46, class: gr64, preferred-register: '' }
  - { id: 47, class: gr32, preferred-register: '' }
  - { id: 48, class: gr64, preferred-register: '' }
  - { id: 49, class: gr64, preferred-register: '' }
  - { id: 50, class: gr64, preferred-register: '' }
  - { id: 51, class: gr32, preferred-register: '' }
  - { id: 52, class: gr64, preferred-register: '' }
  - { id: 53, class: gr64, preferred-register: '' }
  - { id: 54, class: gr64, preferred-register: '' }
  - { id: 55, class: gr64, preferred-register: '' }
  - { id: 56, class: gr32, preferred-register: '' }
  - { id: 57, class: gr32, preferred-register: '' }
  - { id: 58, class: gr64, preferred-register: '' }
  - { id: 59, class: gr64, preferred-register: '' }
  - { id: 60, class: gr32, preferred-register: '' }
  - { id: 61, class: gr32, preferred-register: '' }
  - { id: 62, class: gr32, preferred-register: '' }
  - { id: 63, class: gr32, preferred-register: '' }
  - { id: 64, class: gr32, preferred-register: '' }
  - { id: 65, class: gr32, preferred-register: '' }
  - { id: 66, class: gr32, preferred-register: '' }
  - { id: 67, class: gr32, preferred-register: '' }
  - { id: 68, class: gr32, preferred-register: '' }
  - { id: 69, class: gr32, preferred-register: '' }
  - { id: 70, class: gr32, preferred-register: '' }
  - { id: 71, class: gr32, preferred-register: '' }
  - { id: 72, class: gr32, preferred-register: '' }
  - { id: 73, class: gr32, preferred-register: '' }
  - { id: 74, class: gr32, preferred-register: '' }
  - { id: 75, class: gr32, preferred-register: '' }
  - { id: 76, class: gr32, preferred-register: '' }
  - { id: 77, class: gr32, preferred-register: '' }
  - { id: 78, class: gr32, preferred-register: '' }
  - { id: 79, class: gr32, preferred-register: '' }
  - { id: 80, class: gr32, preferred-register: '' }
  - { id: 81, class: gr32, preferred-register: '' }
  - { id: 82, class: gr32, preferred-register: '' }
  - { id: 83, class: gr32, preferred-register: '' }
  - { id: 84, class: gr32, preferred-register: '' }
  - { id: 85, class: gr64, preferred-register: '' }
  - { id: 86, class: gr64, preferred-register: '' }
  - { id: 87, class: gr32, preferred-register: '' }
  - { id: 88, class: gr32, preferred-register: '' }
  - { id: 89, class: gr32, preferred-register: '' }
  - { id: 90, class: gr32, preferred-register: '' }
  - { id: 91, class: gr32, preferred-register: '' }
  - { id: 92, class: gr32, preferred-register: '' }
  - { id: 93, class: gr32, preferred-register: '' }
  - { id: 94, class: gr32, preferred-register: '' }
  - { id: 95, class: gr32, preferred-register: '' }
  - { id: 96, class: gr64, preferred-register: '' }
  - { id: 97, class: gr64, preferred-register: '' }
  - { id: 98, class: gr32, preferred-register: '' }
  - { id: 99, class: gr64, preferred-register: '' }
  - { id: 100, class: gr64, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    %99:gr64 = MOV64ri @.str
    %100:gr64 = ADD64ri32 %99, 1193046, implicit-def $eflags
    %97:gr64 = MOV32ri64 2147352576
    %98:gr32 = MOV32rm %97, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
    %95:gr32 = SHR32ri %98, 8, implicit-def $eflags
    %93:gr32 = AND32ri %95, 255, implicit-def $eflags
    %91:gr32 = ADD32ri %93, 1048576, implicit-def $eflags
    %89:gr32 = XOR32ri %91, 1506423304, implicit-def $eflags
    %86:gr64 = MOV32ri64 2147352576
    %87:gr32 = MOV32rm %86, 1, $noreg, 0, $noreg :: (load (s32) from %ir.8)
    %84:gr32 = SHR32ri %87, 8, implicit-def $eflags
    %82:gr32 = AND32ri %84, 255, implicit-def $eflags
    %80:gr32 = ADD32ri %82, 16777215, implicit-def $eflags
    %78:gr32 = IMUL32rri %80, 4233414581, implicit-def $eflags
    %76:gr32 = ADD32rr %78, %89, implicit-def $eflags
    %75:gr32 = XOR32rr %89, %78, implicit-def $eflags
    %72:gr32 = XOR32ri %76, -1, implicit-def $eflags
    %70:gr32 = XOR32ri %75, -1, implicit-def $eflags
    $ecx = COPY %72
    $cl = KILL killed $ecx
    %68:gr32 = SHL32rCL %70, implicit-def $eflags, implicit $cl
    $ecx = COPY %72
    $cl = KILL killed $ecx
    %67:gr32 = SHR32rCL %70, implicit-def $eflags, implicit $cl
    $ecx = COPY %67
    $cl = KILL killed $ecx
    %64:gr32 = SHL32rCL %68, implicit-def $eflags, implicit $cl
    %61:gr32 = ADD32ri %64, 1193046, implicit-def $eflags
    %57:gr32 = MOV32rr %61
    %58:gr64 = SUBREG_TO_REG 0, %57, %subreg.sub_32bit
    %55:gr64 = SUB64rr %100, %58, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %55
    $al = MOV8ri 0
    CALL64pcrel32 target-flags(x86-plt) @printf, csr_64, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %51:gr32 = COPY $eax
    %48:gr64 = MOV64ri @.str.1
    %49:gr64 = ADD64ri32 %48, 1193046, implicit-def $eflags
    %46:gr64 = MOV32ri64 2147352576
    %47:gr32 = MOV32rm %46, 1, $noreg, 0, $noreg :: (load (s32) from %ir.28)
    %44:gr32 = SHR32ri %47, 8, implicit-def $eflags
    %42:gr32 = AND32ri %44, 255, implicit-def $eflags
    %40:gr32 = ADD32ri %42, 1048576, implicit-def $eflags
    %38:gr32 = XOR32ri %40, 2279315634, implicit-def $eflags
    %35:gr64 = MOV32ri64 2147352576
    %36:gr32 = MOV32rm %35, 1, $noreg, 0, $noreg :: (load (s32) from %ir.34)
    %33:gr32 = SHR32ri %36, 8, implicit-def $eflags
    %31:gr32 = AND32ri %33, 255, implicit-def $eflags
    %29:gr32 = ADD32ri %31, 16777215, implicit-def $eflags
    %27:gr32 = XOR32ri %29, 291822093, implicit-def $eflags
    %25:gr32 = XOR32rr %27, %38, implicit-def $eflags
    $ecx = COPY %38
    $cl = KILL killed $ecx
    %24:gr32 = SHL32rCL %27, implicit-def $eflags, implicit $cl
    %21:gr32 = OR32rr %24, %25, implicit-def $eflags
    %19:gr32 = XOR32ri %24, -1, implicit-def $eflags
    %17:gr32 = IMUL32rr %21, %19, implicit-def $eflags
    %14:gr32 = XOR32ri %17, -1, implicit-def $eflags
    %12:gr32 = ADD32ri %14, 1774286615, implicit-def $eflags
    %8:gr32 = MOV32rr %12
    %9:gr64 = SUBREG_TO_REG 0, %8, %subreg.sub_32bit
    %6:gr64 = SUB64rr %49, %9, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    CALL64pcrel32 @_ZL8_obf_strPKc, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %2:gr64 = COPY $rax
    $rax = COPY %2
    RET64 implicit $rax

...
---
name:            _ZL8_obf_strPKc
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.1):
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            main
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr32, preferred-register: '' }
  - { id: 16, class: gr32, preferred-register: '' }
  - { id: 17, class: gr32, preferred-register: '' }
  - { id: 18, class: gr32, preferred-register: '' }
  - { id: 19, class: gr32, preferred-register: '' }
  - { id: 20, class: gr32, preferred-register: '' }
  - { id: 21, class: gr32, preferred-register: '' }
  - { id: 22, class: gr32, preferred-register: '' }
  - { id: 23, class: gr32, preferred-register: '' }
  - { id: 24, class: gr32, preferred-register: '' }
  - { id: 25, class: gr32, preferred-register: '' }
  - { id: 26, class: gr32, preferred-register: '' }
  - { id: 27, class: gr32, preferred-register: '' }
  - { id: 28, class: gr32, preferred-register: '' }
  - { id: 29, class: gr32, preferred-register: '' }
  - { id: 30, class: gr32, preferred-register: '' }
  - { id: 31, class: gr32, preferred-register: '' }
  - { id: 32, class: gr32, preferred-register: '' }
  - { id: 33, class: gr32, preferred-register: '' }
  - { id: 34, class: gr32, preferred-register: '' }
  - { id: 35, class: gr32, preferred-register: '' }
  - { id: 36, class: gr32, preferred-register: '' }
  - { id: 37, class: gr32, preferred-register: '' }
  - { id: 38, class: gr64, preferred-register: '' }
  - { id: 39, class: gr64, preferred-register: '' }
  - { id: 40, class: gr32, preferred-register: '' }
  - { id: 41, class: gr32, preferred-register: '' }
  - { id: 42, class: gr32, preferred-register: '' }
  - { id: 43, class: gr32, preferred-register: '' }
  - { id: 44, class: gr32, preferred-register: '' }
  - { id: 45, class: gr32, preferred-register: '' }
  - { id: 46, class: gr32, preferred-register: '' }
  - { id: 47, class: gr32, preferred-register: '' }
  - { id: 48, class: gr32, preferred-register: '' }
  - { id: 49, class: gr32, preferred-register: '' }
  - { id: 50, class: gr64, preferred-register: '' }
  - { id: 51, class: gr64, preferred-register: '' }
  - { id: 52, class: gr32, preferred-register: '' }
  - { id: 53, class: gr64, preferred-register: '' }
  - { id: 54, class: gr64, preferred-register: '' }
  - { id: 55, class: gr64, preferred-register: '' }
  - { id: 56, class: gr64, preferred-register: '' }
  - { id: 57, class: gr64, preferred-register: '' }
  - { id: 58, class: gr32, preferred-register: '' }
  - { id: 59, class: gr64, preferred-register: '' }
  - { id: 60, class: gr64, preferred-register: '' }
  - { id: 61, class: gr64, preferred-register: '' }
  - { id: 62, class: gr32, preferred-register: '' }
  - { id: 63, class: gr64, preferred-register: '' }
  - { id: 64, class: gr64, preferred-register: '' }
  - { id: 65, class: gr64, preferred-register: '' }
  - { id: 66, class: gr64, preferred-register: '' }
  - { id: 67, class: gr64, preferred-register: '' }
  - { id: 68, class: gr64, preferred-register: '' }
  - { id: 69, class: gr64, preferred-register: '' }
  - { id: 70, class: gr64, preferred-register: '' }
  - { id: 71, class: gr64, preferred-register: '' }
  - { id: 72, class: gr64, preferred-register: '' }
  - { id: 73, class: gr64, preferred-register: '' }
  - { id: 74, class: gr64, preferred-register: '' }
  - { id: 75, class: gr32, preferred-register: '' }
  - { id: 76, class: gr32, preferred-register: '' }
  - { id: 77, class: gr64, preferred-register: '' }
  - { id: 78, class: gr64, preferred-register: '' }
  - { id: 79, class: gr32, preferred-register: '' }
  - { id: 80, class: gr32, preferred-register: '' }
  - { id: 81, class: gr32, preferred-register: '' }
  - { id: 82, class: gr32, preferred-register: '' }
  - { id: 83, class: gr32, preferred-register: '' }
  - { id: 84, class: gr32, preferred-register: '' }
  - { id: 85, class: gr32, preferred-register: '' }
  - { id: 86, class: gr32, preferred-register: '' }
  - { id: 87, class: gr32, preferred-register: '' }
  - { id: 88, class: gr32, preferred-register: '' }
  - { id: 89, class: gr32, preferred-register: '' }
  - { id: 90, class: gr32, preferred-register: '' }
  - { id: 91, class: gr32, preferred-register: '' }
  - { id: 92, class: gr32, preferred-register: '' }
  - { id: 93, class: gr32, preferred-register: '' }
  - { id: 94, class: gr32, preferred-register: '' }
  - { id: 95, class: gr32, preferred-register: '' }
  - { id: 96, class: gr32, preferred-register: '' }
  - { id: 97, class: gr32, preferred-register: '' }
  - { id: 98, class: gr32, preferred-register: '' }
  - { id: 99, class: gr32, preferred-register: '' }
  - { id: 100, class: gr32, preferred-register: '' }
  - { id: 101, class: gr32, preferred-register: '' }
  - { id: 102, class: gr32, preferred-register: '' }
  - { id: 103, class: gr32, preferred-register: '' }
  - { id: 104, class: gr64, preferred-register: '' }
  - { id: 105, class: gr64, preferred-register: '' }
  - { id: 106, class: gr32, preferred-register: '' }
  - { id: 107, class: gr32, preferred-register: '' }
  - { id: 108, class: gr32, preferred-register: '' }
  - { id: 109, class: gr32, preferred-register: '' }
  - { id: 110, class: gr32, preferred-register: '' }
  - { id: 111, class: gr32, preferred-register: '' }
  - { id: 112, class: gr32, preferred-register: '' }
  - { id: 113, class: gr32, preferred-register: '' }
  - { id: 114, class: gr32, preferred-register: '' }
  - { id: 115, class: gr32, preferred-register: '' }
  - { id: 116, class: gr64, preferred-register: '' }
  - { id: 117, class: gr64, preferred-register: '' }
  - { id: 118, class: gr32, preferred-register: '' }
  - { id: 119, class: gr64, preferred-register: '' }
  - { id: 120, class: gr64, preferred-register: '' }
  - { id: 121, class: gr64, preferred-register: '' }
  - { id: 122, class: gr64, preferred-register: '' }
  - { id: 123, class: gr64, preferred-register: '' }
  - { id: 124, class: gr64, preferred-register: '' }
  - { id: 125, class: gr64, preferred-register: '' }
  - { id: 126, class: gr64, preferred-register: '' }
  - { id: 127, class: gr64, preferred-register: '' }
  - { id: 128, class: gr32, preferred-register: '' }
  - { id: 129, class: gr32, preferred-register: '' }
  - { id: 130, class: gr64, preferred-register: '' }
  - { id: 131, class: gr64, preferred-register: '' }
  - { id: 132, class: gr32, preferred-register: '' }
  - { id: 133, class: gr32, preferred-register: '' }
  - { id: 134, class: gr32, preferred-register: '' }
  - { id: 135, class: gr32, preferred-register: '' }
  - { id: 136, class: gr32, preferred-register: '' }
  - { id: 137, class: gr32, preferred-register: '' }
  - { id: 138, class: gr32, preferred-register: '' }
  - { id: 139, class: gr32, preferred-register: '' }
  - { id: 140, class: gr32, preferred-register: '' }
  - { id: 141, class: gr32, preferred-register: '' }
  - { id: 142, class: gr32, preferred-register: '' }
  - { id: 143, class: gr32, preferred-register: '' }
  - { id: 144, class: gr32, preferred-register: '' }
  - { id: 145, class: gr32, preferred-register: '' }
  - { id: 146, class: gr32, preferred-register: '' }
  - { id: 147, class: gr32, preferred-register: '' }
  - { id: 148, class: gr32, preferred-register: '' }
  - { id: 149, class: gr32, preferred-register: '' }
  - { id: 150, class: gr32, preferred-register: '' }
  - { id: 151, class: gr32, preferred-register: '' }
  - { id: 152, class: gr32, preferred-register: '' }
  - { id: 153, class: gr32, preferred-register: '' }
  - { id: 154, class: gr64, preferred-register: '' }
  - { id: 155, class: gr64, preferred-register: '' }
  - { id: 156, class: gr32, preferred-register: '' }
  - { id: 157, class: gr32, preferred-register: '' }
  - { id: 158, class: gr32, preferred-register: '' }
  - { id: 159, class: gr32, preferred-register: '' }
  - { id: 160, class: gr32, preferred-register: '' }
  - { id: 161, class: gr32, preferred-register: '' }
  - { id: 162, class: gr32, preferred-register: '' }
  - { id: 163, class: gr32, preferred-register: '' }
  - { id: 164, class: gr32, preferred-register: '' }
  - { id: 165, class: gr64, preferred-register: '' }
  - { id: 166, class: gr64, preferred-register: '' }
  - { id: 167, class: gr32, preferred-register: '' }
  - { id: 168, class: gr64, preferred-register: '' }
  - { id: 169, class: gr64, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    MOV32mi %stack.0, 1, $noreg, 0, $noreg, 300 :: (store (s32) into %ir.5, align 8)
    %168:gr64 = MOV64ri @.str.2
    %169:gr64 = ADD64ri32 %168, 1193046, implicit-def $eflags
    %166:gr64 = MOV32ri64 2147352576
    %167:gr32 = MOV32rm %166, 1, $noreg, 0, $noreg :: (load (s32) from %ir.8)
    %164:gr32 = SHR32ri %167, 8, implicit-def $eflags
    %162:gr32 = AND32ri %164, 255, implicit-def $eflags
    %160:gr32 = ADD32ri %162, 1048576, implicit-def $eflags
    %158:gr32 = XOR32ri %160, 1842511386, implicit-def $eflags
    %155:gr64 = MOV32ri64 2147352576
    %156:gr32 = MOV32rm %155, 1, $noreg, 0, $noreg :: (load (s32) from %ir.14)
    %153:gr32 = SHR32ri %156, 8, implicit-def $eflags
    %151:gr32 = AND32ri %153, 255, implicit-def $eflags
    %149:gr32 = ADD32ri %151, 16777215, implicit-def $eflags
    %145:gr32 = MOV32ri 1385456888
    %147:gr32 = SUB32rr %145, %149, implicit-def $eflags
    $ecx = COPY %147
    $cl = KILL killed $ecx
    %144:gr32 = SHR32rCL %158, implicit-def $eflags, implicit $cl
    %143:gr32 = ADD32rr %147, %158, implicit-def $eflags
    %140:gr32 = SUB32rr %143, %144, implicit-def $eflags
    %137:gr32 = XOR32ri %140, -1, implicit-def $eflags
    %135:gr32 = XOR32ri %137, -1, implicit-def $eflags
    %133:gr32 = ADD32ri %135, 1086017859, implicit-def $eflags
    %129:gr32 = MOV32rr %133
    %130:gr64 = SUBREG_TO_REG 0, %129, %subreg.sub_32bit
    %127:gr64 = SUB64rr %169, %130, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %127
    CALL64pcrel32 @_ZL8_obf_strPKc, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %123:gr64 = COPY $rax
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, %123 :: (store (s64) into %ir.6)
    MOV32mi %stack.1, 1, $noreg, 0, $noreg, 90000 :: (store (s32) into %ir.33, align 8)
    %119:gr64 = MOV64ri @.str.3
    %120:gr64 = ADD64ri32 %119, 1193046, implicit-def $eflags
    %117:gr64 = MOV32ri64 2147352576
    %118:gr32 = MOV32rm %117, 1, $noreg, 0, $noreg :: (load (s32) from %ir.36)
    %115:gr32 = SHR32ri %118, 8, implicit-def $eflags
    %113:gr32 = AND32ri %115, 255, implicit-def $eflags
    %111:gr32 = ADD32ri %113, 1048576, implicit-def $eflags
    %107:gr32 = MOV32ri 3593752194
    $ecx = COPY %111
    $cl = KILL killed $ecx
    %109:gr32 = SHL32rCL %107, implicit-def $eflags, implicit $cl
    %105:gr64 = MOV32ri64 2147352576
    %106:gr32 = MOV32rm %105, 1, $noreg, 0, $noreg :: (load (s32) from %ir.42)
    %103:gr32 = SHR32ri %106, 8, implicit-def $eflags
    %101:gr32 = AND32ri %103, 255, implicit-def $eflags
    %99:gr32 = ADD32ri %101, 16777215, implicit-def $eflags
    %97:gr32 = OR32ri %99, 1946248088, implicit-def $eflags
    %95:gr32 = ADD32rr %109, %97, implicit-def $eflags
    %94:gr32 = IMUL32rr %97, %109, implicit-def $eflags
    $ecx = COPY %95
    $cl = KILL killed $ecx
    %91:gr32 = SHR32rCL %94, implicit-def $eflags, implicit $cl
    %90:gr32 = OR32rr %95, %94, implicit-def $eflags
    %87:gr32 = IMUL32rr %90, %91, implicit-def $eflags
    %86:gr32 = SUB32rr %90, %91, implicit-def $eflags
    $ecx = COPY %87
    $cl = KILL killed $ecx
    %83:gr32 = SHR32rCL %86, implicit-def $eflags, implicit $cl
    %80:gr32 = ADD32ri %83, -1224400714, implicit-def $eflags
    %76:gr32 = MOV32rr %80
    %77:gr64 = SUBREG_TO_REG 0, %76, %subreg.sub_32bit
    %74:gr64 = SUB64rr %120, %77, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %74
    CALL64pcrel32 @_ZL8_obf_strPKc, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %70:gr64 = COPY $rax
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, %70 :: (store (s64) into %ir.34)
    %67:gr64 = MOV64rm %stack.0, 1, $noreg, 8, $noreg :: (load (s64) from %ir.61)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %67 :: (store (s64) into %ir.3)
    %65:gr64 = MOV64rm %stack.1, 1, $noreg, 8, $noreg :: (load (s64) from %ir.63)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %65 :: (store (s64) into %ir.4)
    %63:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %60:gr64 = MOV64ri @.str.4
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %60
    $rsi = COPY %63
    $al = MOV8ri 0
    CALL64pcrel32 target-flags(x86-plt) @printf, csr_64, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %62:gr32 = COPY $eax
    %59:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %56:gr64 = MOV64ri @.str.4
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %56
    $rsi = COPY %59
    $al = MOV8ri 0
    CALL64pcrel32 target-flags(x86-plt) @printf, csr_64, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %58:gr32 = COPY $eax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 @_Z11str_printerv, csr_64, implicit $rsp, implicit $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %55:gr64 = COPY $rax
    %53:gr64 = MOV64ri @.str.4
    %54:gr64 = ADD64ri32 %53, 1193046, implicit-def $eflags
    %51:gr64 = MOV32ri64 2147352576
    %52:gr32 = MOV32rm %51, 1, $noreg, 0, $noreg :: (load (s32) from %ir.71)
    %49:gr32 = SHR32ri %52, 8, implicit-def $eflags
    %47:gr32 = AND32ri %49, 255, implicit-def $eflags
    %45:gr32 = ADD32ri %47, 1048576, implicit-def $eflags
    %41:gr32 = MOV32ri 1931065683
    $ecx = COPY %45
    $cl = KILL killed $ecx
    %43:gr32 = SHR32rCL %41, implicit-def $eflags, implicit $cl
    %39:gr64 = MOV32ri64 2147352576
    %40:gr32 = MOV32rm %39, 1, $noreg, 0, $noreg :: (load (s32) from %ir.77)
    %37:gr32 = SHR32ri %40, 8, implicit-def $eflags
    %35:gr32 = AND32ri %37, 255, implicit-def $eflags
    %33:gr32 = ADD32ri %35, 16777215, implicit-def $eflags
    %29:gr32 = MOV32ri 2679565175
    $ecx = COPY %33
    $cl = KILL killed $ecx
    %31:gr32 = SHR32rCL %29, implicit-def $eflags, implicit $cl
    $ecx = COPY %31
    $cl = KILL killed $ecx
    %28:gr32 = SHL32rCL %43, implicit-def $eflags, implicit $cl
    %27:gr32 = SUB32rr %31, %43, implicit-def $eflags
    $ecx = COPY %27
    $cl = KILL killed $ecx
    %24:gr32 = SHL32rCL %28, implicit-def $eflags, implicit $cl
    %23:gr32 = OR32rr %28, %27, implicit-def $eflags
    %20:gr32 = IMUL32rr %23, %24, implicit-def $eflags
    %18:gr32 = XOR32ri %23, -1, implicit-def $eflags
    %16:gr32 = SUB32rr %18, %20, implicit-def $eflags
    %13:gr32 = ADD32ri %16, 1193046, implicit-def $eflags
    %9:gr32 = MOV32rr %13
    %10:gr64 = SUBREG_TO_REG 0, %9, %subreg.sub_32bit
    %7:gr64 = SUB64rr %54, %10, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %7
    $rsi = COPY %55
    $al = MOV8ri 0
    CALL64pcrel32 target-flags(x86-plt) @printf, csr_64, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %3:gr32 = COPY $eax
    %0:gr32 = MOV32r0 implicit-def $eflags
    $eax = COPY %0
    RET64 implicit $eax

...
